{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { property } from 'lit/decorators.js';\nimport { LoopOnce, LoopPingPong, LoopRepeat } from 'three';\nimport { $getModelIsVisible, $needsRender, $onModelLoad, $renderer, $scene, $tick } from '../model-viewer-base.js';\nconst MILLISECONDS_PER_SECOND = 1000.0;\nconst $changeAnimation = Symbol('changeAnimation');\nconst $paused = Symbol('paused');\nconst DEFAULT_PLAY_OPTIONS = {\n  repetitions: Infinity,\n  pingpong: false\n};\nexport const AnimationMixin = ModelViewerElement => {\n  var _a;\n\n  class AnimationModelViewerElement extends ModelViewerElement {\n    constructor() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      super(args);\n      this.autoplay = false;\n      this.animationName = undefined;\n      this.animationCrossfadeDuration = 300;\n      this[_a] = true;\n      this[$scene].subscribeMixerEvent('loop', e => {\n        const count = e.action._loopCount;\n        this.dispatchEvent(new CustomEvent('loop', {\n          detail: {\n            count\n          }\n        }));\n      });\n      this[$scene].subscribeMixerEvent('finished', () => {\n        this[$paused] = true;\n        this.dispatchEvent(new CustomEvent('finished'));\n      });\n    }\n    /**\n     * Returns an array\n     */\n\n\n    get availableAnimations() {\n      if (this.loaded) {\n        return this[$scene].animationNames;\n      }\n\n      return [];\n    }\n\n    get duration() {\n      return this[$scene].duration;\n    }\n\n    get paused() {\n      return this[$paused];\n    }\n\n    get currentTime() {\n      return this[$scene].animationTime;\n    }\n\n    set currentTime(value) {\n      this[$scene].animationTime = value;\n      this[$needsRender]();\n    }\n\n    get timeScale() {\n      return this[$scene].animationTimeScale;\n    }\n\n    set timeScale(value) {\n      this[$scene].animationTimeScale = value;\n    }\n\n    pause() {\n      if (this[$paused]) {\n        return;\n      }\n\n      this[$paused] = true;\n      this.dispatchEvent(new CustomEvent('pause'));\n    }\n\n    play(options) {\n      if (this.availableAnimations.length > 0) {\n        this[$paused] = false;\n        this[$changeAnimation](options);\n        this.dispatchEvent(new CustomEvent('play'));\n      }\n    }\n\n    [(_a = $paused, $onModelLoad)]() {\n      super[$onModelLoad]();\n      this[$paused] = true;\n\n      if (this.autoplay) {\n        this.play();\n      }\n    }\n\n    [$tick](_time, delta) {\n      super[$tick](_time, delta);\n\n      if (this[$paused] || !this[$getModelIsVisible]() && !this[$renderer].isPresenting) {\n        return;\n      }\n\n      this[$scene].updateAnimation(delta / MILLISECONDS_PER_SECOND);\n      this[$needsRender]();\n    }\n\n    updated(changedProperties) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoplay') && this.autoplay) {\n        this.play();\n      }\n\n      if (changedProperties.has('animationName')) {\n        this[$changeAnimation]();\n      }\n    }\n\n    [$changeAnimation]() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_PLAY_OPTIONS;\n\n      var _b;\n\n      const repetitions = (_b = options.repetitions) !== null && _b !== void 0 ? _b : Infinity;\n      const mode = options.pingpong ? LoopPingPong : repetitions === 1 ? LoopOnce : LoopRepeat;\n      this[$scene].playAnimation(this.animationName, this.animationCrossfadeDuration / MILLISECONDS_PER_SECOND, mode, repetitions); // If we are currently paused, we need to force a render so that\n      // the scene updates to the first frame of the new animation\n\n      if (this[$paused]) {\n        this[$scene].updateAnimation(0);\n        this[$needsRender]();\n      }\n    }\n\n  }\n\n  __decorate([property({\n    type: Boolean\n  })], AnimationModelViewerElement.prototype, \"autoplay\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'animation-name'\n  })], AnimationModelViewerElement.prototype, \"animationName\", void 0);\n\n  __decorate([property({\n    type: Number,\n    attribute: 'animation-crossfade-duration'\n  })], AnimationModelViewerElement.prototype, \"animationCrossfadeDuration\", void 0);\n\n  return AnimationModelViewerElement;\n}; //# sourceMappingURL=animation.js.map","map":null,"metadata":{},"sourceType":"module"}