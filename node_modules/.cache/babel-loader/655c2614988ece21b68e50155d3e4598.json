{"ast":null,"code":"var G = Object.defineProperty,\n    x = Object.defineProperties;\nvar M = Object.getOwnPropertyDescriptors;\nvar R = Object.getOwnPropertySymbols;\nvar k = Object.prototype.hasOwnProperty,\n    Q = Object.prototype.propertyIsEnumerable;\n\nvar O = (a, e, t) => e in a ? G(a, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : a[e] = t,\n    u = (a, e) => {\n  for (var t in e || (e = {})) k.call(e, t) && O(a, t, e[t]);\n\n  if (R) for (var t of R(e)) Q.call(e, t) && O(a, t, e[t]);\n  return a;\n},\n    I = (a, e) => x(a, M(e));\n\nvar i = (a, e, t) => new Promise((r, s) => {\n  var o = l => {\n    try {\n      p(t.next(l));\n    } catch (d) {\n      s(d);\n    }\n  },\n      n = l => {\n    try {\n      p(t.throw(l));\n    } catch (d) {\n      s(d);\n    }\n  },\n      p = l => l.done ? r(l.value) : Promise.resolve(l.value).then(o, n);\n\n  p((t = t.apply(a, e)).next());\n});\n\nvar g = \"/sdk/2022-08-12/embedded-wallet\",\n    T = a => `paperEwsWalletUserId-${a}`,\n    F = \"walletToken\",\n    E = a => `${F}-${a}`,\n    U = \"a\",\n    A = (a, e) => `${U}-${a}-${e}`,\n    X = a => `${U}-${a}`;\n\nvar H = (s => (s.PAPER_EMAIL_OTP = \"PaperEmailOTP\", s.GOOGLE = \"Google\", s.AUTH0 = \"Auth0\", s.CUSTOM_JWT = \"CustomJWT\", s))(H || {});\n\nvar b = (t => (t.LOGGED_OUT = \"Logged Out\", t.LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\", t))(b || {}),\n    C = (s => (s.LOGGED_OUT = \"Logged Out\", s.LOGGED_IN_WALLET_UNINITIALIZED = \"Logged In, Wallet Uninitialized\", s.LOGGED_IN_NEW_DEVICE = \"Logged In, New Device\", s.LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\", s))(C || {});\n\nimport { getPaperOriginUrl as V } from \"@paperxyz/sdk-common-utilities\";\nvar N = new Map(),\n    c = class {\n  constructor(_ref) {\n    let {\n      clientId: e\n    } = _ref;\n    this.isSupported = typeof window != \"undefined\" && !!window.localStorage, this.clientId = e;\n  }\n\n  getItem(e) {\n    return i(this, null, function* () {\n      var t;\n      return this.isSupported ? window.localStorage.getItem(e) : (t = N.get(e)) != null ? t : null;\n    });\n  }\n\n  setItem(e, t) {\n    return i(this, null, function* () {\n      if (this.isSupported) return window.localStorage.setItem(e, t);\n      N.set(e, t);\n    });\n  }\n\n  removeItem(e) {\n    return i(this, null, function* () {\n      let t = yield this.getItem(e);\n      return this.isSupported && t ? (window.localStorage.removeItem(e), !0) : !1;\n    });\n  }\n\n  saveAuthCookie(e) {\n    return i(this, null, function* () {\n      yield this.setItem(E(this.clientId), e);\n    });\n  }\n\n  getAuthCookie() {\n    return i(this, null, function* () {\n      return this.getItem(E(this.clientId));\n    });\n  }\n\n  removeAuthCookie() {\n    return i(this, null, function* () {\n      return this.removeItem(E(this.clientId));\n    });\n  }\n\n  saveDeviceShare(e, t) {\n    return i(this, null, function* () {\n      yield this.saveWalletUserId(t), yield this.setItem(A(this.clientId, t), e);\n    });\n  }\n\n  getDeviceShare() {\n    return i(this, null, function* () {\n      let e = yield this.getWalletUserId();\n      return e ? this.getItem(A(this.clientId, e)) : null;\n    });\n  }\n\n  removeDeviceShare() {\n    return i(this, null, function* () {\n      let e = yield this.getWalletUserId();\n      return e ? this.removeItem(A(this.clientId, e)) : !1;\n    });\n  }\n\n  getWalletUserId() {\n    return i(this, null, function* () {\n      return this.getItem(T(this.clientId));\n    });\n  }\n\n  saveWalletUserId(e) {\n    return i(this, null, function* () {\n      yield this.setItem(T(this.clientId), e);\n    });\n  }\n\n  removeWalletUserId() {\n    return i(this, null, function* () {\n      return this.removeItem(T(this.clientId));\n    });\n  }\n\n};\nimport { getPaperOriginUrl as v } from \"@paperxyz/sdk-common-utilities\";\n\nfunction L(a) {\n  return new Promise(e => {\n    setTimeout(e, a * 1e3);\n  });\n}\n\nvar z = {\n  height: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  backgroundColor: \"transparent\",\n  position: \"fixed\",\n  top: \"0px\",\n  right: \"0px\",\n  zIndex: \"2147483646\",\n  display: \"none\"\n},\n    w = new Map(),\n    f = class {\n  constructor(_ref2) {\n    let {\n      link: e,\n      iframeId: t,\n      container: r = document.body,\n      iframeStyles: s,\n      onIframeInitialize: o\n    } = _ref2;\n    this.POLLING_INTERVAL_SECONDS = 1.4;\n    this.POST_LOAD_BUFFER_SECONDS = 1;\n    let n = document.getElementById(t),\n        p = new URL(e),\n        l = \"0.0.26\";\n    if (!l) throw new Error(\"Missing SDK_VERSION env var\");\n\n    if (p.searchParams.set(\"sdkVersion\", l), !n || n.src != p.href) {\n      if (!n) {\n        n = document.createElement(\"iframe\");\n        let d = u(u({}, z), s);\n        Object.assign(n.style, d), n.setAttribute(\"id\", t), r.appendChild(n);\n      }\n\n      n.src = p.href, n.setAttribute(\"data-version\", l), n.onload = this.onIframeLoadHandler(n, this.POST_LOAD_BUFFER_SECONDS, o);\n    }\n\n    this.iframe = n;\n  }\n\n  onIframeLoadedInitVariables() {\n    return i(this, null, function* () {\n      return {};\n    });\n  }\n\n  onIframeLoadHandler(e, t, r) {\n    return () => i(this, null, function* () {\n      yield new Promise((o, n) => i(this, null, function* () {\n        var d;\n        let p = new MessageChannel();\n        p.port1.onmessage = S => {\n          let {\n            data: m\n          } = S;\n          return p.port1.close(), m.success ? (w.set(e.src, !0), r && r(), o(!0)) : n(m.error);\n        }, yield L(t);\n        let l = \"initIframe\";\n        (d = e == null ? void 0 : e.contentWindow) == null || d.postMessage({\n          eventType: l,\n          data: yield this.onIframeLoadedInitVariables()\n        }, `${v()}${g}`, [p.port2]);\n      }));\n    });\n  }\n\n  call(s) {\n    return i(this, arguments, function* (_ref3) {\n      let {\n        procedureName: e,\n        params: t,\n        showIframe: r = !1\n      } = _ref3;\n\n      for (; !w.get(this.iframe.src);) yield L(this.POLLING_INTERVAL_SECONDS);\n\n      return r && (this.iframe.style.display = \"block\", yield L(.005)), new Promise((n, p) => {\n        var d;\n        let l = new MessageChannel();\n        l.port1.onmessage = S => i(this, null, function* () {\n          let {\n            data: m\n          } = S;\n          l.port1.close(), r && (yield L(.1), this.iframe.style.display = \"none\"), m.success ? n(m.data) : p(m.error);\n        }), (d = this.iframe.contentWindow) == null || d.postMessage({\n          eventType: e,\n          data: t\n        }, `${v()}${g}`, [l.port2]);\n      });\n    });\n  }\n\n  destroy() {\n    w.delete(this.iframe.src);\n  }\n\n};\nvar W = class extends f {\n  constructor(_ref4) {\n    let {\n      clientId: t,\n      customizationOptions: r\n    } = _ref4;\n    super({\n      iframeId: j,\n      link: q({\n        clientId: t,\n        path: g,\n        queryParams: r\n      }).href,\n      container: document.body\n    });\n    this.clientId = t;\n  }\n\n  onIframeLoadedInitVariables() {\n    return i(this, null, function* () {\n      let t = new c({\n        clientId: this.clientId\n      });\n      return {\n        authCookie: yield t.getAuthCookie(),\n        deviceShareStored: yield t.getDeviceShare(),\n        walletUserId: yield t.getWalletUserId(),\n        clientId: this.clientId\n      };\n    });\n  }\n\n};\n\nfunction q(_ref5) {\n  let {\n    clientId: a,\n    path: e,\n    queryParams: t\n  } = _ref5;\n  var s;\n  let r = new URL(e, V());\n  if (r.searchParams.set(\"clientId\", a), t) for (let o of Object.keys(t)) r.searchParams.set(o, ((s = t[o]) == null ? void 0 : s.toString()) || \"\");\n  return r;\n}\n\nvar j = \"paper-embedded-wallet-iframe\";\n\nvar _ = class {\n  constructor(_ref6) {\n    let {\n      clientId: e,\n      querier: t,\n      onAuthSuccess: r\n    } = _ref6;\n    this.clientId = e, this.AuthQuerier = t, this.localStorage = new c({\n      clientId: e\n    }), this.onAuthSuccess = r;\n  }\n\n  postLogin(r) {\n    return i(this, arguments, function* (_ref7) {\n      let {\n        storedToken: e,\n        walletDetails: t\n      } = _ref7;\n      return e.shouldStoreCookieString && (yield this.localStorage.saveAuthCookie(e.cookieString)), yield this.onAuthSuccess({\n        storedToken: e,\n        walletDetails: t\n      });\n    });\n  }\n\n  loginWithJwtAuth(s) {\n    return i(this, arguments, function* (_ref8) {\n      let {\n        token: e,\n        authProvider: t,\n        recoveryCode: r\n      } = _ref8;\n      let o = yield this.AuthQuerier.call({\n        procedureName: \"loginWithJwtAuthCallback\",\n        params: {\n          token: e,\n          authProvider: t,\n          recoveryCode: r\n        }\n      });\n      return this.postLogin(o);\n    });\n  }\n\n  loginWithPaperModal() {\n    return i(this, null, function* () {\n      let e = yield this.AuthQuerier.call({\n        procedureName: \"loginWithPaperModal\",\n        params: void 0,\n        showIframe: !0\n      });\n      return this.postLogin(e);\n    });\n  }\n\n  loginWithPaperEmailOtp(t) {\n    return i(this, arguments, function* (_ref9) {\n      let {\n        email: e\n      } = _ref9;\n      let r = yield this.AuthQuerier.call({\n        procedureName: \"loginWithPaperModal\",\n        params: {\n          email: e\n        },\n        showIframe: !0\n      });\n      return this.postLogin(r);\n    });\n  }\n\n  sendPaperEmailLoginOtp(t) {\n    return i(this, arguments, function* (_ref10) {\n      let {\n        email: e\n      } = _ref10;\n      let {\n        isNewUser: r,\n        isNewDevice: s\n      } = yield this.AuthQuerier.call({\n        procedureName: \"sendPaperEmailLoginOtp\",\n        params: {\n          email: e\n        }\n      });\n      return {\n        isNewUser: r,\n        isNewDevice: s\n      };\n    });\n  }\n\n  verifyPaperEmailLoginOtp(s) {\n    return i(this, arguments, function* (_ref11) {\n      let {\n        email: e,\n        otp: t,\n        recoveryCode: r\n      } = _ref11;\n      let o = yield this.AuthQuerier.call({\n        procedureName: \"verifyPaperEmailLoginOtp\",\n        params: {\n          email: e,\n          otp: t,\n          recoveryCode: r\n        }\n      });\n      return this.postLogin(o);\n    });\n  }\n\n  logout() {\n    return i(this, null, function* () {\n      let {\n        success: e\n      } = yield this.AuthQuerier.call({\n        procedureName: \"logout\",\n        params: void 0\n      }),\n          t = yield this.localStorage.removeAuthCookie(),\n          r = yield this.localStorage.removeWalletUserId();\n      return {\n        success: e || t || r\n      };\n    });\n  }\n\n};\n\nimport { getDefaultProvider as B } from \"@ethersproject/providers\";\nimport { ChainToPublicRpc as J } from \"@paperxyz/sdk-common-utilities\";\nvar y = class {\n  constructor(_ref12) {\n    let {\n      chain: e,\n      clientId: t,\n      querier: r\n    } = _ref12;\n    this.chain = e, this.clientId = t, this.gaslessTransactionQuerier = r;\n  }\n\n  callContract(s) {\n    return i(this, arguments, function* (_ref13) {\n      let {\n        contractAddress: e,\n        methodArgs: t,\n        methodInterface: r\n      } = _ref13;\n      return yield this.gaslessTransactionQuerier.call({\n        procedureName: \"callContract\",\n        params: {\n          chain: this.chain,\n          contractAddress: e,\n          method: {\n            args: t,\n            stub: r\n          }\n        }\n      });\n    });\n  }\n\n};\nimport { Signer as Z } from \"@ethersproject/abstract-signer\";\nimport { defineReadOnly as $ } from \"@ethersproject/properties\";\nvar h = class extends Z {\n  constructor(_ref14) {\n    let {\n      provider: t,\n      clientId: r,\n      querier: s\n    } = _ref14;\n    super();\n    this.DEFAULT_ETHEREUM_CHAIN_ID = 1;\n    this.clientId = r, this.querier = s, $(this, \"provider\", t);\n  }\n\n  getAddress() {\n    return i(this, null, function* () {\n      let {\n        address: t\n      } = yield this.querier.call({\n        procedureName: \"getAddress\",\n        params: void 0\n      });\n      return t;\n    });\n  }\n\n  signMessage(t) {\n    return i(this, null, function* () {\n      var s, o, n;\n      let {\n        signedMessage: r\n      } = yield this.querier.call({\n        procedureName: \"signMessage\",\n        params: {\n          message: t,\n          chainId: (n = (o = yield (s = this.provider) == null ? void 0 : s.getNetwork()) == null ? void 0 : o.chainId) != null ? n : this.DEFAULT_ETHEREUM_CHAIN_ID\n        }\n      });\n      return r;\n    });\n  }\n\n  signTransaction(t) {\n    return i(this, null, function* () {\n      var s, o, n;\n      let {\n        signedTransaction: r\n      } = yield this.querier.call({\n        procedureName: \"signTransaction\",\n        params: {\n          transaction: t,\n          chainId: (n = (o = yield (s = this.provider) == null ? void 0 : s.getNetwork()) == null ? void 0 : o.chainId) != null ? n : this.DEFAULT_ETHEREUM_CHAIN_ID\n        }\n      });\n      return r;\n    });\n  }\n\n  _signTypedData(t, r, s) {\n    return i(this, null, function* () {\n      var n, p, l;\n      let {\n        signedTypedData: o\n      } = yield this.querier.call({\n        procedureName: \"signTypedDataV4\",\n        params: {\n          domain: t,\n          types: r,\n          message: s,\n          chainId: (l = (p = yield (n = this.provider) == null ? void 0 : n.getNetwork()) == null ? void 0 : p.chainId) != null ? l : this.DEFAULT_ETHEREUM_CHAIN_ID\n        }\n      });\n      return o;\n    });\n  }\n\n  connect(t) {\n    return new h({\n      clientId: this.clientId,\n      provider: t,\n      querier: this.querier\n    });\n  }\n\n};\nvar D = class {\n  constructor(_ref15) {\n    let {\n      clientId: e,\n      chain: t,\n      querier: r\n    } = _ref15;\n    this.clientId = e, this.chain = t, this.walletManagerQuerier = r, this.gasless = new y({\n      chain: t,\n      clientId: e,\n      querier: r\n    }), this.localStorage = new c({\n      clientId: e\n    });\n  }\n\n  postWalletSetUp(o) {\n    return i(this, arguments, function* (_ref16) {\n      let {\n        deviceShareStored: e,\n        walletAddress: t,\n        isIframeStorageEnabled: r,\n        walletUserId: s\n      } = _ref16;\n      return r || (yield this.localStorage.saveDeviceShare(e, s)), {\n        walletAddress: t\n      };\n    });\n  }\n\n  getUserWalletStatus() {\n    return i(this, null, function* () {\n      let e = yield this.walletManagerQuerier.call({\n        procedureName: \"getUserStatus\",\n        params: void 0\n      });\n      return e.status === \"Logged In, Wallet Initialized\" ? {\n        status: \"Logged In, Wallet Initialized\",\n        user: I(u({}, e.user), {\n          wallet: this\n        })\n      } : e;\n    });\n  }\n\n  setChain(t) {\n    return i(this, arguments, function* (_ref17) {\n      let {\n        chain: e\n      } = _ref17;\n      this.chain = e, this.gasless = new y({\n        chain: e,\n        clientId: this.clientId,\n        querier: this.walletManagerQuerier\n      });\n    });\n  }\n\n  getEthersJsSigner(e) {\n    return i(this, null, function* () {\n      var r;\n      return new h({\n        clientId: this.clientId,\n        provider: B((r = e == null ? void 0 : e.rpcEndpoint) != null ? r : J[this.chain]),\n        querier: this.walletManagerQuerier\n      });\n    });\n  }\n\n};\nvar P = class {\n  constructor(_ref18) {\n    let {\n      clientId: e,\n      chain: t,\n      styles: r\n    } = _ref18;\n    this.clientId = e, this.querier = new W({\n      clientId: e,\n      customizationOptions: r\n    }), this.wallet = new D({\n      clientId: e,\n      chain: t,\n      querier: this.querier\n    }), this.auth = new _({\n      clientId: e,\n      querier: this.querier,\n      onAuthSuccess: s => i(this, null, function* () {\n        return yield this.wallet.postWalletSetUp(I(u({}, s.walletDetails), {\n          walletUserId: s.storedToken.authDetails.userWalletId\n        })), {\n          user: {\n            status: \"Logged In, Wallet Initialized\",\n            authDetails: s.storedToken.authDetails,\n            wallet: this.wallet,\n            walletAddress: s.walletDetails.walletAddress\n          }\n        };\n      })\n    });\n  }\n\n  getUser() {\n    return i(this, null, function* () {\n      let e = yield this.wallet.getUserWalletStatus();\n\n      switch (e.status) {\n        case \"Logged In, New Device\":\n        case \"Logged In, Wallet Uninitialized\":\n          return yield this.auth.logout(), this.getUser();\n\n        case \"Logged Out\":\n          return {\n            status: \"Logged Out\"\n          };\n\n        case \"Logged In, Wallet Initialized\":\n          return u({\n            status: \"Logged In, Wallet Initialized\"\n          }, e.user);\n      }\n    });\n  }\n\n};\nexport { E as AUTH_TOKEN_LOCAL_STORAGE_NAME, H as AuthProvider, A as DEVICE_SHARE_LOCAL_STORAGE_NAME, X as DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED, g as EMBEDDED_WALLET_PATH, P as PaperEmbeddedWalletSdk, b as UserStatus, C as UserWalletStatus, T as WALLET_USER_ID_LOCAL_STORAGE_NAME }; //# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module"}