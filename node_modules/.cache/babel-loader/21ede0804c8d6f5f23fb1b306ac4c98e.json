{"ast":null,"code":"import { _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { c_ as ContractWrapper, cS as buildTransactionFunction, e as AbiSchema, ah as ContractMetadata, df as VoteContractSchema, aV as ContractAppURI, ag as ContractEncoder, aN as GasCostEstimator, aO as ContractEvents, aP as ContractInterceptor, cT as resolveAddress, bW as fetchCurrencyValue, bV as fetchCurrencyMetadata, aT as Transaction } from './watchTransactions-8ceed2d4.browser.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, ethers, Contract } from 'ethers';\nimport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport 'cross-fetch';\nimport 'tiny-invariant';\nimport 'ethers/lib/utils.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/generated-abis';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\n\nclass Vote {\n  /**\n   * @internal\n   */\n  get chainId() {\n    return this._chainId;\n  }\n\n  constructor(network, address, storage) {\n    var _this = this;\n\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n\n    _defineProperty(this, \"contractWrapper\", void 0);\n\n    _defineProperty(this, \"storage\", void 0);\n\n    _defineProperty(this, \"abi\", void 0);\n\n    _defineProperty(this, \"metadata\", void 0);\n\n    _defineProperty(this, \"app\", void 0);\n\n    _defineProperty(this, \"encoder\", void 0);\n\n    _defineProperty(this, \"estimator\", void 0);\n\n    _defineProperty(this, \"events\", void 0);\n\n    _defineProperty(this, \"interceptor\", void 0);\n\n    _defineProperty(this, \"_chainId\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n\n    /**\n     * Create Proposal\n     *\n     * @remarks Create a new proposal for token holders to vote on.\n     *\n     * @example\n     * ```javascript\n     * // The description of the proposal you want to pass\n     * const description = \"This is a great proposal - vote for it!\"\n     * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n     * const executions = [\n     *   {\n     *     // The contract you want to make a call to\n     *     toAddress: \"0x...\",\n     *     // The amount of the native currency to send in this transaction\n     *     nativeTokenValue: 0,\n     *     // Transaction data that will be executed when the proposal is executed\n     *     // This is an example transfer transaction with a token contract (which you would need to set up in code)\n     *     transactionData: tokenContract.encoder.encode(\n     *       \"transfer\", [\n     *         fromAddress,\n     *         amount,\n     *       ]\n     *     ),\n     *   }\n     * ]\n     *\n     * const proposal = await contract.propose(description, executions);\n     * ```\n     *\n     * @param description - The description of the proposal.\n     * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n     * @returns - The id of the created proposal and the transaction receipt.\n     */\n\n\n    _defineProperty(this, \"propose\", buildTransactionFunction(async (description, executions) => {\n      if (!executions) {\n        executions = [{\n          toAddress: this.contractWrapper.readContract.address,\n          nativeTokenValue: 0,\n          transactionData: \"0x\"\n        }];\n      }\n\n      const tos = executions.map(p => p.toAddress);\n      const values = executions.map(p => p.nativeTokenValue);\n      const datas = executions.map(p => p.transactionData);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"propose\",\n        args: [tos, values, datas, description],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n          return {\n            id: event[0].args.proposalId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Vote\n     *\n     * @remarks Vote on an active proposal\n     *\n     * @example\n     * ```javascript\n     * // The proposal ID of the proposal you want to vote on\n     * const proposalId = \"0\";\n     * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n     * const voteType = VoteType.For;\n     * // The (optional) reason for the vote\n     * const reason = \"I like this proposal!\";\n     *\n     * await contract.vote(proposalId, voteType, reason);\n     * ```\n     * @param proposalId - The proposal to cast a vote on.\n     * @param voteType - The position the voter is taking on their vote.\n     * @param reason - (optional) The reason for the vote.\n     */\n\n\n    _defineProperty(this, \"vote\", buildTransactionFunction(async function (proposalId, voteType) {\n      let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      await _this.ensureExists(proposalId);\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"castVoteWithReason\",\n        args: [proposalId, voteType, reason]\n      });\n    }));\n    /**\n     * Execute Proposal\n     *\n     * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n     *\n     * @example\n     * ```javascript\n     * // The proposal ID of the proposal you want to execute\n     * const proposalId = \"0\"\n     * await contract.execute(proposalId);\n     * ```\n     *\n     * @param proposalId - The proposal id to execute.\n     */\n\n\n    _defineProperty(this, \"execute\", buildTransactionFunction(async proposalId => {\n      await this.ensureExists(proposalId);\n      const proposal = await this.get(proposalId);\n      const tos = proposal.executions.map(p => p.toAddress);\n      const values = proposal.executions.map(p => p.nativeTokenValue);\n      const datas = proposal.executions.map(p => p.transactionData);\n      const descriptionHash = ethers.utils.id(proposal.description);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"execute\",\n        args: [tos, values, datas, descriptionHash]\n      });\n    }));\n\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n\n\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n\n    return proposals[0];\n  }\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n\n\n  async getAll() {\n    return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async data => ({\n      proposalId: data.proposalId,\n      proposer: data.proposer,\n      description: data.description,\n      startBlock: data.startBlock,\n      endBlock: data.endBlock,\n      state: await this.contractWrapper.readContract.state(data.proposalId),\n      votes: await this.getProposalVotes(data.proposalId),\n      executions: data[3].map((c, i) => ({\n        toAddress: data.targets[i],\n        nativeTokenValue: c,\n        transactionData: data.calldatas[i]\n      }))\n    })));\n  }\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n\n\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.readContract.proposalVotes(proposalId);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n\n\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n\n    return this.contractWrapper.readContract.hasVoted(proposalId, await resolveAddress(account));\n  }\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n\n\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n\n\n  async balance() {\n    const balance = await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: ethers.utils.formatUnits(balance, 18)\n    };\n  }\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n\n\n  async balanceOfToken(tokenAddress) {\n    const erc20 = new Contract(await resolveAddress(tokenAddress), ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.readContract.address));\n  }\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n\n\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.readContract.state(proposalId);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n  /**\n   * Get the Vote contract configuration\n   */\n\n\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.readContract.votingDelay(), this.contractWrapper.readContract.votingPeriod(), this.contractWrapper.readContract.token(), this.contractWrapper.readContract[\"quorumNumerator()\"](), this.contractWrapper.readContract.proposalThreshold()]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n}\n\nexport { Vote };","map":null,"metadata":{},"sourceType":"module"}