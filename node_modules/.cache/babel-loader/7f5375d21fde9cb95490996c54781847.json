{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafeService = void 0;\n\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nclass SafeService {\n  constructor(serviceUrl, network) {\n    this.serviceUrl = serviceUrl;\n    this.network = network !== null && network !== void 0 ? network : axios_1.default;\n  }\n  /**\n   * Estimates a Safe transaction\n   *\n   * @param safe - Address of the Safe for which this transaction should be estimated\n   * @param safeTx - Safe transaction that should be estimated for execution\n   * @returns A big number representing the safeTxGas for the passed Safe transaction\n   */\n\n\n  async estimateSafeTx(safe, safeTx) {\n    const url = `${this.serviceUrl}/api/v1/safes/${safe}/multisig-transactions/estimations/`;\n    const resp = await this.network.post(url, safeTx);\n    return bignumber_1.BigNumber.from(resp.data.safeTxGas);\n  }\n  /**\n   * Load details for a Safe transaction\n   *\n   * @param safeTxHash - Hash of the Safe transaction\n   * @returns A `SafeTxDetails` object that contains the details of a Safe transaction\n   */\n\n\n  async getSafeTxDetails(safeTxHash) {\n    const url = `${this.serviceUrl}/api/v1/multisig-transactions/${safeTxHash}`;\n    const resp = await this.network.get(url);\n    return resp.data;\n  }\n  /**\n   * Propose a new Safe transaction to the service\n   *\n   * @param safeAddress - Address of the Safe for which this transaction should be proposed\n   * @param safeTxHash - Hash of the Safe transaction\n   * @param safeTx - Safe transaction that should be proposed\n   * @param signature - Signature of an owner or a delegate of an owner of the specified Safe to authorize the proposal\n   * @returns The hash of the Safe transaction that has been proposed\n   */\n\n\n  async proposeTx(safeAddress, safeTxHash, safeTx, signature) {\n    const url = `${this.serviceUrl}/api/v1/safes/${safeAddress}/multisig-transactions/`;\n    const data = { ...safeTx.data,\n      contractTransactionHash: safeTxHash,\n      sender: signature.signer,\n      signature: signature.data\n    };\n    const resp = await this.network.post(url, data);\n    return resp.data;\n  }\n\n}\n\nexports.SafeService = SafeService; //# sourceMappingURL=service.js.map","map":null,"metadata":{},"sourceType":"script"}