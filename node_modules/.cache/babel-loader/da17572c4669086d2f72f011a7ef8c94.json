{"ast":null,"code":"import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\nimport EventEmitter from 'eventemitter3';\n\nclass TWConnector extends EventEmitter {}\n\nclass WagmiAdapter extends TWConnector {\n  constructor(wagmiConnector) {\n    super();\n\n    _defineProperty(this, \"wagmiConnector\", void 0);\n\n    this.wagmiConnector = wagmiConnector;\n  }\n\n  async connect(args) {\n    const chainId = args?.chainId;\n    this.setupTWConnectorListeners();\n    const result = await this.wagmiConnector.connect({\n      chainId\n    });\n    return result.account;\n  }\n\n  disconnect() {\n    this.wagmiConnector.removeAllListeners(\"connect\");\n    this.wagmiConnector.removeAllListeners(\"change\");\n    return this.wagmiConnector.disconnect();\n  }\n\n  isConnected() {\n    return this.wagmiConnector.isAuthorized();\n  }\n\n  getAddress() {\n    return this.wagmiConnector.getAccount();\n  }\n\n  getSigner() {\n    return this.wagmiConnector.getSigner();\n  }\n\n  getProvider() {\n    return this.wagmiConnector.getProvider();\n  }\n\n  async switchChain(chainId) {\n    if (!this.wagmiConnector.switchChain) {\n      throw new Error(\"Switch chain not supported\");\n    }\n\n    await this.wagmiConnector.switchChain(chainId);\n  }\n\n  setupTWConnectorListeners() {\n    this.wagmiConnector.addListener(\"connect\", data => {\n      this.emit(\"connect\", data);\n    });\n    this.wagmiConnector.addListener(\"change\", data => {\n      this.emit(\"change\", data);\n    });\n    this.wagmiConnector.addListener(\"disconnect\", () => {\n      this.emit(\"disconnect\");\n    });\n  }\n\n  async setupListeners() {\n    this.setupTWConnectorListeners();\n    await this.wagmiConnector.setupListeners();\n  }\n\n  updateChains(chains) {\n    this.wagmiConnector.updateChains(chains);\n  }\n\n}\n\nexport { TWConnector as T, WagmiAdapter as W };","map":null,"metadata":{},"sourceType":"module"}