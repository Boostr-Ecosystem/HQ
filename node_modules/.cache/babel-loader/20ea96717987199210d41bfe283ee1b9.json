{"ast":null,"code":"import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useMemo } from 'react';\nimport { jsx } from 'react/jsx-runtime';\nimport invariant from 'tiny-invariant';\n\nconst QueryClientProviderWithDefault = _ref => {\n  let {\n    queryClient,\n    children\n  } = _ref;\n  const queryClientWithDefault = useMemo(() => {\n    return queryClient ? queryClient : new QueryClient();\n  }, [queryClient]);\n  return /*#__PURE__*/jsx(QueryClientProvider, {\n    client: queryClientWithDefault,\n    children: children\n  });\n}; // we prefix all our query keys with this to avoid possible collisions with user-defined queries that share the same query client\n\n\nconst TW_QUERY_KEY_PREFIX = \"__tw__\"; // marker to make sure the query will not get stored in local storage by a query persister\n\nconst NEVER_PERSIST_QUERY_POSTFIX = {\n  persist: false\n};\n\nfunction ensureTWPrefix(key) {\n  if (key[0] === TW_QUERY_KEY_PREFIX) {\n    return key;\n  }\n\n  return [TW_QUERY_KEY_PREFIX, ...key];\n}\n\nfunction neverPersist(key) {\n  return [...key, NEVER_PERSIST_QUERY_POSTFIX];\n}\n\nfunction shouldNeverPersistQuery(key) {\n  return key[key.length - 1] === NEVER_PERSIST_QUERY_POSTFIX;\n} // SOL\n\n\nfunction createSOLQueryKey(key) {\n  return ensureTWPrefix([\"sol\", ...key]);\n}\n\nfunction createSOLQueryKeyWithNetwork(key, network) {\n  return createSOLQueryKey([network, ...key]);\n}\n\nfunction createSOLProgramQueryKey(program) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const network = program?.network;\n  const address = program?.publicKey.toBase58();\n  return createSOLQueryKeyWithNetwork([\"program\", address, ...key], network || null);\n}\n/**\n * Makes a parameter required to be passed, but still allows it to be null or undefined.\n *\n * @beta\n */\n\n\nfunction requiredParamInvariant(condition, message) {\n  invariant(condition !== null || condition !== undefined, message);\n}\n\nexport { QueryClientProviderWithDefault as Q, createSOLProgramQueryKey as a, createSOLQueryKeyWithNetwork as c, ensureTWPrefix as e, neverPersist as n, requiredParamInvariant as r, shouldNeverPersistQuery as s };","map":null,"metadata":{},"sourceType":"module"}