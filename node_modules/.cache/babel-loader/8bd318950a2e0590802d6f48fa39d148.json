{"ast":null,"code":"'use strict';\n\nconst {\n  Data: PBData\n} = require('./unixfs');\n\nconst errcode = require('err-code');\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\n\nconst types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nconst dirTypes = ['directory', 'hamt-sharded-directory'];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n/**\n * @param {string | number | undefined} [mode]\n */\n\nfunction parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF;\n  }\n\n  mode = mode.toString();\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF;\n  } // decimal string\n\n\n  return parseInt(mode, 10) & 0xFFF;\n}\n/**\n * @param {any} input\n */\n\n\nfunction parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n  /** @type {Mtime | undefined} */\n\n\n  let mtime; // { secs, nsecs }\n\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  } // UnixFS TimeSpec\n\n\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  } // process.hrtime()\n\n\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  } // Javascript Date\n\n\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n   // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n     mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}\n\nclass Data {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new Data({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    }); // make sure we honour the original mode\n\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options;\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    /** @type {number[]} */\n\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n  /**\n   * @param {number | undefined} mode\n   */\n\n\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n  /**\n   * @returns {number | undefined}\n   */\n\n\n  get mode() {\n    return this._mode;\n  }\n\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n  /**\n   * @param {number} size\n   */\n\n\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n  /**\n   * @param {number} index\n   */\n\n\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n\n\n  fileSize() {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0;\n    }\n\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n\n    if (this.data) {\n      sum += this.data.length;\n    }\n\n    return sum;\n  }\n  /**\n   * encode to protobuf Uint8Array\n   */\n\n\n  marshal() {\n    let type;\n\n    switch (this.type) {\n      case 'raw':\n        type = PBData.DataType.Raw;\n        break;\n\n      case 'directory':\n        type = PBData.DataType.Directory;\n        break;\n\n      case 'file':\n        type = PBData.DataType.File;\n        break;\n\n      case 'metadata':\n        type = PBData.DataType.Metadata;\n        break;\n\n      case 'symlink':\n        type = PBData.DataType.Symlink;\n        break;\n\n      case 'hamt-sharded-directory':\n        type = PBData.DataType.HAMTShard;\n        break;\n\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    let data = this.data;\n\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n\n    let mode;\n\n    if (this.mode != null) {\n      mode = this._originalMode & 0xFFFFF000 | (parseMode(this.mode) || 0);\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n\n    let mtime;\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n\n}\n\nmodule.exports = {\n  UnixFS: Data,\n  parseMode,\n  parseMtime\n};","map":null,"metadata":{},"sourceType":"script"}