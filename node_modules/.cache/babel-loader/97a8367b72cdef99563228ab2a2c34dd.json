{"ast":null,"code":"'use strict';\n\nconst parallelBatch = require('it-parallel-batch');\n\nconst defaultOptions = require('./options');\n/**\n * @typedef {import('./types').BlockAPI} BlockAPI\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {BlockAPI} block\n * @param {UserImporterOptions} options\n */\n\n\nasync function* importer(source, block) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const opts = defaultOptions(options);\n  let dagBuilder;\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = require('./dag-builder');\n  }\n\n  let treeBuilder;\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = require('./tree-builder');\n  }\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n\n\n  let candidates;\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source;\n  } else {\n    // @ts-ignore\n    candidates = [source];\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, block, opts), opts.fileImportConcurrency), block, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}\n\nmodule.exports = {\n  importer\n};","map":null,"metadata":{},"sourceType":"script"}