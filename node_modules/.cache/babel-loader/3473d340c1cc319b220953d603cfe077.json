{"ast":null,"code":"import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\nimport { IJsonRpcConnection } from '@walletconnect/jsonrpc-types';\nimport { formatJsonRpcError } from '@walletconnect/jsonrpc-utils';\nimport WalletConnect from '@walletconnect/legacy-client';\nimport QRCodeModal from '@walletconnect/legacy-modal';\nimport EventEmitter from 'eventemitter3';\nimport { HttpConnection } from '@walletconnect/jsonrpc-http-connection';\nimport { JsonRpcProvider } from '@walletconnect/jsonrpc-provider';\nimport { SIGNING_METHODS } from '@walletconnect/legacy-types';\nimport { getRpcUrl } from '@walletconnect/legacy-utils';\n\nclass SignerConnection extends IJsonRpcConnection {\n  constructor(opts) {\n    super();\n\n    _defineProperty(this, \"events\", new EventEmitter());\n\n    _defineProperty(this, \"accounts\", []);\n\n    _defineProperty(this, \"chainId\", 1);\n\n    _defineProperty(this, \"pending\", false);\n\n    _defineProperty(this, \"wc\", void 0);\n\n    _defineProperty(this, \"bridge\", \"https://bridge.walletconnect.org\");\n\n    _defineProperty(this, \"qrcode\", true);\n\n    _defineProperty(this, \"qrcodeModalOptions\", undefined);\n\n    _defineProperty(this, \"opts\", void 0);\n\n    this.opts = opts;\n    this.chainId = opts?.chainId || this.chainId;\n    this.wc = this.register(opts);\n  }\n\n  get connected() {\n    return typeof this.wc !== \"undefined\" && this.wc.connected;\n  }\n\n  get connecting() {\n    return this.pending;\n  }\n\n  get connector() {\n    this.wc = this.register(this.opts);\n    return this.wc;\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  async open(chainId) {\n    if (this.connected) {\n      this.onOpen();\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      this.on(\"error\", err => {\n        reject(err);\n      });\n      this.on(\"open\", () => {\n        resolve();\n      });\n      this.create(chainId);\n    });\n  }\n\n  async close() {\n    if (typeof this.wc === \"undefined\") {\n      return;\n    }\n\n    if (this.wc.connected) {\n      this.wc.killSession();\n    }\n\n    this.onClose();\n  }\n\n  async send(payload) {\n    this.wc = this.register(this.opts);\n\n    if (!this.connected) {\n      await this.open();\n    }\n\n    this.sendPayload(payload).then(res => this.events.emit(\"payload\", res)).catch(e => this.events.emit(\"payload\", formatJsonRpcError(payload.id, e.message)));\n  }\n\n  async sendAsync(payload) {\n    // noop\n    console.log(\"sendAsync\", payload);\n  } // ---------- Private ----------------------------------------------- //\n\n\n  register(opts) {\n    if (this.wc) {\n      return this.wc;\n    }\n\n    this.opts = opts || this.opts;\n    this.bridge = opts?.connector ? opts.connector.bridge : opts?.bridge || \"https://bridge.walletconnect.org\";\n    this.qrcode = typeof opts?.qrcode === \"undefined\" || opts.qrcode !== false;\n    this.chainId = typeof opts?.chainId !== \"undefined\" ? opts.chainId : this.chainId;\n    this.qrcodeModalOptions = opts?.qrcodeModalOptions;\n    const connectorOpts = {\n      bridge: this.bridge,\n      qrcodeModal: this.qrcode ? QRCodeModal : undefined,\n      qrcodeModalOptions: this.qrcodeModalOptions,\n      storageId: opts?.storageId,\n      signingMethods: opts?.signingMethods,\n      clientMeta: opts?.clientMeta,\n      session: opts?.session\n    };\n    this.wc = typeof opts?.connector !== \"undefined\" ? opts.connector : new WalletConnect(connectorOpts);\n\n    if (typeof this.wc === \"undefined\") {\n      throw new Error(\"Failed to register WalletConnect connector\");\n    }\n\n    if (this.wc.accounts.length) {\n      this.accounts = this.wc.accounts;\n    }\n\n    if (this.wc.chainId) {\n      this.chainId = this.wc.chainId;\n    } // this.accounts = this.wc.accounts;\n    // this.chainId = this.wc.chainId;\n\n\n    this.registerConnectorEvents();\n    return this.wc;\n  }\n\n  onOpen(wc) {\n    this.pending = false;\n\n    if (wc) {\n      this.wc = wc;\n    }\n\n    this.events.emit(\"open\");\n  }\n\n  onClose() {\n    this.pending = false;\n\n    if (this.wc) {\n      this.wc = undefined;\n    }\n\n    this.events.emit(\"close\");\n  }\n\n  onError(payload) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Failed or Rejected Request\";\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -32000;\n    const errorPayload = {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      error: {\n        code,\n        message\n      }\n    };\n    this.events.emit(\"payload\", errorPayload);\n    return errorPayload;\n  }\n\n  create(chainId) {\n    this.wc = this.register(this.opts);\n    this.chainId = chainId || this.chainId;\n\n    if (this.connected || this.pending) {\n      return;\n    }\n\n    this.pending = true;\n    this.registerConnectorEvents();\n    this.wc.createSession({\n      chainId: this.chainId\n    }).then(() => this.events.emit(\"created\")).catch(e => this.events.emit(\"error\", e));\n  }\n\n  registerConnectorEvents() {\n    this.wc = this.register(this.opts);\n    this.wc.on(\"connect\", err => {\n      if (err) {\n        this.events.emit(\"error\", err);\n        return;\n      }\n\n      this.accounts = this.wc?.accounts || [];\n      this.chainId = this.wc?.chainId || this.chainId;\n      this.onOpen();\n    });\n    this.wc.on(\"disconnect\", err => {\n      if (err) {\n        this.events.emit(\"error\", err);\n        return;\n      }\n\n      this.onClose();\n    });\n    this.wc.on(\"modal_closed\", () => {\n      this.events.emit(\"error\", new Error(\"User closed modal\"));\n    });\n    this.wc.on(\"session_update\", (_error, payload) => {\n      const {\n        accounts,\n        chainId\n      } = payload.params[0];\n\n      if (!this.accounts || accounts && this.accounts !== accounts) {\n        this.accounts = accounts;\n        this.events.emit(\"accountsChanged\", accounts);\n      }\n\n      if (!this.chainId || chainId && this.chainId !== chainId) {\n        this.chainId = chainId;\n        this.events.emit(\"chainChanged\", chainId);\n      }\n    });\n  }\n\n  async sendPayload(payload) {\n    this.wc = this.register(this.opts);\n\n    try {\n      const response = await this.wc.unsafeSend(payload);\n      return this.sanitizeResponse(response);\n    } catch (error) {\n      return this.onError(payload, error.message);\n    }\n  }\n\n  sanitizeResponse(response) {\n    return typeof response.error !== \"undefined\" && typeof response.error.code === \"undefined\" ? formatJsonRpcError(response.id, response.error.message) : response;\n  }\n\n}\n\nvar SignerConnection$1 = SignerConnection;\n\nclass WalletConnectProvider {\n  constructor(opts) {\n    _defineProperty(this, \"events\", new EventEmitter());\n\n    _defineProperty(this, \"rpc\", void 0);\n\n    _defineProperty(this, \"signer\", void 0);\n\n    _defineProperty(this, \"http\", void 0);\n\n    this.rpc = {\n      infuraId: opts?.infuraId,\n      custom: opts?.rpc\n    };\n    this.signer = new JsonRpcProvider(new SignerConnection$1(opts));\n    const chainId = this.signer.connection.chainId || opts?.chainId || 1;\n    this.http = this.setHttpProvider(chainId);\n    this.registerEventListeners();\n  }\n\n  get connected() {\n    return this.signer.connection.connected;\n  }\n\n  get connector() {\n    return this.signer.connection.connector;\n  }\n\n  get accounts() {\n    return this.signer.connection.accounts;\n  }\n\n  get chainId() {\n    return this.signer.connection.chainId;\n  }\n\n  get rpcUrl() {\n    return (this.http?.connection).url || \"\";\n  }\n\n  async request(args) {\n    switch (args.method) {\n      case \"eth_requestAccounts\":\n        await this.connect();\n        return this.signer.connection.accounts;\n\n      case \"eth_accounts\":\n        return this.signer.connection.accounts;\n\n      case \"eth_chainId\":\n        return this.signer.connection.chainId;\n    }\n\n    if (SIGNING_METHODS.includes(args.method)) {\n      return this.signer.request(args);\n    }\n\n    if (typeof this.http === \"undefined\") {\n      throw new Error(`Cannot request JSON-RPC method (${args.method}) without provided rpc url`);\n    }\n\n    return this.http.request(args);\n  }\n\n  async enable() {\n    const accounts = await this.request({\n      method: \"eth_requestAccounts\"\n    });\n    return accounts;\n  }\n\n  async connect() {\n    if (!this.signer.connection.connected) {\n      await this.signer.connect();\n    }\n  }\n\n  async disconnect() {\n    if (this.signer.connection.connected) {\n      await this.signer.disconnect();\n    }\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  } // ---------- Private ----------------------------------------------- //\n\n\n  registerEventListeners() {\n    this.signer.connection.on(\"accountsChanged\", accounts => {\n      this.events.emit(\"accountsChanged\", accounts);\n    });\n    this.signer.connection.on(\"chainChanged\", chainId => {\n      this.http = this.setHttpProvider(chainId);\n      this.events.emit(\"chainChanged\", chainId);\n    });\n    this.connector.on(\"display_uri\", (error, payload) => {\n      this.events.emit(\"display_uri\", error, payload);\n    });\n    this.connector.on(\"call_request_sent\", (error, payload) => {\n      this.events.emit(\"call_request_sent\", error, payload);\n    });\n    this.signer.on(\"disconnect\", () => {\n      this.events.emit(\"disconnect\");\n    });\n  }\n\n  setHttpProvider(chainId) {\n    const rpcUrl = getRpcUrl(chainId, this.rpc);\n\n    if (typeof rpcUrl === \"undefined\") {\n      return undefined;\n    }\n\n    const http = new JsonRpcProvider(new HttpConnection(rpcUrl));\n    return http;\n  }\n\n}\n\nexport { WalletConnectProvider as default };","map":null,"metadata":{},"sourceType":"module"}