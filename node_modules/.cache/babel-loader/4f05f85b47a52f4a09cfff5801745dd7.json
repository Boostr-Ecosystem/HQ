{"ast":null,"code":"import React, { useState, useCallback, useEffect, useMemo, useContext, createContext, useRef, Suspense, lazy } from 'react';\nimport { jsxs, jsx, Fragment } from 'react/jsx-runtime';\nimport { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\nimport { resolveIpfsUri, useWallet, useSupportedChains, useSwitchChain, useChainId, useDisconnect, useAddress, useBalance, useThirdwebWallet, ThirdwebThemeContext, useConnectionStatus, useThirdwebAuthContext, useUser, useLogin, useLogout, resolveMimeType, useSDKChainId, useNetworkMismatch, useContract, useCreateWalletInstance, useConnect, useActiveChain, useWallets, ThirdwebProviderCore } from '@thirdweb-dev/react-core';\nimport { keyframes, useTheme, ThemeProvider } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport * as RXPopover from '@radix-ui/react-popover';\nimport copy from 'copy-to-clipboard';\nimport * as RadixTooltip from '@radix-ui/react-tooltip';\nimport { CheckIcon, CopyIcon as CopyIcon$1, Cross2Icon, MagnifyingGlassIcon, ChevronRightIcon, ChevronLeftIcon, ChevronDownIcon, ExclamationTriangleIcon } from '@radix-ui/react-icons';\nimport { utils } from 'ethers';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport { defaultChains } from '@thirdweb-dev/chains';\nimport invariant from 'tiny-invariant';\nimport { mauveDark, tomato, green, blue, mauve } from '@radix-ui/colors';\nimport * as Dialog from '@radix-ui/react-dialog';\nimport { Title } from '@radix-ui/react-dialog';\nimport { detect } from 'detect-browser';\nimport { CoinbaseWallet, MetaMaskWallet, WalletConnectV1, assertWindowEthereum, SafeSupportedChainsSet } from '@thirdweb-dev/wallets';\nimport ReactQrCode from 'react-qr-code';\n\nconst coinbaseWallet = () => {\n  return {\n    id: CoinbaseWallet.id,\n    meta: CoinbaseWallet.meta,\n    create: options => new CoinbaseWallet({ ...options,\n      headlessMode: true\n    })\n  };\n};\n\nvar coinbaseWallet$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  coinbaseWallet: coinbaseWallet\n});\n\nconst metamaskWallet = () => {\n  return {\n    id: MetaMaskWallet.id,\n    meta: MetaMaskWallet.meta,\n    create: options => new MetaMaskWallet({ ...options,\n      qrcode: false\n    })\n  };\n};\n\nvar metamaskWallet$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  metamaskWallet: metamaskWallet\n});\n\nconst walletConnectV1 = () => {\n  return {\n    id: WalletConnectV1.id,\n    meta: WalletConnectV1.meta,\n    create: options => new WalletConnectV1({ ...options,\n      qrcode: true\n    })\n  };\n};\n\nvar walletConnectV1$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  walletConnectV1: walletConnectV1\n});\nconst darkTheme = {\n  overlay: {\n    subdued: \"rgba(0, 0, 0, 0.74)\"\n  },\n  bg: {\n    base: mauveDark.mauve1,\n    baseHover: mauveDark.mauve2,\n    elevated: mauveDark.mauve3,\n    elevatedHover: mauveDark.mauve4,\n    highlighted: mauveDark.mauve5,\n    inverted: mauveDark.mauve12,\n    invertedFocused: mauveDark.mauve7,\n    danger: tomato.tomato12\n  },\n  border: {\n    base: mauveDark.mauve3,\n    elevated: mauveDark.mauve4\n  },\n  badge: {\n    secondary: mauveDark.mauve6\n  },\n  text: {\n    neutral: mauveDark.mauve12,\n    inverted: mauveDark.mauve1,\n    secondary: mauveDark.mauve9,\n    danger: tomato.tomato9\n  },\n  icon: {\n    secondary: mauveDark.mauve11,\n    primary: mauveDark.mauve12,\n    inverted: mauveDark.mauve1,\n    danger: tomato.tomato9,\n    success: green.green7,\n    link: blue.blue9\n  },\n  link: {\n    primary: blue.blue9,\n    primaryHover: mauveDark.mauve12\n  },\n  input: {\n    bg: mauveDark.mauve3,\n    bgHover: mauveDark.mauve5,\n    outline: mauveDark.mauve5,\n    focusRing: blue.blue9,\n    errorRing: tomato.tomato9\n  },\n  tooltip: {\n    bg: \"black\",\n    text: \"white\"\n  }\n};\nconst lightTheme = {\n  overlay: {\n    subdued: \"rgba(0, 0, 0, 0.4)\"\n  },\n  bg: {\n    base: mauve.mauve1,\n    baseHover: mauve.mauve2,\n    elevated: mauve.mauve3,\n    elevatedHover: mauve.mauve4,\n    highlighted: mauve.mauve5,\n    inverted: mauve.mauve12,\n    invertedFocused: mauve.mauve7,\n    danger: tomato.tomato4\n  },\n  border: {\n    base: mauve.mauve6,\n    elevated: mauve.mauve7\n  },\n  badge: {\n    secondary: mauve.mauve1\n  },\n  text: {\n    neutral: mauve.mauve12,\n    inverted: mauve.mauve1,\n    secondary: mauve.mauve10,\n    danger: tomato.tomato9\n  },\n  icon: {\n    secondary: mauve.mauve10,\n    primary: mauve.mauve12,\n    inverted: mauve.mauve1,\n    danger: tomato.tomato9,\n    success: green.green9,\n    link: blue.blue11\n  },\n  link: {\n    primary: blue.blue11,\n    primaryHover: mauve.mauve12\n  },\n  input: {\n    bg: mauve.mauve3,\n    bgHover: mauveDark.mauve5,\n    outline: mauve.mauve7,\n    focusRing: blue.blue11,\n    errorRing: tomato.tomato10\n  },\n  tooltip: {\n    bg: \"black\",\n    text: \"white\"\n  }\n};\nconst fontSize = {\n  xs: \"12px\",\n  sm: \"14px\",\n  md: \"16px\",\n  lg: \"20px\",\n  xl: \"24px\"\n};\nconst spacing = {\n  xxs: \"6px\",\n  xs: \"8px\",\n  sm: \"12px\",\n  md: \"16px\",\n  lg: \"24px\",\n  xl: \"32px\",\n  xxl: \"48px\"\n};\nconst radius = {\n  sm: \"6px\",\n  md: \"8px\",\n  lg: \"12px\",\n  xl: \"20px\",\n  xxl: \"32px\"\n};\nconst iconSize = {\n  xs: \"12\",\n  sm: \"16\",\n  md: \"24\",\n  lg: \"32\",\n  xl: \"48\"\n}; // desktop first style media query\n\nconst media = {\n  mobile: `@media (max-width: 640px)`\n};\nconst shadow = {\n  sm: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n  md: \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\",\n  lg: \"0 10px 15px -3px rgb(0 0 0 / 0.07), 0 4px 6px -4px rgb(0 0 0 / 0.1)\",\n  xl: \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\"\n};\nconst defaultChainIcon = resolveIpfsUri(\"ipfs://QmcxZHpyJa8T4i63xqjPYrZ6tKrt55tZJpbXcjSDKuKaf9/ethereum/512.png\");\n\nconst ChainIcon = props => {\n  const url = props.chain?.icon?.url;\n  const src = url ? resolveIpfsUri(url) : defaultChainIcon;\n  return /*#__PURE__*/jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      display: \"flex\",\n      flexShrink: 0,\n      alignItems: \"center\"\n    },\n    children: [/*#__PURE__*/jsx(\"img\", {\n      src: src || defaultChainIcon,\n      onError: e => {\n        if (defaultChainIcon && e.currentTarget.src !== defaultChainIcon) {\n          e.currentTarget.src = defaultChainIcon;\n        }\n      },\n      alt: \"\",\n      width: props.size,\n      height: props.size\n    }), props.active && /*#__PURE__*/jsx(ActiveDot, {})]\n  });\n};\n\nconst ActiveDot = styled.div`\n  width: 28%;\n  height: 28%;\n  border-radius: 50%;\n  position: absolute;\n  top: 60%;\n  right: 0px;\n  background-color: #00d395;\n  box-shadow: 0 0 0 2px ${p => p.theme.bg.elevated};\n`; // extracted from chakra-ui\n\n/**\n * React hook to copy content to clipboard\n *\n */\n\nfunction useClipboard(text) {\n  let optionsOrTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const [hasCopied, setHasCopied] = useState(false);\n  const {\n    timeout = 1500,\n    ...copyOptions\n  } = typeof optionsOrTimeout === \"number\" ? {\n    timeout: optionsOrTimeout\n  } : optionsOrTimeout;\n  const onCopy = useCallback(() => {\n    const didCopy = copy(text, copyOptions);\n    setHasCopied(didCopy);\n  }, [text, copyOptions]);\n  useEffect(() => {\n    let timeoutId = null;\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: text,\n    onCopy,\n    hasCopied\n  };\n}\n\nconst ToolTip = props => {\n  return /*#__PURE__*/jsx(RadixTooltip.Provider, {\n    delayDuration: 200,\n    children: /*#__PURE__*/jsxs(RadixTooltip.Root, {\n      children: [/*#__PURE__*/jsx(RadixTooltip.Trigger, {\n        asChild: true,\n        children: props.children\n      }), /*#__PURE__*/jsx(RadixTooltip.Portal, {\n        children: /*#__PURE__*/jsxs(TooltipContent, {\n          sideOffset: props.sideOffset || 6,\n          align: props.align,\n          side: props.side,\n          children: [props.tip, /*#__PURE__*/jsx(TooltipArrow, {})]\n        })\n      })]\n    })\n  });\n};\n\nconst slideUpAndFade$1 = keyframes`\nfrom {\n  opacity: 0;\n  transform: translateY(2px);\n}\nto {\n  opacity: 1;\n  transform: translateY(0);\n}\n`;\nconst TooltipContent = styled(RadixTooltip.Content)`\n  background: ${p => p.theme.tooltip.bg};\n  color: ${p => p.theme.tooltip.text};\n  border-radius: ${radius.sm};\n  line-height: 1;\n  padding: ${spacing.sm} ${spacing.md};\n  font-size: ${fontSize.sm};\n  box-shadow: ${shadow.sm};\n  user-select: none;\n  will-change: transform, opacity;\n  animation: ${slideUpAndFade$1} 200ms cubic-bezier(0.16, 1, 0.3, 1);\n  z-index: 999999999999999;\n`;\nconst TooltipArrow = styled(RadixTooltip.Arrow)`\n  fill: ${p => p.theme.tooltip.bg};\n`;\n\nconst CopyIcon = props => {\n  const {\n    hasCopied,\n    onCopy\n  } = useClipboard(props.text);\n  return /*#__PURE__*/jsx(\"div\", {\n    onClick: onCopy,\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: /*#__PURE__*/jsx(ToolTip, {\n      tip: props.tip,\n      side: props.side,\n      align: props.align,\n      children: hasCopied ? /*#__PURE__*/jsx(CheckIconStyled, {}) : /*#__PURE__*/jsx(CopyIcon$1, {})\n    })\n  });\n};\n\nconst CheckIconStyled = styled(CheckIcon)`\n  color: ${p => p.theme.icon.success};\n`;\n\nconst Img = props => {\n  return /*#__PURE__*/jsx(\"img\", {\n    width: props.width,\n    height: props.height,\n    src: resolveIpfsUri(props.src),\n    alt: props.alt || \"\",\n    loading: props.loading,\n    decoding: \"async\",\n    style: {\n      height: props.height + \"px\",\n      width: props.width + \"px\"\n    }\n  });\n};\n\nconst scrollbar = _ref => {\n  let {\n    track,\n    thumb,\n    hover\n  } = _ref;\n  return `\n&::-webkit-scrollbar {\n  width: 6px;\n}\n\n&::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px ${track};\n  border-radius: ${radius.md};\n}\n\n&::-webkit-scrollbar-thumb {\n  background: ${thumb};\n  border-radius: ${radius.md};\n}\n\n&::-webkit-scrollbar-thumb:hover {\n  background: ${hover};\n}`;\n};\n\nconst overlayEnter = keyframes`\n from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\nconst Overlay = styled.div`\n  background-color: ${p => p.theme.overlay.subdued};\n  z-index: 9999;\n  position: fixed;\n  inset: 0;\n  animation: ${overlayEnter} 400ms cubic-bezier(0.16, 1, 0.3, 1);\n`; // for rendering a conventional button\n\nconst Button = styled.button`\n  all: unset;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: ${radius.md};\n  padding: ${spacing.sm} ${spacing.sm};\n  font-size: ${fontSize.md};\n  font-weight: 500;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: transparent;\n  line-height: 1;\n  flex-shrink: 0;\n\n  &:focus {\n    box-shadow: 0 0 0 3px\n      ${p => {\n  switch (p.variant) {\n    case \"inverted\":\n      return p.theme.bg.invertedFocused;\n\n    case \"secondary\":\n      return p.theme.bg.highlighted;\n  }\n}};\n  }\n\n  background: ${p => {\n  switch (p.variant) {\n    case \"inverted\":\n      return p.theme.bg.inverted;\n\n    case \"secondary\":\n      return p.theme.bg.elevated;\n  }\n}};\n  color: ${p => {\n  switch (p.variant) {\n    case \"inverted\":\n      return p.theme.text.inverted;\n\n    case \"secondary\":\n      return p.theme.text.neutral;\n  }\n}};\n  cursor: pointer;\n  box-shadow: ${shadow.sm};\n\n  /* pressed effect */\n  &:active {\n    transform: translateY(1px);\n  }\n\n  &[disabled] {\n    cursor: not-allowed;\n  }\n`; // for rendering a button with an icon\n\nconst IconButton = styled.button`\n  all: unset;\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: ${radius.sm};\n  -webkit-tap-highlight-color: transparent;\n  color: ${p => {\n  switch (p.variant) {\n    case \"neutral\":\n      return p.theme.text.neutral;\n\n    case \"secondary\":\n      return p.theme.text.secondary;\n  }\n}};\n  padding: 2px;\n  transition: background 0.2s ease, color 0.2s ease;\n  &:hover {\n    background: ${p => p.theme.bg.elevated};\n    color: ${p => p.theme.text.neutral};\n  }\n`; // for rendering a button next to input\n\nstyled.button`\n  all: unset;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: ${radius.sm};\n  padding: ${spacing.sm};\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent;\n  color: ${p => p.theme.text.secondary};\n  &:hover {\n    color: ${p => p.theme.text.neutral};\n  }\n`;\n\nconst Modal = props => {\n  return /*#__PURE__*/jsxs(Dialog.Root, {\n    open: props.open,\n    onOpenChange: props.setOpen,\n    children: [props.trigger && /*#__PURE__*/jsx(Dialog.Trigger, {\n      asChild: true,\n      children: props.trigger\n    }), /*#__PURE__*/jsxs(Dialog.Portal, {\n      children: [/*#__PURE__*/jsx(Dialog.Overlay, {\n        asChild: true,\n        children: /*#__PURE__*/jsx(Overlay, {})\n      }), /*#__PURE__*/jsx(Dialog.Content, {\n        asChild: true,\n        children: /*#__PURE__*/jsxs(DialogContent, {\n          style: props.style,\n          children: [props.title && /*#__PURE__*/jsxs(DialogTitle, {\n            children: [\" \", props.title]\n          }), props.children, !props.hideCloseIcon && /*#__PURE__*/jsx(CrossContainer, {\n            children: /*#__PURE__*/jsx(Dialog.Close, {\n              asChild: true,\n              children: /*#__PURE__*/jsx(IconButton, {\n                variant: \"secondary\",\n                type: \"button\",\n                \"aria-label\": \"Close\",\n                children: /*#__PURE__*/jsx(Cross2Icon, {\n                  style: {\n                    width: iconSize.md,\n                    height: iconSize.md,\n                    color: \"inherit\"\n                  }\n                })\n              })\n            })\n          })]\n        })\n      })]\n    })]\n  });\n};\n\nconst CrossContainer = styled.div`\n  position: absolute;\n  top: ${spacing.lg};\n  right: ${spacing.lg};\n\n  ${media.mobile} {\n    right: ${spacing.md};\n  }\n`;\nconst modalAnimationDesktop = keyframes`\n  from {\n    opacity: 0;\n    transform: translate(-50%, -48%) scale(0.96);\n  }\n  to {\n    opacity: 1;\n    transform: translate(-50%, -50%) scale(1);\n  }\n`;\nconst modalAnimationMobile = keyframes`\n  from {\n    opacity: 0;\n    transform: translate(0, 50%);\n  }\n  to {\n    opacity: 1;\n    transform: translate(0, 0);\n  }\n`;\nconst DialogContent = styled.div`\n  z-index: 10000;\n  background-color: ${p => p.theme.bg.base};\n  border-radius: ${radius.xl};\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: calc(100vw - 40px);\n  box-sizing: border-box;\n  overflow-y: auto;\n  padding: ${spacing.lg};\n  padding-bottom: ${spacing.xl};\n  animation: ${modalAnimationDesktop} 200ms ease;\n  box-shadow: ${shadow.lg};\n  line-height: 1;\n\n  &:focus {\n    outline: none;\n  }\n\n  ${p => scrollbar({\n  track: \"transparent\",\n  thumb: p.theme.bg.elevated,\n  hover: p.theme.bg.highlighted\n})}\n\n  /* open from bottom on mobile */\n  ${media.mobile} {\n    top: auto;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    max-width: 100vw;\n    transform: none;\n    width: 100vw;\n    animation: ${modalAnimationMobile} 0.35s cubic-bezier(0.15, 1.15, 0.6, 1);\n    border-radius: ${radius.xxl};\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n  & *::selection {\n    background-color: ${p => p.theme.bg.inverted};\n    color: ${p => p.theme.text.inverted};\n  }\n`;\nconst DialogTitle = styled(Dialog.Title)`\n  margin: 0;\n  font-weight: 500;\n  color: ${p => p.theme.text.neutral};\n  font-size: ${fontSize.lg};\n`;\n\nconst Skeleton = props => {\n  return /*#__PURE__*/jsx(SkeletonDiv, {\n    style: {\n      height: props.height,\n      width: props.width || \"auto\"\n    }\n  });\n};\n\nconst skeletonAnimation = keyframes`\n0% {\n    background-color: var(--skeleton-c-1);\n  }\n  100% {\n    background-color: var(--skeleton-c-2);\n  }\n`;\nconst SkeletonDiv = styled.div`\n  background-size: 200% 200%;\n  --skeleton-c-1: ${p => p.theme.bg.elevated};\n  --skeleton-c-2: ${p => p.theme.bg.highlighted};\n  animation: ${skeletonAnimation} 500ms ease-in-out infinite alternate;\n  border-radius: ${radius.sm};\n`;\n\nconst Spacer = _ref => {\n  let {\n    y\n  } = _ref;\n  return /*#__PURE__*/jsx(\"div\", {\n    style: {\n      height: spacing[y]\n    }\n  });\n};\n\nfunction shortenString(str, extraShort) {\n  return `${str.substring(0, extraShort ? 4 : 6)}...${str.substring(str.length - (extraShort ? 3 : 4))}`;\n}\n\nfunction shortenAddress(address, extraShort) {\n  try {\n    const formattedAddress = utils.getAddress(address);\n    return shortenString(formattedAddress, extraShort);\n  } catch {\n    return address;\n  }\n}\n\nfunction detectEnv(userAgent) {\n  return detect(userAgent);\n}\n/**\n * @internal\n */\n\n\nfunction isAndroid() {\n  const os = detectOS();\n  return os ? os.toLowerCase().includes(\"android\") : false;\n}\n/**\n * @internal\n */\n\n\nfunction isIOS() {\n  const os = detectOS();\n  return os ? os.toLowerCase().includes(\"ios\") || os.toLowerCase().includes(\"mac\") && navigator.maxTouchPoints > 1 : false;\n}\n/**\n * @internal\n */\n\n\nfunction detectOS() {\n  const env = detectEnv();\n  return env?.os ? env.os : undefined;\n}\n/**\n * @internal\n */\n\n\nfunction isMobile() {\n  const os = detectOS();\n  return os ? isAndroid() || isIOS() : false;\n}\n\nconst Spinner = props => {\n  const theme = useTheme();\n  return /*#__PURE__*/jsx(Svg, {\n    style: {\n      width: iconSize[props.size],\n      height: iconSize[props.size]\n    },\n    viewBox: \"0 0 50 50\",\n    children: /*#__PURE__*/jsx(Circle$1, {\n      cx: \"25\",\n      cy: \"25\",\n      r: \"20\",\n      fill: \"none\",\n      stroke: theme.icon[props.color || \"primary\"],\n      strokeWidth: \"4\"\n    })\n  });\n}; // animations\n\n\nconst dashAnimation = keyframes`\n 0% {\n    stroke-dasharray: 1, 150;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 90, 150;\n    stroke-dashoffset: -35;\n  }\n  100% {\n    stroke-dasharray: 90, 150;\n    stroke-dashoffset: -124;\n  }\n`;\nconst rotateAnimation = keyframes`\n100% {\n    transform: rotate(360deg);\n  }\n`; // styles\n\nconst Svg = styled.svg`\n  animation: ${rotateAnimation} 2s linear infinite;\n  width: 1em;\n  height: 1em;\n`;\nconst Circle$1 = styled.circle`\n  stroke-linecap: round;\n  animation: ${dashAnimation} 1.5s ease-in-out infinite;\n`;\nconst Label = styled.label`\n  font-size: ${fontSize.sm};\n  color: ${p => p.theme.text.neutral};\n  display: block;\n`;\nconst Input = styled.input`\n  font-size: ${fontSize.md};\n  display: block;\n  padding: ${spacing.sm};\n  box-sizing: border-box;\n  width: 100%;\n  outline: none;\n  border: none;\n  border-radius: 6px;\n  color: ${p => p.theme.text.neutral};\n  background: ${p => {\n  switch (p.variant) {\n    case \"secondary\":\n      return p.theme.bg.elevated;\n\n    default:\n      return \"transparent\";\n  }\n}};\n\n  &::placeholder {\n    color: ${p => p.theme.text.secondary};\n  }\n\n  box-shadow: 0 0 0 1.5px\n    ${p => {\n  switch (p.variant) {\n    case \"outline\":\n      return p.theme.input.outline;\n\n    case \"transparent\":\n      return \"transparent\";\n\n    case \"secondary\":\n      return p.theme.bg.elevated;\n  }\n}};\n\n  /* when browser auto-fills the input  */\n  &:-webkit-autofill {\n    -webkit-text-fill-color: ${p => p.theme.text.neutral};\n    -webkit-box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset;\n    box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset;\n    /* transition: background-color 5000s ease-in-out 0s; */\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 2px ${p => p.theme.input.focusRing};\n  }\n\n  /* show overflow ellipsis for long text - but not if it's a type=\"password\"  */\n  &:not([type=\"password\"]) {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  &[data-error=\"true\"] {\n    box-shadow: 0 0 0 2px ${p => p.theme.input.errorRing};\n  }\n`; // for rendering a input and a button side by side\n\nstyled.div`\n  display: flex;\n  border-radius: ${radius.sm};\n  box-shadow: 0 0 0px 1.5px ${p => p.theme.input.outline};\n\n  /* show focus ring on container instead of input  */\n  &:focus-within {\n    box-shadow: 0 0 0px 2px ${p => p.theme.input.focusRing};\n  }\n\n  input:focus {\n    box-shadow: none;\n  }\n\n  /* show error ring on container instead of input  */\n  &[data-error=\"true\"] {\n    box-shadow: 0 0 0px 2px ${p => p.theme.input.errorRing};\n  }\n`;\nconst ErrorMessage$1 = styled.p`\n  all: unset;\n  font-size: ${fontSize.xs};\n  display: block;\n  color: ${p => p.theme.input.errorRing};\n`;\n\nfunction useInstalledWallets() {\n  let isMetamaskInstalled = false;\n  let isCoinbaseWalletInstalled = false;\n\n  if (assertWindowEthereum(globalThis.window)) {\n    isMetamaskInstalled = globalThis.window.ethereum?.isMetaMask;\n    isCoinbaseWalletInstalled = globalThis.window.ethereum?.isCoinbaseWallet || globalThis.window.ethereum?.providers?.some(p => p.isCoinbaseWallet) || false;\n  }\n\n  const installedWallets = {\n    metamask: !!isMetamaskInstalled,\n    coinbaseWallet: !!isCoinbaseWalletInstalled\n  };\n  return installedWallets;\n}\n/**\n *\n * @returns `true` if the wallet app is on a different device and user has connected via a QR code\n */\n\n\nfunction useIsNonLocalWallet() {\n  const activeWallet = useWallet();\n  const installedWallets = useInstalledWallets();\n  return activeWallet && (activeWallet.walletId === \"walletConnectV1\" || activeWallet.walletId === \"walletConnectV2\" || activeWallet.walletId === \"metamask\" && !installedWallets.metamask || activeWallet.walletId === \"coinbaseWallet\" && !installedWallets.coinbaseWallet);\n}\n\nconst NetworkSelector = props => {\n  const chains = useSupportedChains();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const {\n    testnets,\n    mainnets,\n    all\n  } = useMemo(() => {\n    const searchTermLower = searchTerm.toLowerCase();\n    const info = {\n      testnets: [],\n      mainnets: [],\n      all: []\n    };\n\n    for (const chain of chains) {\n      if (chain.name.toLowerCase().includes(searchTermLower)) {\n        if (chain.testnet) {\n          info.testnets.push(chain);\n        } else {\n          info.mainnets.push(chain);\n        }\n\n        info.all.push(chain);\n      }\n    }\n\n    return info;\n  }, [chains, searchTerm]);\n\n  const closeModal = () => {\n    props.setOpen(false);\n  };\n\n  return /*#__PURE__*/jsxs(Modal, {\n    open: props.open,\n    setOpen: props.setOpen,\n    title: \"Select Network\",\n    style: {\n      maxWidth: \"480px\",\n      paddingBottom: \"0px\"\n    },\n    children: [/*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsxs(Tabs.Root, {\n      className: \"TabsRoot\",\n      defaultValue: \"all\",\n      children: [/*#__PURE__*/jsxs(Tabs.List, {\n        className: \"TabsList\",\n        \"aria-label\": \"Manage your account\",\n        style: {\n          display: \"flex\",\n          gap: spacing.xxs\n        },\n        children: [/*#__PURE__*/jsx(TabButton, {\n          className: \"TabsTrigger\",\n          value: \"all\",\n          children: \"All\"\n        }), /*#__PURE__*/jsx(TabButton, {\n          className: \"TabsTrigger\",\n          value: \"mainnet\",\n          children: \"Mainnets\"\n        }), /*#__PURE__*/jsx(TabButton, {\n          className: \"TabsTrigger\",\n          value: \"testnet\",\n          children: \"Testnets\"\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"lg\"\n      }), /*#__PURE__*/jsxs(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/jsx(StyledMagnifyingGlassIcon, {\n          width: iconSize.md,\n          height: iconSize.md\n        }), /*#__PURE__*/jsx(SearchInput, {\n          style: {\n            boxShadow: \"none\"\n          },\n          variant: \"secondary\",\n          placeholder: \"Search Networks\",\n          value: searchTerm,\n          onChange: e => {\n            setSearchTerm(e.target.value);\n          }\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"lg\"\n      }), /*#__PURE__*/jsx(Tabs.Content, {\n        className: \"TabsContent\",\n        value: \"all\",\n        children: /*#__PURE__*/jsx(NetworkList, {\n          chains: all,\n          closeModal: closeModal\n        })\n      }), /*#__PURE__*/jsx(Tabs.Content, {\n        className: \"TabsContent\",\n        value: \"mainnet\",\n        children: /*#__PURE__*/jsx(NetworkList, {\n          chains: mainnets,\n          closeModal: closeModal\n        })\n      }), /*#__PURE__*/jsx(Tabs.Content, {\n        className: \"TabsContent\",\n        value: \"testnet\",\n        children: /*#__PURE__*/jsx(NetworkList, {\n          chains: testnets,\n          closeModal: closeModal\n        })\n      })]\n    })]\n  });\n};\n\nconst NetworkList = props => {\n  const switchChain = useSwitchChain();\n  const activeChainId = useChainId();\n  const [confirmingChainId, setConfirmingChainId] = useState(-1);\n  const [errorSwitchingChainId, setErrorSwitchingChainId] = useState(-1);\n  const requiresConfirmation = useIsNonLocalWallet();\n  return /*#__PURE__*/jsx(NetworkListUl, {\n    children: props.chains.map(chain => {\n      const confirming = confirmingChainId === chain.chainId;\n      const switchingFailed = errorSwitchingChainId === chain.chainId;\n      const chainName = /*#__PURE__*/jsxs(\"span\", {\n        children: [chain.name, \" \"]\n      });\n      return /*#__PURE__*/jsx(\"li\", {\n        children: /*#__PURE__*/jsxs(NetworkButton, {\n          \"data-active\": activeChainId === chain.chainId,\n          onClick: async () => {\n            setErrorSwitchingChainId(-1);\n\n            if (requiresConfirmation) {\n              setConfirmingChainId(chain.chainId);\n            }\n\n            try {\n              await switchChain(chain.chainId);\n              props.closeModal();\n            } catch (e) {\n              setErrorSwitchingChainId(chain.chainId);\n              console.error(e);\n            } finally {\n              if (requiresConfirmation) {\n                setConfirmingChainId(-1);\n              }\n            }\n          },\n          children: [/*#__PURE__*/jsx(ChainIcon, {\n            chain: chain,\n            size: iconSize.lg,\n            active: activeChainId === chain.chainId\n          }), confirming || switchingFailed ? /*#__PURE__*/jsxs(\"div\", {\n            style: {\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: spacing.xs\n            },\n            children: [chainName, /*#__PURE__*/jsxs(\"div\", {\n              style: {\n                display: \"flex\",\n                gap: spacing.xs\n              },\n              children: [confirming && /*#__PURE__*/jsxs(Fragment, {\n                children: [/*#__PURE__*/jsx(ConfirmMessage$1, {\n                  children: \"Confirm in Wallet\"\n                }), /*#__PURE__*/jsx(Spinner, {\n                  size: \"sm\",\n                  color: \"link\"\n                })]\n              }), switchingFailed && /*#__PURE__*/jsx(ErrorMessage, {\n                children: \"Error: Could not Switch Network\"\n              })]\n            })]\n          }) : chainName]\n        })\n      }, chain.chainId);\n    })\n  });\n};\n\nconst TabButton = styled(Tabs.Trigger)`\n  all: unset;\n  font-size: ${fontSize.md};\n  font-weight: 500;\n  color: ${p => p.theme.text.secondary};\n  cursor: pointer;\n  padding: ${spacing.sm} ${spacing.md};\n  -webkit-tap-highlight-color: transparent;\n  border-radius: ${radius.lg};\n  transition: background 0.2s ease, color 0.2s ease;\n  &[data-state=\"active\"] {\n    background: ${p => p.theme.bg.elevated};\n    color: ${p => p.theme.text.neutral};\n  }\n`;\nconst NetworkListUl = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: ${spacing.xs};\n  max-height: 340px;\n  min-height: 200px;\n  overflow: auto;\n  padding-right: 10px;\n  padding-bottom: ${spacing.lg};\n  width: calc(100% + 16px);\n  box-sizing: border-box;\n  -webkit-mask-image: linear-gradient(to bottom, black 90%, transparent 100%);\n  mask-image: linear-gradient(to bottom, black 90%, transparent 100%);\n  ${p => scrollbar({\n  track: \"transparent\",\n  thumb: p.theme.bg.elevated,\n  hover: p.theme.bg.highlighted\n})}\n`;\nconst NetworkButton = styled.button`\n  all: unset;\n  display: flex;\n  width: 100%;\n  box-sizing: border-box;\n  align-items: center;\n  gap: ${spacing.md};\n  padding: ${spacing.sm} ${spacing.md};\n  border-radius: ${radius.md};\n  cursor: pointer;\n  transition: background 0.2s ease;\n  background: ${p => p.theme.bg.elevated};\n  color: ${p => p.theme.text.neutral};\n  font-weight: 500;\n  &:hover {\n    background: ${p => p.theme.bg.highlighted};\n  }\n\n  ${media.mobile} {\n    font-size: ${fontSize.sm};\n  }\n`;\nconst StyledMagnifyingGlassIcon = styled(MagnifyingGlassIcon)`\n  color: ${p => p.theme.text.secondary};\n  position: absolute;\n  left: 18px;\n`;\nconst SearchInput = styled(Input)`\n  padding: ${spacing.sm} ${spacing.md} ${spacing.sm} 60px;\n`;\nconst ConfirmMessage$1 = styled.div`\n  font-size: ${fontSize.sm};\n  color: ${p => p.theme.link.primary};\n`;\nconst ErrorMessage = styled.div`\n  font-size: ${fontSize.sm};\n  color: ${p => p.theme.text.danger};\n`;\n\nconst ExitIcon = _ref => {\n  let {\n    size\n  } = _ref;\n  return /*#__PURE__*/jsx(\"svg\", {\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    children: /*#__PURE__*/jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M10.79 16.29C11.18 16.68 11.81 16.68 12.2 16.29L15.79 12.7C15.8827 12.6075 15.9563 12.4976 16.0064 12.3766C16.0566 12.2557 16.0824 12.126 16.0824 11.995C16.0824 11.864 16.0566 11.7343 16.0064 11.6134C15.9563 11.4924 15.8827 11.3825 15.79 11.29L12.2 7.7C12.013 7.51302 11.7594 7.40798 11.495 7.40798C11.2306 7.40798 10.977 7.51302 10.79 7.7C10.603 7.88698 10.498 8.14057 10.498 8.405C10.498 8.66943 10.603 8.92302 10.79 9.11L12.67 11H4C3.45 11 3 11.45 3 12C3 12.55 3.45 13 4 13H12.67L10.79 14.88C10.4 15.27 10.41 15.91 10.79 16.29ZM19 3H5C4.46957 3 3.96086 3.21071 3.58579 3.58579C3.21071 3.96086 3 4.46957 3 5V8C3 8.55 3.45 9 4 9C4.55 9 5 8.55 5 8V6C5 5.45 5.45 5 6 5H18C18.55 5 19 5.45 19 6V18C19 18.55 18.55 19 18 19H6C5.45 19 5 18.55 5 18V16C5 15.45 4.55 15 4 15C3.45 15 3 15.45 3 16V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3Z\"\n    })\n  });\n};\n\nconst fadeInAnimation = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\nconst FadeIn = styled.div`\n  animation: ${fadeInAnimation} 0.15s ease-in;\n`;\n\nconst Flex = props => {\n  return /*#__PURE__*/jsxs(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: props.flexDirection,\n      justifyContent: props.justifyContent,\n      alignItems: props.alignItems,\n      gap: props.gap ? spacing[props.gap] : undefined,\n      ...(props.style || {})\n    },\n    children: [\" \", props.children]\n  });\n};\n\nconst FundsIcon = _ref => {\n  let {\n    size\n  } = _ref;\n  return /*#__PURE__*/jsxs(\"svg\", {\n    width: size,\n    height: size,\n    viewBox: \"0 0 12 12\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    children: [/*#__PURE__*/jsx(\"circle\", {\n      cx: \"6\",\n      cy: \"6\",\n      r: \"5.335\",\n      stroke: \"currentColor\",\n      strokeWidth: \"1.33\"\n    }), /*#__PURE__*/jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M5.85378 8.54545V3.09091H6.20321V8.54545H5.85378ZM6.78063 4.89134C6.76358 4.71946 6.69043 4.58594 6.56117 4.49077C6.43191 4.3956 6.25648 4.34801 6.03489 4.34801C5.88432 4.34801 5.75719 4.36932 5.6535 4.41193C5.5498 4.45312 5.47026 4.51065 5.41486 4.58452C5.36088 4.65838 5.3339 4.74219 5.3339 4.83594C5.33105 4.91406 5.34739 4.98224 5.3829 5.04048C5.41983 5.09872 5.47026 5.14915 5.53418 5.19176C5.5981 5.23295 5.67196 5.26918 5.75577 5.30043C5.83958 5.33026 5.92907 5.35582 6.02424 5.37713L6.41628 5.47088C6.60662 5.51349 6.78134 5.57031 6.94043 5.64134C7.09952 5.71236 7.2373 5.79972 7.35378 5.90341C7.47026 6.0071 7.56046 6.12926 7.62438 6.26989C7.68972 6.41051 7.7231 6.57173 7.72452 6.75355C7.7231 7.0206 7.65492 7.25213 7.51998 7.44815C7.38645 7.64276 7.19327 7.79403 6.94043 7.90199C6.68901 8.00852 6.38574 8.06179 6.03063 8.06179C5.67836 8.06179 5.37154 8.00781 5.11017 7.89986C4.85023 7.7919 4.64711 7.6321 4.5008 7.42045C4.35591 7.20739 4.27992 6.94389 4.27282 6.62997H5.16557C5.17551 6.77628 5.21742 6.89844 5.29128 6.99645C5.36657 7.09304 5.46671 7.16619 5.59171 7.21591C5.71813 7.2642 5.86088 7.28835 6.01998 7.28835C6.17623 7.28835 6.31188 7.26562 6.42694 7.22017C6.54341 7.17472 6.63361 7.11151 6.69753 7.03054C6.76145 6.94957 6.79341 6.85653 6.79341 6.75142C6.79341 6.65341 6.76429 6.57102 6.70605 6.50426C6.64924 6.4375 6.56543 6.38068 6.45463 6.33381C6.34526 6.28693 6.21103 6.24432 6.05194 6.20597L5.57679 6.08665C5.2089 5.99716 4.91841 5.85724 4.70534 5.6669C4.49228 5.47656 4.38645 5.22017 4.38787 4.89773C4.38645 4.63352 4.45676 4.4027 4.59881 4.20526C4.74228 4.00781 4.93901 3.85369 5.18901 3.7429C5.43901 3.6321 5.7231 3.5767 6.04128 3.5767C6.36515 3.5767 6.64782 3.6321 6.88929 3.7429C7.13219 3.85369 7.32111 4.00781 7.45605 4.20526C7.591 4.4027 7.6606 4.63139 7.66486 4.89134H6.78063Z\"\n    })]\n  });\n};\n\nconst ConnectedWalletDetails = props => {\n  const disconnect = useDisconnect();\n  const chains = useSupportedChains();\n  const walletChainId = useChainId();\n  const address = useAddress();\n  const balanceQuery = useBalance();\n  const activeWallet = useWallet();\n  const walletContext = useThirdwebWallet();\n  const [personalWalletBalance, setPersonalWalletBalance] = useState(undefined);\n  const [personalWalletAddress, setPersonalWalletAddress] = useState(undefined);\n  const chain = useMemo(() => {\n    return chains.find(_chain => _chain.chainId === walletChainId);\n  }, [walletChainId, chains]);\n  const unknownChain = useMemo(() => {\n    if (!chain) {\n      return defaultChains.find(c => c.chainId === walletChainId);\n    }\n  }, [walletChainId, chain]);\n  const activeWalletIconURL = activeWallet?.getMeta().iconURL || \"\";\n  const [showNetworkSelector, setShowNetworkSelector] = useState(false);\n  const [open, setOpen] = useState(false);\n  const personalWallet = activeWallet?.walletId === \"Safe\" ? activeWallet.getPersonalWallet() : undefined; // get personal wallet address and balance\n\n  useEffect(() => {\n    if (!personalWallet) {\n      setPersonalWalletAddress(undefined);\n      setPersonalWalletBalance(undefined);\n      return;\n    }\n\n    personalWallet.getAddress().then(_address => {\n      setPersonalWalletAddress(_address);\n    });\n    personalWallet.getSigner().then(signer => {\n      signer.getBalance().then(balance => {\n        setPersonalWalletBalance(utils.formatEther(balance));\n      });\n    });\n  }, [personalWallet]);\n  const trigger = /*#__PURE__*/jsxs(WalletInfoButton, {\n    type: \"button\",\n    children: [/*#__PURE__*/jsx(ChainIcon, {\n      chain: chain,\n      size: iconSize.lg\n    }), /*#__PURE__*/jsxs(ColFlex, {\n      children: [!balanceQuery.isLoading ? /*#__PURE__*/jsxs(WalletBalance, {\n        children: [balanceQuery.data?.displayValue.slice(0, 5), \" \", balanceQuery.data?.symbol]\n      }) : /*#__PURE__*/jsx(Skeleton, {\n        height: fontSize.sm,\n        width: \"82px\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xs\"\n      }), /*#__PURE__*/jsx(WalletAddress, {\n        children: shortenString(address || \"\")\n      })]\n    }), /*#__PURE__*/jsx(Img, {\n      width: iconSize.lg,\n      height: iconSize.lg,\n      src: activeWalletIconURL\n    })]\n  });\n  const networkSwitcherButton = /*#__PURE__*/jsxs(MenuButton, {\n    id: \"current-network\",\n    type: \"button\",\n    disabled: activeWallet?.walletId === \"Safe\",\n    onClick: () => {\n      setOpen(false);\n      setShowNetworkSelector(true);\n    },\n    children: [/*#__PURE__*/jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/jsx(ChainIcon, {\n        chain: chain || unknownChain,\n        size: iconSize.lg,\n        active: true\n      })\n    }), chain?.name || unknownChain?.name || `Unknown chain #${walletChainId}`, /*#__PURE__*/jsx(StyledChevronRightIcon, {\n      width: iconSize.sm,\n      height: iconSize.sm,\n      style: {\n        flexShrink: 0,\n        marginLeft: \"auto\"\n      }\n    })]\n  });\n  const switchToPersonalWallet = personalWallet && /*#__PURE__*/jsxs(MenuButton, {\n    type: \"button\",\n    onClick: () => {\n      walletContext?.handleWalletConnect(personalWallet);\n    },\n    children: [/*#__PURE__*/jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/jsx(Img, {\n        src: personalWallet.getMeta().iconURL,\n        width: iconSize.lg,\n        height: iconSize.lg\n      })\n    }), /*#__PURE__*/jsxs(ColFlex, {\n      children: [personalWalletBalance ? /*#__PURE__*/jsxs(WalletBalance, {\n        children: [String(personalWalletBalance).slice(0, 5), \" \", balanceQuery.data?.symbol]\n      }) : /*#__PURE__*/jsx(Skeleton, {\n        height: fontSize.sm,\n        width: \"82px\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xxs\"\n      }), /*#__PURE__*/jsx(WalletAddress, {\n        children: shortenString(personalWalletAddress || \"\")\n      })]\n    }), /*#__PURE__*/jsx(StyledChevronRightIcon, {\n      width: iconSize.sm,\n      height: iconSize.sm,\n      style: {\n        flexShrink: 0,\n        marginLeft: \"auto\"\n      }\n    })]\n  });\n  const content = /*#__PURE__*/jsxs(\"div\", {\n    children: [/*#__PURE__*/jsxs(Flex, {\n      gap: \"md\",\n      children: [/*#__PURE__*/jsx(Img, {\n        width: iconSize.xl,\n        height: iconSize.xl,\n        src: activeWalletIconURL,\n        alt: \"\"\n      }), /*#__PURE__*/jsxs(\"div\", {\n        style: {\n          flexGrow: 1\n        },\n        children: [/*#__PURE__*/jsxs(Flex, {\n          gap: \"xs\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/jsxs(\"div\", {\n            style: {\n              display: \"flex\",\n              gap: spacing.xs,\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/jsxs(AccountAddress, {\n              children: [\" \", shortenString(address || \"\")]\n            }), /*#__PURE__*/jsx(IconButton, {\n              variant: \"secondary\",\n              style: {\n                padding: \"3px\"\n              },\n              children: /*#__PURE__*/jsx(CopyIcon, {\n                text: address || \"\",\n                tip: \"Copy Address\",\n                side: \"bottom\"\n              })\n            })]\n          }), /*#__PURE__*/jsx(ToolTip, {\n            tip: \"Disconnect Wallet\",\n            side: \"bottom\",\n            align: \"end\",\n            sideOffset: 10,\n            children: /*#__PURE__*/jsx(DisconnectIconButton, {\n              type: \"button\",\n              variant: \"secondary\",\n              onClick: () => {\n                disconnect();\n                props.onDisconnect();\n              },\n              children: /*#__PURE__*/jsx(ExitIcon, {\n                size: iconSize.md\n              })\n            })\n          })]\n        }), /*#__PURE__*/jsxs(AccountBalance, {\n          children: [\" \", balanceQuery.data?.displayValue.slice(0, 5), \" \", balanceQuery.data?.symbol, \" \"]\n        })]\n      })]\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"lg\"\n    }), /*#__PURE__*/jsxs(\"div\", {\n      children: [/*#__PURE__*/jsx(DropdownLabel, {\n        htmlFor: \"current-network\",\n        children: \"Current Network\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"sm\"\n      }), networkSwitcherButton]\n    }), personalWallet && /*#__PURE__*/jsxs(\"div\", {\n      children: [/*#__PURE__*/jsx(Spacer, {\n        y: \"lg\"\n      }), /*#__PURE__*/jsx(DropdownLabel, {\n        htmlFor: \"current-network\",\n        children: \"Personal Wallet\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"sm\"\n      }), /*#__PURE__*/jsx(ToolTip, {\n        tip: \"Switch To Personal Wallet\",\n        children: switchToPersonalWallet\n      })]\n    }), chain?.faucets && chain.faucets.length > 0 && /*#__PURE__*/jsxs(\"div\", {\n      children: [/*#__PURE__*/jsx(Spacer, {\n        y: \"lg\"\n      }), /*#__PURE__*/jsxs(MenuLink, {\n        href: chain.faucets[0],\n        target: \"_blank\",\n        as: \"a\",\n        style: {\n          textDecoration: \"none\",\n          color: \"inherit\",\n          fontSize: fontSize.sm\n        },\n        children: [/*#__PURE__*/jsx(SecondaryIconContainer, {\n          children: /*#__PURE__*/jsx(FundsIcon, {\n            size: iconSize.sm\n          })\n        }), \"Request Testnet Funds\"]\n      })]\n    })]\n  });\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [isMobile() ? /*#__PURE__*/jsx(Modal, {\n      trigger: trigger,\n      open: open,\n      setOpen: setOpen,\n      hideCloseIcon: true,\n      children: /*#__PURE__*/jsx(\"div\", {\n        style: {\n          minHeight: \"200px\"\n        },\n        children: content\n      })\n    }) : /*#__PURE__*/jsxs(DropdownMenu.Root, {\n      open: open,\n      onOpenChange: setOpen,\n      children: [/*#__PURE__*/jsx(DropdownMenu.Trigger, {\n        asChild: true,\n        children: trigger\n      }), /*#__PURE__*/jsx(DropdownMenu.Portal, {\n        children: /*#__PURE__*/jsx(DropDownContent, {\n          asChild: true,\n          side: props.dropdownPosition?.side || \"bottom\",\n          align: props.dropdownPosition?.align || \"end\",\n          sideOffset: 10,\n          children: content\n        })\n      })]\n    }), showNetworkSelector && /*#__PURE__*/jsx(NetworkSelector, {\n      open: showNetworkSelector,\n      setOpen: setShowNetworkSelector\n    })]\n  });\n};\n\nconst dropdownContentFade = keyframes`\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n`;\nconst DropDownContent = styled(DropdownMenu.Content)`\n  width: 360px;\n  box-sizing: border-box;\n  max-width: 100%;\n  border-radius: ${radius.lg};\n  padding: ${spacing.lg};\n  animation: ${dropdownContentFade} 400ms cubic-bezier(0.16, 1, 0.3, 1);\n  will-change: transform, opacity;\n  border: 1px solid ${props => props.theme.border.base};\n  background-color: ${props => props.theme.bg.base};\n  z-index: 1000000;\n  line-height: 1;\n`;\nconst WalletInfoButton = styled.button`\n  all: unset;\n  background: ${props => props.theme.bg.base};\n  border: 1px solid ${props => props.theme.border.base};\n  padding: ${spacing.sm} ${spacing.sm};\n  border-radius: ${radius.lg};\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  gap: ${spacing.md};\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: transparent;\n  line-height: 1;\n  animation: ${fadeInAnimation} 300ms ease;\n\n  ${media.mobile} {\n    gap: ${spacing.sm};\n    padding: ${spacing.xs} ${spacing.sm};\n    img {\n      width: ${iconSize.md}px;\n      height: ${iconSize.md}px;\n    }\n  }\n\n  &:hover {\n    transition: background 250ms ease;\n    background: ${props => props.theme.bg.baseHover};\n    border-color: ${props => props.theme.bg.highlighted};\n  }\n`;\nconst WalletAddress = styled.span`\n  color: ${props => props.theme.text.secondary};\n  font-size: ${fontSize.xs};\n  font-weight: 500;\n`;\nconst ColFlex = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst WalletBalance = styled.span`\n  color: ${props => props.theme.text.neutral};\n  font-size: ${fontSize.sm};\n  font-weight: 500;\n`;\nconst AccountAddress = styled.span`\n  font-size: ${fontSize.md};\n  color: ${props => props.theme.text.neutral};\n  font-weight: 500;\n`;\nconst AccountBalance = styled.span`\n  font-size: ${fontSize.sm};\n  color: ${props => props.theme.text.secondary};\n  font-weight: 500;\n`;\nconst DropdownLabel = styled.label`\n  font-size: ${fontSize.sm};\n  color: ${props => props.theme.text.secondary};\n  font-weight: 500;\n`;\nconst MenuButton = styled.button`\n  all: unset;\n  padding: ${spacing.sm} ${spacing.sm};\n  border-radius: ${radius.md};\n  background-color: ${props => props.theme.bg.base};\n  border: 1px solid ${props => props.theme.border.elevated};\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  cursor: pointer;\n  font-size: ${fontSize.md};\n  font-weight: 500;\n  color: ${props => props.theme.text.neutral} !important;\n  gap: ${spacing.sm};\n  -webkit-tap-highlight-color: transparent;\n  line-height: 1.3;\n\n  &:not([disabled]):hover {\n    transition: box-shadow 250ms ease, border-color 250ms ease;\n    border: 1px solid ${props => props.theme.link.primary};\n    box-shadow: 0 0 0 1px ${props => props.theme.link.primary};\n  }\n\n  &[disabled] {\n    cursor: not-allowed;\n    svg {\n      display: none;\n    }\n  }\n`;\nconst MenuLink = MenuButton.withComponent(\"a\");\nstyled(DropdownMenu.Item)`\n  outline: none;\n`;\nconst StyledChevronRightIcon = styled(ChevronRightIcon)`\n  color: ${props => props.theme.text.secondary};\n`;\nconst DisconnectIconButton = styled(IconButton)`\n  margin-right: -${spacing.xxs};\n  margin-left: auto;\n  color: ${props => props.theme.icon.secondary};\n  &:hover {\n    color: ${props => props.theme.icon.danger};\n    background: none;\n  }\n`;\nconst SecondaryIconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${props => props.theme.icon.secondary};\n`;\nconst SafeConnection = /*#__PURE__*/createContext(false);\nconst SetSafeConnection = /*#__PURE__*/createContext(undefined);\nconst WalletModalOpen = /*#__PURE__*/createContext(false);\nconst SetWalletModalOpen = /*#__PURE__*/createContext(undefined);\nconst ScreenContext = /*#__PURE__*/createContext(\"walletList\");\nconst SetScreenContext = /*#__PURE__*/createContext(undefined);\nconst ModalThemeContext = /*#__PURE__*/createContext(\"dark\");\nconst SetModalThemeContext = /*#__PURE__*/createContext(undefined);\n\nconst WalletUIStatesProvider = props => {\n  const [isConnectingToSafe, setIsConnectingToSafe] = useState(false);\n  const [isWalletModalOpen, setIsWalletModalOpen] = useState(false);\n  const [screen, setScreen] = useState(\"walletList\");\n  const [modalTheme, setModalTheme] = useState(props.theme || \"dark\");\n  return /*#__PURE__*/jsx(SafeConnection.Provider, {\n    value: isConnectingToSafe,\n    children: /*#__PURE__*/jsx(SetSafeConnection.Provider, {\n      value: setIsConnectingToSafe,\n      children: /*#__PURE__*/jsx(WalletModalOpen.Provider, {\n        value: isWalletModalOpen,\n        children: /*#__PURE__*/jsx(SetWalletModalOpen.Provider, {\n          value: setIsWalletModalOpen,\n          children: /*#__PURE__*/jsx(ScreenContext.Provider, {\n            value: screen,\n            children: /*#__PURE__*/jsx(SetScreenContext.Provider, {\n              value: setScreen,\n              children: /*#__PURE__*/jsx(ModalThemeContext.Provider, {\n                value: modalTheme,\n                children: /*#__PURE__*/jsx(SetModalThemeContext.Provider, {\n                  value: setModalTheme,\n                  children: props.children\n                })\n              })\n            })\n          })\n        })\n      })\n    })\n  });\n};\n\nconst useIsConnectingToSafe = () => {\n  return useContext(SafeConnection);\n};\n\nconst useIsWalletModalOpen = () => {\n  return useContext(WalletModalOpen);\n};\n\nconst useSetIsConnectingToSafe = () => {\n  const context = useContext(SetSafeConnection);\n\n  if (context === undefined) {\n    throw new Error(\"useSetSafeConnection must be used within a UIProvider\");\n  }\n\n  return context;\n};\n\nconst useSetIsWalletModalOpen = () => {\n  const context = useContext(SetWalletModalOpen);\n\n  if (context === undefined) {\n    throw new Error(\"useSetWalletModalOpen must be used within a UIProvider\");\n  }\n\n  return context;\n};\n\nconst useScreen = () => {\n  return useContext(ScreenContext);\n};\n\nconst useSetScreen = () => {\n  const context = useContext(SetScreenContext);\n\n  if (context === undefined) {\n    throw new Error(\"useSetScreen must be used within a UIProvider\");\n  }\n\n  return context;\n};\n\nconst useModalTheme = () => {\n  return useContext(ModalThemeContext);\n};\n\nconst useSetModalTheme = () => {\n  const context = useContext(SetModalThemeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useSetModalTheme must be used within a UIProvider\");\n  }\n\n  return context;\n};\n\nconst LockIcon = props => {\n  return /*#__PURE__*/jsx(\"svg\", {\n    width: props.size,\n    height: props.size,\n    viewBox: \"0 0 16 21\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    children: /*#__PURE__*/jsx(\"path\", {\n      d: \"M2 21C1.45 21 0.979333 20.8043 0.588 20.413C0.196 20.021 0 19.55 0 19V9C0 8.45 0.196 7.979 0.588 7.587C0.979333 7.19567 1.45 7 2 7H3V5C3 3.61667 3.48767 2.43733 4.463 1.462C5.43767 0.487333 6.61667 0 8 0C9.38333 0 10.5627 0.487333 11.538 1.462C12.5127 2.43733 13 3.61667 13 5V7H14C14.55 7 15.021 7.19567 15.413 7.587C15.8043 7.979 16 8.45 16 9V19C16 19.55 15.8043 20.021 15.413 20.413C15.021 20.8043 14.55 21 14 21H2ZM8 16C8.55 16 9.021 15.8043 9.413 15.413C9.80433 15.021 10 14.55 10 14C10 13.45 9.80433 12.979 9.413 12.587C9.021 12.1957 8.55 12 8 12C7.45 12 6.97933 12.1957 6.588 12.587C6.196 12.979 6 13.45 6 14C6 14.55 6.196 15.021 6.588 15.413C6.97933 15.8043 7.45 16 8 16ZM5 7H11V5C11 4.16667 10.7083 3.45833 10.125 2.875C9.54167 2.29167 8.83333 2 8 2C7.16667 2 6.45833 2.29167 5.875 2.875C5.29167 3.45833 5 4.16667 5 5V7Z\",\n      fill: \"currentColor\"\n    })\n  });\n};\n\nconst ModalTitle = styled(Title)`\n  margin: 0;\n  font-weight: 600;\n  font-size: ${fontSize.lg};\n  color: ${p => p.theme.text.neutral};\n  ${media.mobile} {\n    text-align: center;\n  }\n`;\nconst ModalDescription = styled.p`\n  all: unset;\n  display: block;\n  font-size: ${fontSize.md};\n  color: ${p => p.theme.text.secondary};\n  line-height: 1.5;\n  ${media.mobile} {\n    text-align: center;\n  }\n`;\n\nconst BackButton = props => {\n  return /*#__PURE__*/jsx(IconButton, {\n    variant: \"secondary\",\n    onClick: props.onClick,\n    style: props.style,\n    children: /*#__PURE__*/jsx(ChevronLeftIcon, {\n      style: {\n        width: iconSize.md,\n        height: iconSize.md\n      }\n    })\n  });\n};\n\nconst HelperLink = styled.a`\n  all: unset;\n  cursor: pointer;\n  color: ${p => p.theme.link.primary};\n  font-size: ${fontSize.sm};\n  text-decoration: none;\n  display: block;\n  ${media.mobile} {\n    text-align: center;\n  }\n  &:hover {\n    color: ${p => p.theme.link.primaryHover};\n    text-decoration: none;\n  }\n`;\n\nconst SignatureModal = props => {\n  const wallet = useWallet();\n  return /*#__PURE__*/jsx(Modal, {\n    open: props.open,\n    style: {\n      maxWidth: \"450px\"\n    },\n    setOpen: props.setOpen,\n    children: /*#__PURE__*/jsxs(Container, {\n      children: [/*#__PURE__*/jsx(Img, {\n        height: iconSize.xl,\n        src: wallet?.getMeta().iconURL,\n        width: iconSize.xl\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsxs(TitleContainer$1, {\n        children: [/*#__PURE__*/jsx(ModalTitle, {\n          children: \"Signature Request\"\n        }), /*#__PURE__*/jsx(Spinner, {\n          size: \"md\",\n          color: \"link\"\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"md\"\n      }), /*#__PURE__*/jsx(Desc$3, {\n        children: \"Sign the signature request pop-up in your wallet\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xxl\"\n      }), /*#__PURE__*/jsx(HelperLink, {\n        target: \"_blank\",\n        href: \"https://support.thirdweb.com/contact\",\n        children: \"Having troubles connecting to wallet\"\n      })]\n    })\n  });\n};\n\nconst TitleContainer$1 = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${spacing.sm};\n\n  ${media.mobile} {\n    justify-content: center;\n    flex-direction: column;\n    gap: ${spacing.md};\n  }\n`;\nconst Desc$3 = styled(ModalDescription)`\n  ${media.mobile} {\n    max-width: 240px;\n    margin: 0 auto;\n  }\n`;\nconst Container = styled.div`\n  ${media.mobile} {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n/**\n * A component that allows the user to connect their wallet.\n *\n * The button must be descendant of `ThirdwebProvider` in order to function.\n */\n\nconst ConnectWallet = props => {\n  const activeWallet = useWallet();\n  const themeFromProvider = useContext(ThirdwebThemeContext);\n  const theme = props.theme || themeFromProvider || \"dark\";\n  const isConnectingToSafe = useIsConnectingToSafe();\n  const connectionStatus = useConnectionStatus();\n  const isLoading = connectionStatus === \"connecting\" || connectionStatus === \"unknown\";\n  const btnTitle = props.btnTitle || \"Connect Wallet\";\n  const setIsWalletModalOpen = useSetIsWalletModalOpen();\n  const setModalTheme = useSetModalTheme();\n  const address = useAddress();\n  const [showSignatureModal, setShowSignatureModal] = useState(false);\n  const authConfig = useThirdwebAuthContext();\n  const {\n    user\n  } = useUser();\n  const {\n    login\n  } = useLogin();\n  const {\n    logout\n  } = useLogout();\n  const requiresSignIn = props.auth?.loginOptional ? false : !!authConfig?.authUrl && !!address && !user?.address;\n\n  const signIn = async () => {\n    try {\n      setShowSignatureModal(true);\n      await login(props.auth?.loginOptions);\n    } catch (err) {\n      console.error(\"failed to log in\", err);\n    }\n\n    setShowSignatureModal(false);\n  };\n\n  return /*#__PURE__*/jsxs(ThemeProvider, {\n    theme: typeof theme === \"object\" ? theme : theme === \"dark\" ? darkTheme : lightTheme,\n    children: [showSignatureModal && /*#__PURE__*/jsx(SignatureModal, {\n      open: showSignatureModal,\n      setOpen: setShowSignatureModal\n    }), requiresSignIn && /*#__PURE__*/jsxs(Button, {\n      variant: \"inverted\",\n      onClick: signIn,\n      children: [/*#__PURE__*/jsxs(Flex, {\n        alignItems: \"center\",\n        gap: \"sm\",\n        style: {\n          paddingRight: spacing.xs,\n          borderRight: \"1px solid\",\n          marginRight: spacing.xs\n        },\n        children: [/*#__PURE__*/jsx(LockIcon, {\n          size: iconSize.sm\n        }), /*#__PURE__*/jsx(\"span\", {\n          children: \" Sign in \"\n        })]\n      }), /*#__PURE__*/jsx(\"span\", {\n        children: shortenAddress(address || \"\", true)\n      })]\n    }), !requiresSignIn && (!activeWallet || isConnectingToSafe ?\n    /*#__PURE__*/\n    // connect wallet button\n    jsx(AnimatedButton, {\n      disabled: isLoading,\n      className: props.className,\n      variant: \"inverted\",\n      type: \"button\",\n      style: {\n        minWidth: \"140px\"\n      },\n      \"aria-label\": connectionStatus === \"connecting\" ? \"Connecting\" : btnTitle,\n      onClick: () => {\n        setModalTheme(theme);\n        setIsWalletModalOpen(true);\n      },\n      children: isLoading ? /*#__PURE__*/jsx(Spinner, {\n        size: \"sm\",\n        color: \"inverted\"\n      }) : btnTitle\n    }) : /*#__PURE__*/jsx(ConnectedWalletDetails, {\n      dropdownPosition: props.dropdownPosition,\n      onDisconnect: () => {\n        if (authConfig?.authUrl) {\n          logout();\n        }\n      }\n    }))]\n  });\n};\n\nconst AnimatedButton = styled(Button)`\n  animation: ${fadeInAnimation} 300ms ease;\n`;\nlet video;\n\nfunction supportsVideoType(mimeType) {\n  if (!mimeType || !mimeType.startsWith(\"video/\")) {\n    return \"\";\n  }\n\n  if (!video) {\n    video = document.createElement(\"video\");\n  }\n\n  return video.canPlayType(mimeType);\n}\n\nfunction shouldRenderVideoTag(mimeType) {\n  return !!supportsVideoType(mimeType);\n}\n\nlet audio;\n\nfunction supportsAudioType(mimeType) {\n  if (!mimeType || !mimeType.startsWith(\"audio/\")) {\n    return \"\";\n  }\n\n  if (!audio) {\n    audio = document.createElement(\"audio\");\n  }\n\n  return audio.canPlayType(mimeType);\n}\n\nfunction shouldRenderAudioTag(mimeType) {\n  return !!supportsAudioType(mimeType);\n}\n\nfunction mergeRefs(refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === \"function\") {\n        ref(value); // eslint-disable-next-line eqeqeq\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\nconst CarbonDocumentUnknown = props => {\n  return /*#__PURE__*/jsxs(\"svg\", {\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 32 32\",\n    ...props,\n    children: [/*#__PURE__*/jsx(\"circle\", {\n      cx: \"9\",\n      cy: \"28.5\",\n      r: \"1.5\",\n      fill: \"currentColor\"\n    }), /*#__PURE__*/jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M10 25H8v-4h2a2 2 0 0 0 0-4H8a2.002 2.002 0 0 0-2 2v.5H4V19a4.005 4.005 0 0 1 4-4h2a4 4 0 0 1 0 8Z\"\n    }), /*#__PURE__*/jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"m27.7 9.3l-7-7A.908.908 0 0 0 20 2H10a2.006 2.006 0 0 0-2 2v8h2V4h8v6a2.006 2.006 0 0 0 2 2h6v16H14v2h12a2.006 2.006 0 0 0 2-2V10a.91.91 0 0 0-.3-.7ZM20 10V4.4l5.6 5.6Z\"\n    })]\n  });\n};\n\nconst CarbonDocumentAudio = props => {\n  return /*#__PURE__*/jsxs(\"svg\", {\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 32 32\",\n    ...props,\n    children: [/*#__PURE__*/jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M29 31a.999.999 0 0 1-.625-.22L23.65 27H20a1 1 0 0 1-1-1v-5a1 1 0 0 1 1-1h3.65l4.726-3.78A1 1 0 0 1 30 17v13a1 1 0 0 1-1 1Zm-8-6h3a1 1 0 0 1 .625.22L28 27.92v-8.84l-3.376 2.7A1 1 0 0 1 24 22h-3Z\"\n    }), /*#__PURE__*/jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M16 28H8V4h8v6a2.006 2.006 0 0 0 2 2h6v3h2v-5a.91.91 0 0 0-.3-.7l-7-7A.909.909 0 0 0 18 2H8a2.006 2.006 0 0 0-2 2v24a2.006 2.006 0 0 0 2 2h8Zm2-23.6l5.6 5.6H18Z\"\n    })]\n  });\n};\n\nconst CarbonPauseFilled = props => {\n  return /*#__PURE__*/jsx(\"svg\", {\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 32 32\",\n    ...props,\n    children: /*#__PURE__*/jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M12 6h-2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2zm10 0h-2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2z\"\n    })\n  });\n};\n\nconst CarbonPlayFilledAlt = props => {\n  return /*#__PURE__*/jsx(\"svg\", {\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 32 32\",\n    ...props,\n    children: /*#__PURE__*/jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M7 28a1 1 0 0 1-1-1V5a1 1 0 0 1 1.482-.876l20 11a1 1 0 0 1 0 1.752l-20 11A1 1 0 0 1 7 28Z\"\n    })\n  });\n};\n\nconst ModelViewer = /*#__PURE__*/lazy(() => import('./ModelViewer-68c3eb38.browser.esm.js'));\n\nconst PlayButton = _ref => {\n  let {\n    onClick,\n    isPlaying\n  } = _ref;\n  const [isHovering, setIsHovering] = useState(false);\n\n  const onMouseEnter = () => setIsHovering(true);\n\n  const onMouseLeave = () => setIsHovering(false);\n\n  const onMouseDown = () => setIsHovering(false);\n\n  const onMouseUp = () => setIsHovering(true);\n\n  return /*#__PURE__*/jsx(\"button\", {\n    style: {\n      position: \"absolute\",\n      bottom: 0,\n      right: 0,\n      transform: \"translate(-25%, -25%)\",\n      maxWidth: \"32px\",\n      width: \"8%\",\n      minWidth: \"24px\",\n      aspectRatio: \"1\",\n      zIndex: 3,\n      backgroundColor: \"#fff\",\n      color: \"rgb(138, 147, 155)\",\n      display: \"grid\",\n      placeItems: \"center\",\n      borderRadius: \"50%\",\n      border: \"1px solid rgb(229, 232, 235)\",\n      cursor: \"pointer\",\n      ...(isHovering ? {\n        color: \"rgb(53, 56, 64)\",\n        boxShadow: \"rgb(4 17 29 / 25%) 0px 0px 8px 0px\"\n      } : {})\n    },\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseDown: onMouseDown,\n    onMouseUp: onMouseUp,\n    children: !isPlaying ? /*#__PURE__*/jsx(CarbonPlayFilledAlt, {\n      style: {\n        width: \"66%\",\n        height: \"66%\"\n      }\n    }) : /*#__PURE__*/jsx(CarbonPauseFilled, {\n      style: {\n        width: \"66%\",\n        height: \"66%\"\n      }\n    })\n  });\n};\n\nconst VideoPlayer = /*#__PURE__*/React.forwardRef((_ref2, ref) => {\n  let {\n    src,\n    alt,\n    poster,\n    requireInteraction,\n    style,\n    width,\n    height,\n    controls,\n    ...restProps\n  } = _ref2;\n  const videoRef = useRef(null);\n  const [playing, setPlaying] = useState(!requireInteraction);\n  const [muted, setMuted] = useState(true);\n  useEffect(() => {\n    if (videoRef.current) {\n      if (playing) {\n        try {\n          videoRef.current.play();\n        } catch (err) {\n          console.error(\"error playing video\", err);\n        }\n      } else {\n        try {\n          videoRef.current.pause();\n          videoRef.current.currentTime = 0;\n        } catch (err) {\n          console.error(\"error pausing video\", err);\n        }\n      }\n    }\n  }, [playing]);\n  return /*#__PURE__*/jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      ...style\n    },\n    ...restProps,\n    children: [/*#__PURE__*/jsx(\"video\", {\n      ref: mergeRefs([videoRef, ref]),\n      src: src ?? undefined,\n      poster: poster ?? undefined,\n      loop: true,\n      playsInline: true,\n      controlsList: \"nodownload\",\n      muted: muted,\n      preload: poster ? \"metadata\" : \"auto\",\n      onCanPlay: () => {\n        if (playing) {\n          videoRef.current?.play();\n        }\n      },\n      width: width,\n      height: height,\n      controls: controls,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        objectFit: \"contain\",\n        zIndex: 1,\n        transition: \"opacity .5s\",\n        opacity: !poster ? 1 : playing ? 1 : 0\n      }\n    }), poster && /*#__PURE__*/jsx(\"img\", {\n      src: poster,\n      style: {\n        objectFit: \"contain\",\n        pointerEvents: \"none\",\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 2,\n        transition: \"opacity .5s\",\n        opacity: playing ? 0 : 1,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      },\n      alt: alt\n    }), /*#__PURE__*/jsx(PlayButton, {\n      onClick: () => {\n        setPlaying(prev => !prev);\n        setMuted(false);\n      },\n      isPlaying: playing\n    })]\n  });\n});\nVideoPlayer.displayName = \"VideoPlayer\";\nconst AudioPlayer = /*#__PURE__*/React.forwardRef((_ref3, ref) => {\n  let {\n    src,\n    alt,\n    poster,\n    style,\n    height,\n    width,\n    ...restProps\n  } = _ref3;\n  const audioRef = useRef(null);\n  const [playing, setPlaying] = useState(false);\n  const [muted, setMuted] = useState(true);\n  useEffect(() => {\n    if (audioRef.current) {\n      if (playing) {\n        audioRef.current.play();\n      } else {\n        audioRef.current.pause();\n        audioRef.current.currentTime = 0;\n      }\n    }\n  }, [playing]);\n  return /*#__PURE__*/jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      ...style\n    },\n    ...restProps,\n    children: [poster ? /*#__PURE__*/jsx(\"img\", {\n      height: height,\n      width: width,\n      src: poster,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        pointerEvents: \"none\",\n        objectFit: \"contain\"\n      },\n      alt: alt\n    }) : /*#__PURE__*/jsx(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        display: \"grid\",\n        placeItems: \"center\",\n        pointerEvents: \"none\",\n        backgroundColor: \"#fff\",\n        color: \"rgb(138, 147, 155)\"\n      },\n      children: /*#__PURE__*/jsx(CarbonDocumentAudio, {\n        style: {\n          height: \"64px\",\n          width: \"64px\"\n        }\n      })\n    }), /*#__PURE__*/jsx(PlayButton, {\n      onClick: () => {\n        setPlaying(prev => !prev);\n        setMuted(false);\n      },\n      isPlaying: playing\n    }), /*#__PURE__*/jsx(\"audio\", {\n      ref: mergeRefs([audioRef, ref]),\n      src: src ?? undefined,\n      loop: true,\n      playsInline: true,\n      muted: muted,\n      preload: \"none\",\n      controlsList: \"nodownload\",\n      style: {\n        position: \"absolute\",\n        opacity: 0,\n        pointerEvents: \"none\",\n        zIndex: -1,\n        visibility: \"hidden\"\n      }\n    })]\n  });\n});\nAudioPlayer.displayName = \"AudioPlayer\";\nconst IframePlayer = /*#__PURE__*/React.forwardRef((_ref4, ref) => {\n  let {\n    src,\n    alt,\n    poster,\n    requireInteraction,\n    style,\n    ...restProps\n  } = _ref4;\n  const [playing, setPlaying] = useState(!requireInteraction);\n  return /*#__PURE__*/jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      ...style\n    },\n    ...restProps,\n    children: [/*#__PURE__*/jsx(\"iframe\", {\n      src: playing ? src ?? undefined : undefined,\n      ref: ref,\n      style: {\n        objectFit: \"contain\",\n        zIndex: 1,\n        height: \"100%\",\n        width: \"100%\",\n        transition: \"opacity .5s\",\n        opacity: !poster ? 1 : playing ? 1 : 0\n      },\n      sandbox: \"allow-scripts\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    }), poster && /*#__PURE__*/jsx(\"img\", {\n      src: poster,\n      style: {\n        objectFit: \"contain\",\n        pointerEvents: \"none\",\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 2,\n        transition: \"opacity .5s\",\n        opacity: playing ? 0 : 1,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      },\n      alt: alt\n    }), /*#__PURE__*/jsx(PlayButton, {\n      onClick: () => {\n        setPlaying(prev => !prev);\n      },\n      isPlaying: playing\n    })]\n  });\n});\nIframePlayer.displayName = \"IframePlayer\";\nconst LinkPlayer = /*#__PURE__*/React.forwardRef((_ref5, ref) => {\n  let {\n    src,\n    alt,\n    style,\n    ...restProps\n  } = _ref5;\n  return /*#__PURE__*/jsx(\"div\", {\n    style: {\n      position: \"relative\",\n      ...style\n    },\n    ...restProps,\n    children: /*#__PURE__*/jsx(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        display: \"grid\",\n        placeItems: \"center\",\n        backgroundColor: \"#fff\",\n        color: \"rgb(138, 147, 155)\"\n      },\n      children: /*#__PURE__*/jsxs(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"8px\",\n          alignItems: \"center\",\n          flexWrap: \"nowrap\"\n        },\n        children: [/*#__PURE__*/jsx(CarbonDocumentUnknown, {\n          style: {\n            maxWidth: \"128px\",\n            minWidth: \"48px\",\n            width: \"50%\",\n            aspectRatio: \"1\"\n          }\n        }), /*#__PURE__*/jsx(\"a\", {\n          rel: \"noopener noreferrer\",\n          style: {\n            textDecoration: \"underline\",\n            color: \"rgb(138, 147, 155)\"\n          },\n          href: src ?? undefined,\n          target: \"_blank\",\n          ref: ref,\n          children: alt || \"File\"\n        })]\n      })\n    })\n  });\n});\nLinkPlayer.displayName = \"LinkPlayer\";\n/**\n * This component can be used to render any media type, including image, audio, video, and html files.\n * Its convenient for rendering NFT media files, as these can be a variety of different types.\n * The component falls back to a external link if the media type is not supported.\n * The default size is 300px by 300px, but this can be changed using the `width` and `height` props.\n *\n * Props: {@link MediaRendererProps}\n *\n * @example\n * We can take a video file hosted on IPFS and render it using this component as follows\n * ```jsx\n * const Component = () => {\n *   return <MediaRenderer\n *     src=\"ipfs://Qmb9ZV5yznE4C4YvyJe8DVFv1LSVkebdekY6HjLVaKmHZi\"\n *     alt=\"A mp4 video\"\n *   />\n * }\n * ```\n *\n * You can try switching out the `src` prop to different types of URLs and media types to explore the possibilities.\n */\n\nconst MediaRenderer = /*#__PURE__*/React.forwardRef((_ref6, ref) => {\n  let {\n    src,\n    poster,\n    alt,\n    requireInteraction = false,\n    width = \"300px\",\n    height = \"300px\",\n    style,\n    mimeType,\n    ...restProps\n  } = _ref6;\n  const mergedStyle = {\n    objectFit: \"contain\",\n    width,\n    height,\n    ...style\n  };\n  const videoOrImageSrc = useResolvedMediaType(src ?? undefined, mimeType);\n  const possiblePosterSrc = useResolvedMediaType(poster ?? undefined);\n\n  if (!videoOrImageSrc.mimeType) {\n    return /*#__PURE__*/jsx(\"img\", {\n      style: mergedStyle,\n      ...restProps,\n      ref: ref,\n      alt: alt\n    });\n  } else if (videoOrImageSrc.mimeType === \"text/html\") {\n    return /*#__PURE__*/jsx(IframePlayer, {\n      style: mergedStyle,\n      src: videoOrImageSrc.url,\n      poster: possiblePosterSrc.url,\n      requireInteraction: requireInteraction,\n      ...restProps\n    });\n  } else if (videoOrImageSrc.mimeType.startsWith(\"model\")) {\n    return /*#__PURE__*/jsx(Suspense, {\n      fallback: poster ? /*#__PURE__*/jsx(\"img\", {\n        style: mergedStyle,\n        src: poster,\n        alt: alt,\n        ref: ref,\n        ...restProps\n      }) : null,\n      children: /*#__PURE__*/jsx(ModelViewer, {\n        style: mergedStyle,\n        src: videoOrImageSrc.url || \"\",\n        poster: poster,\n        alt: alt,\n        ...restProps\n      })\n    });\n  } else if (shouldRenderVideoTag(videoOrImageSrc.mimeType)) {\n    return /*#__PURE__*/jsx(VideoPlayer, {\n      style: mergedStyle,\n      src: videoOrImageSrc.url,\n      poster: possiblePosterSrc.url,\n      requireInteraction: requireInteraction,\n      ...restProps\n    });\n  } else if (shouldRenderAudioTag(videoOrImageSrc.mimeType)) {\n    return /*#__PURE__*/jsx(AudioPlayer, {\n      style: mergedStyle,\n      src: videoOrImageSrc.url,\n      poster: possiblePosterSrc.url,\n      requireInteraction: requireInteraction,\n      ...restProps\n    });\n  } else if (videoOrImageSrc.mimeType.startsWith(\"image/\")) {\n    return /*#__PURE__*/jsx(\"img\", {\n      style: mergedStyle,\n      src: videoOrImageSrc.url,\n      alt: alt,\n      ref: ref,\n      ...restProps\n    });\n  }\n\n  return /*#__PURE__*/jsx(LinkPlayer, {\n    style: mergedStyle,\n    src: videoOrImageSrc.url,\n    alt: alt,\n    ref: ref,\n    ...restProps\n  });\n});\nMediaRenderer.displayName = \"MediaRenderer\";\n/**\n * @param uri - the uri to resolve (can be a url or a ipfs://\\<cid\\>)\n * @returns the fully resolved url + mime type of the media\n *\n * @example\n * Usage with fully formed url:\n * ```jsx\n * const Component = () => {\n *   const resolved = useResolvedMediaType(\"https://example.com/video.mp4\");\n *   console.log(\"mime type\", resolved.data.mimeType);\n *   console.log(\"url\", resolved.data.url);\n *   return null;\n * }\n * ```\n *\n * Usage with ipfs cid:\n * ```jsx\n * const Component = () => {\n *   const resolved = useResolvedMediaType(\"ipfs://QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvsd\");\n *   console.log(\"mime type\", resolved.data.mimeType);\n *   console.log(\"url\", resolved.data.url);\n *   return null;\n * }\n * ```\n */\n\nfunction useResolvedMediaType(uri, mimeType) {\n  const resolvedUrl = useMemo(() => resolveIpfsUri(uri), [uri]);\n  const resolvedMimType = useQuery([\"mime-type\", resolvedUrl], () => resolveMimeType(resolvedUrl), {\n    enabled: !!resolvedUrl && !mimeType,\n    initialData: mimeType\n  });\n  return {\n    url: resolvedUrl,\n    mimeType: resolvedMimType.data\n  };\n}\n/**\n * This component can be used to render NFTs from the thirdweb SDK.\n * It will render the animation_url if it exists, otherwise it will render the image.\n * The default size is 300px by 300px, but this can be changed using the `width` and `height` props.\n *\n * Props: {@link ThirdwebNftMediaProps}\n *\n * @example\n * ```jsx\n * import { ThirdwebNftMedia, useContract, useNFT } from \"@thirdweb-dev/react\";\n * export default function NFTCollectionRender() {\n *   const { contract } = useContract(<your-contract-address>);\n *   const { data: nft, isLoading } = useNFT(contract, 0);\n *\n *   return (\n *     <div>\n *       {!isLoading && nft ? (\n *         <ThirdwebNftMedia metadata={nft.metadata} />\n *       ) : (\n *         <p>Loading...</p>\n *       )}\n *     </div>\n *   );\n * }\n * ```\n */\n\n\nconst ThirdwebNftMedia = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    metadata,\n    width = \"300px\",\n    height = \"300px\",\n    style,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/jsx(MediaRenderer, {\n    src: metadata.animation_url || metadata.image,\n    poster: metadata.image,\n    alt: metadata.name?.toString() || \"\",\n    ref: ref,\n    width: width,\n    height: height,\n    style: { ...style\n    },\n    ...props\n  });\n});\nThirdwebNftMedia.displayName = \"ThirdwebNftMedia\";\n\nconst Popover = props => {\n  return /*#__PURE__*/jsxs(RXPopover.Root, {\n    open: props.open,\n    onOpenChange: props.onOpenChange,\n    children: [/*#__PURE__*/jsx(RXPopover.Trigger, {\n      asChild: true,\n      children: props.children\n    }), /*#__PURE__*/jsx(RXPopover.Portal, {\n      children: /*#__PURE__*/jsxs(PopoverContent, {\n        sideOffset: 7,\n        side: \"top\",\n        children: [/*#__PURE__*/jsx(FlexWrapper, {\n          children: props.content\n        }), /*#__PURE__*/jsx(PopoverArrow, {})]\n      })\n    })]\n  });\n};\n\nconst slideUpAndFade = keyframes`\nfrom {\n    opacity: 0;\n    transform: translateY(2px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\nconst PopoverContent = styled(RXPopover.Content)`\n  border-radius: ${radius.sm};\n  padding: ${spacing.sm} ${spacing.md};\n  background-color: ${p => p.theme.bg.inverted};\n  box-shadow: ${shadow.md};\n  animation-duration: 400ms;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n  will-change: transform, opacity;\n  animation-name: ${slideUpAndFade};\n  color: ${p => p.theme.text.inverted};\n  font-size: ${fontSize.md};\n`;\nconst PopoverArrow = styled(RXPopover.Arrow)`\n  fill: ${p => p.theme.bg.inverted};\n`;\nconst FlexWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${spacing.sm};\n`;\n/**\n * A component that allows the user to call an on-chain function on a contract.\n *\n * The button has to be wrapped in a `ThirdwebProvider` in order to function.\n *\n * @example\n * ```javascript\n * import { Web3Button } from \"@thirdweb-dev/react\";\n *\n * const App = () => {\n *  return (\n *   <div>\n *     <Web3Button contractAddress=\"0x...\" action={(contract) => contract.erc721.transfer(\"0x...\", 1)} />\n *   </div>\n * )\n * }\n * ```\n *\n *\n * @beta\n */\n\nconst Web3Button = _ref => {\n  let {\n    contractAddress,\n    onSuccess,\n    onError,\n    onSubmit,\n    isDisabled,\n    contractAbi,\n    children,\n    action,\n    className,\n    type,\n    theme\n  } = _ref;\n  const address = useAddress();\n  const sdkChainId = useSDKChainId();\n  const switchChain = useSwitchChain();\n  const hasMismatch = useNetworkMismatch();\n  const connectionStatus = useConnectionStatus();\n  const queryClient = useQueryClient();\n  const requiresConfirmation = useIsNonLocalWallet();\n  const {\n    contract\n  } = useContract(contractAddress, contractAbi || \"custom\");\n  const thirdwebTheme = useContext(ThirdwebThemeContext);\n  const themeToUse = theme || thirdwebTheme || \"dark\";\n  const [confirmStatus, setConfirmStatus] = useState(\"idle\");\n  const actionMutation = useMutation(async () => {\n    invariant(contract, \"contract is not ready yet\");\n\n    if (onSubmit) {\n      onSubmit();\n    } // Wait for the promise to resolve, so errors get caught by onError\n\n\n    const result = await action(contract);\n    return result;\n  }, {\n    onSuccess: res => {\n      if (onSuccess) {\n        onSuccess(res);\n      }\n    },\n    onError: err => {\n      if (onError) {\n        onError(err);\n      }\n    },\n    onSettled: () => queryClient.invalidateQueries()\n  });\n\n  if (!address) {\n    return /*#__PURE__*/jsx(ConnectWallet, {\n      theme: theme\n    });\n  } // let onClick = () => actionMutation.mutate();\n\n\n  const btnStyle = {\n    minWidth: \"150px\",\n    minHeight: \"43px\"\n  };\n  let button = null;\n\n  const handleSwitchChain = async () => {\n    if (sdkChainId) {\n      setConfirmStatus(\"waiting\");\n\n      try {\n        await switchChain(sdkChainId);\n        setConfirmStatus(\"idle\");\n      } catch (e) {\n        console.error(e);\n        setConfirmStatus(\"idle\");\n      }\n    }\n  }; // Switch Network Button\n\n\n  if (hasMismatch && !isDisabled) {\n    const _button = /*#__PURE__*/jsx(Button, {\n      variant: \"inverted\",\n      type: type,\n      className: className,\n      onClick: handleSwitchChain,\n      style: btnStyle,\n      children: confirmStatus === \"waiting\" ? /*#__PURE__*/jsx(Spinner, {\n        size: \"sm\",\n        color: \"inverted\"\n      }) : \"Switch Network\"\n    });\n\n    if (requiresConfirmation) {\n      button = /*#__PURE__*/jsx(Popover, {\n        content: /*#__PURE__*/jsx(\"span\", {\n          children: \"Confirm in Wallet\"\n        }),\n        open: confirmStatus === \"waiting\",\n        onOpenChange: isOpen => {\n          if (!isOpen) {\n            setConfirmStatus(\"idle\");\n          }\n        },\n        children: _button\n      });\n    } else {\n      button = _button;\n    }\n  } // Disabled Loading Spinner Button\n  else if (!isDisabled && (actionMutation.isLoading || !contract || connectionStatus === \"connecting\" || connectionStatus === \"unknown\")) {\n    button = /*#__PURE__*/jsx(Button, {\n      variant: \"inverted\",\n      type: type,\n      className: className,\n      disabled: true,\n      onClick: handleSwitchChain,\n      style: btnStyle,\n      children: /*#__PURE__*/jsx(Spinner, {\n        size: \"md\",\n        color: \"inverted\"\n      })\n    });\n  } // action button\n  else {\n    button = /*#__PURE__*/jsx(Button, {\n      variant: \"inverted\",\n      type: type,\n      className: className,\n      onClick: () => actionMutation.mutate(),\n      disabled: isDisabled,\n      style: btnStyle,\n      children: children\n    });\n  }\n\n  return /*#__PURE__*/jsx(ThemeProvider, {\n    theme: themeToUse === \"dark\" ? darkTheme : lightTheme,\n    children: button\n  });\n};\n\nconst DEFAULT_API_KEY = \"f9e23156ccfc6173c5267eaabf320fb692ffab1c2d572095a58091cbb67590cd\";\n\nconst WalletSelector = props => {\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(ModalTitle, {\n      style: {\n        textAlign: \"left\"\n      },\n      children: \"Choose your wallet\"\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsx(WalletSelection, {\n      walletsMeta: props.walletsMeta\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsx(HelperLink, {\n      as: \"button\",\n      onClick: props.onGetStarted,\n      style: {\n        display: \"block\",\n        width: \"100%\",\n        textAlign: \"center\"\n      },\n      children: \"Need help getting started?\"\n    })]\n  });\n};\n\nconst WalletSelection = props => {\n  // show the installed wallets first\n  const sortedWalletsMeta = props.walletsMeta.sort((a, b) => {\n    if (a.installed && !b.installed) {\n      return -1;\n    }\n\n    if (!a.installed && b.installed) {\n      return 1;\n    }\n\n    return 0;\n  });\n  return /*#__PURE__*/jsx(WalletList, {\n    children: sortedWalletsMeta.map(walletMeta => {\n      return /*#__PURE__*/jsx(\"li\", {\n        children: /*#__PURE__*/jsxs(WalletButton, {\n          type: \"button\",\n          onClick: () => {\n            walletMeta.onClick();\n          },\n          children: [/*#__PURE__*/jsx(Img, {\n            src: walletMeta.iconURL,\n            width: iconSize.lg,\n            height: iconSize.lg,\n            loading: \"eager\"\n          }), /*#__PURE__*/jsx(WalletName, {\n            children: walletMeta.name\n          }), walletMeta.installed && /*#__PURE__*/jsx(InstallBadge, {\n            children: \" Installed \"\n          })]\n        })\n      }, walletMeta.id);\n    })\n  });\n};\n\nconst WalletList = styled.ul`\n  all: unset;\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: ${spacing.xs};\n  box-sizing: border-box;\n`;\nconst WalletButton = styled.button`\n  all: unset;\n  padding: ${spacing.sm} ${spacing.md};\n  border-radius: ${radius.sm};\n  display: flex;\n  align-items: center;\n  gap: ${spacing.md};\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100%;\n  color: ${p => p.theme.text.neutral};\n  background: ${p => p.theme.bg.elevated};\n  transition: 100ms ease;\n  &:hover {\n    background: ${p => p.theme.bg.highlighted};\n  }\n`;\nconst InstallBadge = styled.span`\n  padding: ${spacing.xxs} ${spacing.xs};\n  font-size: ${fontSize.xs};\n  background-color: ${p => p.theme.badge.secondary};\n  border-radius: ${radius.lg};\n  margin-left: auto;\n`;\nconst WalletName = styled.span`\n  font-size: ${fontSize.md};\n  font-weight: 500;\n`;\n\nconst ConnectingScreen = props => {\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(BackButton, {\n      onClick: props.onBack\n    }), /*#__PURE__*/jsx(IconContainer$2, {\n      children: /*#__PURE__*/jsx(Img, {\n        src: props.walletIconURL,\n        width: iconSize.xl,\n        height: iconSize.xl\n      })\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"lg\"\n    }), /*#__PURE__*/jsxs(TitleContainer, {\n      children: [/*#__PURE__*/jsx(ModalTitle, {\n        children: \"Connecting your wallet\"\n      }), /*#__PURE__*/jsx(Spinner, {\n        size: \"md\",\n        color: \"link\"\n      })]\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"md\"\n    }), /*#__PURE__*/jsxs(Desc$2, {\n      children: [\"Connect your wallet through the \", props.walletName, \" \", isMobile() ? \"application\" : \"pop-up\"]\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsxs(HelperLink, {\n      target: \"_blank\",\n      href: props.supportLink,\n      children: [\"Having troubles connecting to \", props.walletName, \"?\"]\n    })]\n  });\n};\n\nconst TitleContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${spacing.md};\n  ${media.mobile} {\n    flex-direction: column;\n    align-items: center;\n    gap: ${spacing.xl};\n  }\n`;\nconst IconContainer$2 = styled.div`\n  display: flex;\n  margin-top: ${spacing.lg};\n  ${media.mobile} {\n    justify-content: center;\n    margin-top: 0;\n  }\n`;\nconst Desc$2 = styled(ModalDescription)`\n  ${media.mobile} {\n    padding: 0 ${spacing.lg};\n  }\n`;\n\nfunction useSupportedWallet(id) {\n  const context = useThirdwebWallet();\n  const wallet = context?.wallets.find(_wallet => _wallet.id === id);\n\n  if (!wallet) {\n    throw new Error(`Wallet with id \"${id}\" is not supported`);\n  }\n\n  return wallet;\n}\n\nconst CoinbaseWalletSetup = _ref => {\n  let {\n    onBack\n  } = _ref;\n  const coinbaseWalletObj = useSupportedWallet(\"coinbaseWallet\");\n  return /*#__PURE__*/jsx(ConnectingScreen, {\n    onBack: onBack,\n    walletName: coinbaseWalletObj.meta.name,\n    walletIconURL: coinbaseWalletObj.meta.iconURL,\n    supportLink: \"https://help.coinbase.com/en/wallet/other-topics/troubleshooting-and-tips\"\n  });\n};\n\nconst QRCode = props => {\n  return /*#__PURE__*/jsxs(\"div\", {\n    style: {\n      position: \"relative\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: [props.qrCodeUri ? /*#__PURE__*/jsx(FadeIn, {\n      children: /*#__PURE__*/jsx(QRCodeContainer, {\n        children: /*#__PURE__*/jsx(StyledReactQrCode, {\n          value: props.qrCodeUri\n        })\n      })\n    }) : /*#__PURE__*/jsx(QRSkeleton, {\n      height: \"200px\",\n      width: \"200px\"\n    }), props.QRIcon && /*#__PURE__*/jsx(QrCodeIconContainer, {\n      children: props.QRIcon\n    })]\n  });\n};\n\nconst QrCodeIconContainer = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: white;\n  border-radius: ${radius.md};\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  padding: 4px;\n`;\nconst QRCodeContainer = styled.div`\n  background: white;\n  padding: ${spacing.xxs};\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  border-radius: ${radius.md};\n  box-shadow: ${shadow.md};\n`;\nconst StyledReactQrCode = styled(ReactQrCode)`\n  width: 200px;\n  height: 200px;\n  border-radius: ${radius.md};\n\n  ${media.mobile} {\n    width: 150px;\n    height: 150px;\n  }\n`;\nconst QRSkeleton = styled(Skeleton)`\n  width: 200px;\n  height: 200px;\n  border-radius: ${radius.md};\n  ${media.mobile} {\n    width: 150px;\n    height: 150px;\n  }\n`;\nconst Apple = \"ipfs://Qmcyb1akWqyu8W4DgVWzZUozrCkfES8ow36jNhjs7arwvc/AppleGray.svg\";\nconst Chrome = \"ipfs://QmPu4UKsektZixeZN4ixi8Ji9KbMuwcRKAp3JRK4jrcaMK/Chrome.svg\";\nconst GooglePlay = \"ipfs://QmTSu87iXWpfcCgy15DX3Mgp1Rqb8zFAwXdbLNh6WxmpC4/GooglePlay.svg\";\n\nconst GetStartedScreen = props => {\n  const [showScreen, setShowScreen] = useState(\"base\");\n  const isScanScreen = showScreen === \"android-scan\" || showScreen === \"ios-scan\";\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(BackButton, {\n      style: isScanScreen ? {\n        position: \"absolute\",\n        top: spacing.lg,\n        left: spacing.lg\n      } : undefined,\n      onClick: () => {\n        if (showScreen === \"base\") {\n          props.onBack();\n        } else {\n          setShowScreen(\"base\");\n        }\n      }\n    }), showScreen === \"android-scan\" && /*#__PURE__*/jsx(ScanScreen$2, {\n      platformIcon: /*#__PURE__*/jsx(Img, {\n        src: GooglePlay,\n        width: iconSize.md,\n        height: iconSize.md\n      }),\n      url: props.googlePlayStoreLink,\n      platform: \"Android\",\n      walletName: props.walletName,\n      walletIconURL: props.walletIconURL\n    }), showScreen === \"ios-scan\" && /*#__PURE__*/jsx(ScanScreen$2, {\n      platformIcon: /*#__PURE__*/jsx(Img, {\n        width: iconSize.md,\n        height: iconSize.md,\n        src: Apple\n      }),\n      url: props.appleStoreLink,\n      platform: \"iOS\",\n      walletName: props.walletName,\n      walletIconURL: props.walletIconURL\n    }), showScreen === \"base\" && /*#__PURE__*/jsxs(Fragment, {\n      children: [/*#__PURE__*/jsx(Spacer, {\n        y: \"lg\"\n      }), /*#__PURE__*/jsx(Img, {\n        src: props.walletIconURL,\n        width: iconSize.xl,\n        height: iconSize.xl,\n        alt: \"\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"lg\"\n      }), /*#__PURE__*/jsxs(ModalTitle, {\n        children: [\"Get started with \", props.walletName]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"sm\"\n      }), /*#__PURE__*/jsx(ModalDescription, {\n        children: \"Download your preferred option and refresh this page\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsxs(ButtonLink, {\n        target: \"_blank\",\n        href: props.chromeExtensionLink,\n        children: [/*#__PURE__*/jsx(Img, {\n          width: iconSize.lg,\n          height: iconSize.lg,\n          src: Chrome\n        }), /*#__PURE__*/jsx(\"span\", {\n          children: \"Download Chrome Extension\"\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xs\"\n      }), /*#__PURE__*/jsxs(ButtonLink, {\n        as: \"button\",\n        target: \"_blank\",\n        onClick: () => {\n          setShowScreen(\"android-scan\");\n        },\n        children: [/*#__PURE__*/jsx(Img, {\n          width: iconSize.lg,\n          height: iconSize.lg,\n          src: GooglePlay\n        }), /*#__PURE__*/jsx(\"span\", {\n          children: \"Download on Google Play\"\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xs\"\n      }), /*#__PURE__*/jsxs(ButtonLink, {\n        as: \"button\",\n        target: \"_blank\",\n        onClick: () => {\n          setShowScreen(\"ios-scan\");\n        },\n        children: [/*#__PURE__*/jsx(Img, {\n          width: iconSize.lg,\n          height: iconSize.lg,\n          src: Apple\n        }), /*#__PURE__*/jsx(\"span\", {\n          children: \"Download on App Store\"\n        })]\n      })]\n    }), isScanScreen && /*#__PURE__*/jsxs(Fragment, {\n      children: [/*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsxs(HelperLink, {\n        as: \"button\",\n        onClick: props.onBack,\n        style: {\n          textAlign: \"center\",\n          display: \"block\",\n          width: \"100%\"\n        },\n        children: [\"I\", `'`, \"ve finished setting up my \", props.walletName, \" on mobile\"]\n      })]\n    })]\n  });\n};\n\nconst ScanScreen$2 = props => {\n  return /*#__PURE__*/jsxs(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/jsx(QRCode, {\n      qrCodeUri: props.url,\n      QRIcon: /*#__PURE__*/jsx(Img, {\n        src: props.walletIconURL,\n        width: iconSize.lg,\n        height: iconSize.lg\n      })\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsxs(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: spacing.sm,\n        alignItems: \"center\"\n      },\n      children: [props.platformIcon, /*#__PURE__*/jsxs(ModalTitle, {\n        style: {\n          fontSize: fontSize.xl\n        },\n        children: [\"Install \", props.walletName, \" for \", props.platform]\n      })]\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"lg\"\n    }), /*#__PURE__*/jsxs(ModalDescription, {\n      children: [\"Scan QR with your phone to download \", /*#__PURE__*/jsx(\"br\", {}), \" \", props.walletName, \" for\", \" \", props.platform]\n    })]\n  });\n};\n\nconst ButtonLink = styled.a`\n  all: unset;\n  text-decoration: none;\n  padding: ${spacing.sm} ${spacing.md};\n  border-radius: ${radius.sm};\n  display: flex;\n  align-items: center;\n  gap: ${spacing.md};\n  cursor: pointer;\n  box-sizing: border-box;\n  width: 100%;\n  color: ${p => p.theme.text.neutral};\n  background: ${p => p.theme.bg.elevated};\n  transition: 100ms ease;\n  &:hover {\n    background: ${p => p.theme.bg.highlighted};\n    text-decoration: none;\n    color: ${p => p.theme.text.neutral};\n  }\n`;\n\nconst CoinbaseGetStarted = _ref => {\n  let {\n    onBack\n  } = _ref;\n  const coinbaseWalletObj = useSupportedWallet(\"coinbaseWallet\");\n  return /*#__PURE__*/jsx(GetStartedScreen, {\n    walletIconURL: coinbaseWalletObj.meta.iconURL,\n    walletName: coinbaseWalletObj.meta.name,\n    chromeExtensionLink: \"https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad\",\n    googlePlayStoreLink: \"https://play.google.com/store/apps/details?id=org.toshi\",\n    appleStoreLink: \"https://apps.apple.com/us/app/coinbase-wallet-nfts-crypto/id1278383455\",\n    onBack: onBack\n  });\n};\n\nconst ScanScreen$1 = props => {\n  const walletName = props.walletName.toLowerCase().includes(\"wallet\") ? props.walletName : `${props.walletName} wallet`;\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(BackButton, {\n      onClick: props.onBack,\n      style: {\n        position: \"absolute\",\n        zIndex: 10,\n        left: spacing.lg,\n        top: spacing.lg\n      }\n    }), /*#__PURE__*/jsxs(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/jsx(QRCode, {\n        qrCodeUri: props.qrCodeUri,\n        QRIcon: /*#__PURE__*/jsx(Img, {\n          width: iconSize.lg,\n          height: iconSize.lg,\n          src: props.walletIconURL\n        })\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsxs(ModalTitle, {\n        children: [\"Scan with \", walletName, \" \"]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"md\"\n      }), /*#__PURE__*/jsxs(ModalDescription, {\n        children: [\"Scan this QR code with your phone \", /*#__PURE__*/jsx(\"br\", {}), \"camera or \", walletName, \" to connect\"]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"md\"\n      }), /*#__PURE__*/jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: /*#__PURE__*/jsx(Spinner, {\n          size: \"md\",\n          color: \"link\"\n        })\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsxs(LinkButton, {\n        onClick: props.onGetStarted,\n        children: [`Don't`, \" have \", walletName, \"?\"]\n      })]\n    })]\n  });\n};\n\nconst LinkButton = styled.button`\n  all: unset;\n  color: ${p => p.theme.link.primary};\n  font-size: ${fontSize.sm};\n  cursor: pointer;\n  &:hover {\n    color: ${p => p.theme.link.primaryHover};\n  }\n`;\n\nconst ScanCoinbase = props => {\n  const createInstance = useCreateWalletInstance();\n  const [qrCodeUri, setQrCodeUri] = useState(undefined);\n  const twWalletContext = useThirdwebWallet();\n  const {\n    onConnected\n  } = props;\n  const coinbaseWalletObj = useSupportedWallet(\"coinbaseWallet\");\n  useEffect(() => {\n    if (!twWalletContext) {\n      return;\n    }\n\n    (async () => {\n      const wallet = createInstance(coinbaseWalletObj);\n      wallet.getQrUrl().then(uri => {\n        setQrCodeUri(uri || undefined);\n      });\n      wallet.connect({\n        chainId: twWalletContext.chainToConnect?.chainId\n      }).then(() => {\n        twWalletContext.handleWalletConnect(wallet);\n        onConnected();\n      });\n    })();\n  }, [createInstance, twWalletContext, onConnected, coinbaseWalletObj]);\n  return /*#__PURE__*/jsx(ScanScreen$1, {\n    onBack: props.onBack,\n    onGetStarted: props.onGetStarted,\n    qrCodeUri: qrCodeUri,\n    walletName: coinbaseWalletObj.meta.name,\n    walletIconURL: coinbaseWalletObj.meta.iconURL\n  });\n};\n\nconst MetamaskConnecting = props => {\n  const metamask = useSupportedWallet(\"metamask\");\n  return /*#__PURE__*/jsx(ConnectingScreen, {\n    onBack: props.onBack,\n    walletName: metamask.meta.name,\n    walletIconURL: metamask.meta.iconURL,\n    supportLink: \"https://support.metamask.io/hc/en-us/articles/4406430256539-User-Guide-Troubleshooting\"\n  });\n};\n\nconst MetamaskGetStarted = props => {\n  const wallet = useSupportedWallet(\"metamask\");\n  return /*#__PURE__*/jsx(GetStartedScreen, {\n    walletIconURL: wallet.meta.iconURL,\n    walletName: wallet.meta.name,\n    chromeExtensionLink: \"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\",\n    googlePlayStoreLink: \"https://play.google.com/store/apps/details?id=io.metamask\",\n    appleStoreLink: \"https://apps.apple.com/us/app/metamask-blockchain-wallet/id1438144202\",\n    onBack: props.onBack\n  });\n};\n\nconst ScanMetamask = props => {\n  const metamaskWallet = useSupportedWallet(\"metamask\");\n  const createInstance = useCreateWalletInstance();\n  const [qrCodeUri, setQrCodeUri] = useState();\n  const twWalletContext = useThirdwebWallet();\n  const {\n    onConnected\n  } = props;\n  useEffect(() => {\n    if (!twWalletContext) {\n      return;\n    }\n\n    const metamask = createInstance(metamaskWallet);\n    metamask.connectWithQrCode({\n      chainId: twWalletContext.chainToConnect?.chainId,\n\n      onQrCodeUri(uri) {\n        setQrCodeUri(uri);\n      },\n\n      onConnected() {\n        twWalletContext.handleWalletConnect(metamask);\n        onConnected();\n      }\n\n    });\n  }, [createInstance, twWalletContext, onConnected, metamaskWallet]);\n  return /*#__PURE__*/jsx(ScanScreen$1, {\n    onBack: props.onBack,\n    onGetStarted: props.onGetStarted,\n    qrCodeUri: qrCodeUri,\n    walletName: metamaskWallet.meta.name,\n    walletIconURL: metamaskWallet.meta.iconURL\n  });\n};\n\nfunction Steps(_ref) {\n  let {\n    step\n  } = _ref;\n  return /*#__PURE__*/jsxs(StepContainer, {\n    children: [/*#__PURE__*/jsx(Circle, {\n      \"data-active\": true\n    }), /*#__PURE__*/jsx(Line, {\n      \"data-active\": step === 2\n    }), /*#__PURE__*/jsx(Circle, {\n      \"data-active\": step === 2\n    })]\n  });\n}\n\nconst StepContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 130px;\n  padding: ${spacing.xs};\n\n  ${media.mobile} {\n    margin: 0 auto;\n  }\n`;\nconst Circle = styled.div`\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  background-color: ${p => p.theme.bg.highlighted};\n  box-shadow: 0 0 0 3px ${p => p.theme.bg.base},\n    0 0 0 5px ${p => p.theme.bg.highlighted};\n\n  &[data-active=\"true\"] {\n    background-color: ${p => p.theme.link.primary};\n    box-shadow: 0 0 0 3px ${p => p.theme.bg.base},\n      0 0 0 5px ${p => p.theme.link.primary};\n\n    position: relative;\n    z-index: 2;\n  }\n`;\nconst Line = styled.div`\n  flex-grow: 1;\n  height: 4px;\n  background-color: ${p => p.theme.bg.highlighted};\n  &[data-active=\"true\"] {\n    background-color: ${p => p.theme.link.primary};\n  }\n`;\n\nconst SelectpersonalWallet = props => {\n  const safeWalletObj = useSupportedWallet(\"Safe\"); // remove gnosis safe from the list of wallets\n\n  const walletsMeta = props.walletsMeta.filter(w => w.id !== \"Safe\");\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(BackButton, {\n      onClick: props.onBack\n    }), /*#__PURE__*/jsx(IconContainer$1, {\n      children: /*#__PURE__*/jsx(Img, {\n        src: safeWalletObj.meta.iconURL,\n        width: iconSize.xl,\n        height: iconSize.xl\n      })\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"lg\"\n    }), /*#__PURE__*/jsx(ModalTitle, {\n      children: \"Choose your Wallet\"\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"sm\"\n    }), /*#__PURE__*/jsx(Desc$1, {\n      children: \"Select a personal wallet to connect to your Safe\"\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsx(Steps, {\n      step: 1\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"lg\"\n    }), /*#__PURE__*/jsx(WalletSelection, {\n      walletsMeta: walletsMeta\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsx(HelperLink, {\n      target: \"_blank\",\n      href: \"https://docs.safe.global/learn/what-is-a-smart-contract-account\",\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"What is a Safe?\"\n    })]\n  });\n};\n\nconst IconContainer$1 = styled.div`\n  display: flex;\n  margin-top: ${spacing.lg};\n  ${media.mobile} {\n    justify-content: center;\n    margin-top: 0;\n  }\n`;\nconst Desc$1 = styled(ModalDescription)`\n  ${media.mobile} {\n    padding: 0 ${spacing.lg};\n  }\n`;\n\nconst FormField = props => {\n  return /*#__PURE__*/jsxs(\"div\", {\n    children: [/*#__PURE__*/jsx(Label, {\n      htmlFor: props.id,\n      children: props.label\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xs\"\n    }), /*#__PURE__*/jsx(Input, {\n      variant: \"outline\",\n      required: props.required,\n      name: props.name,\n      autoComplete: props.autocomplete,\n      id: props.id,\n      onChange: e => props.onChange(e.target.value),\n      value: props.value,\n      type: props.type,\n      \"data-error\": !!props.errorMessage,\n      placeholder: props.placeholder\n    }), props.errorMessage && /*#__PURE__*/jsxs(Fragment, {\n      children: [/*#__PURE__*/jsx(Spacer, {\n        y: \"xs\"\n      }), /*#__PURE__*/jsx(ErrorMessage$1, {\n        children: props.errorMessage\n      })]\n    })]\n  });\n};\n\nconst gnosisAddressPrefixToChainId = {\n  eth: 1,\n  matic: 137,\n  avax: 43114,\n  bnb: 56,\n  oeth: 10,\n  gor: 5\n};\n\nconst SafeForm = props => {\n  const safeWalletObj = useSupportedWallet(\"Safe\");\n  const activeWallet = useWallet();\n  const connect = useConnect();\n  const activeChain = useActiveChain();\n  const connectedChainId = useChainId();\n  const [safeAddress, setSafeAddress] = useState(\"\");\n  const [safeChainId, setSafeChainId] = useState(-1);\n  const [safeConnectError, setSafeConnectError] = useState(false);\n  const [switchError, setSwitchError] = useState(false);\n  const [switchingNetwork, setSwitchingNetwork] = useState(false);\n  const connectionStatus = useConnectionStatus();\n  const requiresConfirmation = useIsNonLocalWallet();\n  const chains = useSupportedChains(); // put supported chains first\n\n  const supportedChains = chains.filter(c => SafeSupportedChainsSet.has(c.chainId));\n  const selectedSafeChain = supportedChains.find(c => c.chainId === safeChainId);\n  const testnets = supportedChains.filter(c => c.testnet);\n  const mainnets = supportedChains.filter(c => !c.testnet); // if there are more than one mainnet and testnet, group them\n\n  const useOptGroup = mainnets.length > 0 && testnets.length > 0;\n\n  const handleSubmit = async () => {\n    if (!selectedSafeChain || !activeWallet || !activeChain) {\n      return;\n    }\n\n    setSafeConnectError(false);\n\n    try {\n      await connect(safeWalletObj, {\n        chain: selectedSafeChain,\n        personalWallet: activeWallet,\n        safeAddress\n      });\n      props.onConnect();\n    } catch (e) {\n      console.error(e);\n      setSafeConnectError(true);\n    }\n  };\n\n  const mismatch = safeChainId !== -1 && connectedChainId !== safeChainId;\n  const isValidAddress = utils.isAddress(safeAddress);\n  const disableNetworkSelection = supportedChains.length === 1;\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(BackButton, {\n      onClick: props.onBack\n    }), /*#__PURE__*/jsx(IconContainer, {\n      children: /*#__PURE__*/jsx(Img, {\n        src: safeWalletObj.meta.iconURL,\n        width: iconSize.xl,\n        height: iconSize.xl\n      })\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"lg\"\n    }), /*#__PURE__*/jsx(ModalTitle, {\n      children: \"Enter your Safe Address & Network \"\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"md\"\n    }), /*#__PURE__*/jsxs(Desc, {\n      children: [\"You can find your safe address in\", \" \", /*#__PURE__*/jsx(HelperLink, {\n        target: \"_blank\",\n        href: \"https://app.safe.global/home\",\n        style: {\n          display: \"inline\"\n        },\n        children: \"Safe Dashboard\"\n      })]\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"lg\"\n    }), /*#__PURE__*/jsx(Steps, {\n      step: 2\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsxs(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        handleSubmit();\n      },\n      children: [/*#__PURE__*/jsx(FormField, {\n        name: \"safeAddress\",\n        id: \"safeAddress\",\n        errorMessage: safeAddress && !isValidAddress ? \"Invalid Safe Address\" : undefined,\n        autocomplete: \"on\",\n        onChange: value => {\n          setSafeConnectError(false);\n\n          if (value.length > 4) {\n            const prefix = value.split(\":\")[0];\n\n            if (prefix && prefix in gnosisAddressPrefixToChainId) {\n              setSafeChainId(gnosisAddressPrefixToChainId[prefix]);\n              setSafeAddress(value.slice(prefix.length + 1));\n            } else {\n              setSafeAddress(value);\n            }\n          } else {\n            setSafeAddress(value);\n          }\n        },\n        label: \"Safe Address\",\n        type: \"text\",\n        value: safeAddress,\n        required: true,\n        placeholder: \"0x123...\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"lg\"\n      }), /*#__PURE__*/jsx(Label, {\n        htmlFor: \"safeNetwork\",\n        children: \"Safe Network\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xs\"\n      }), /*#__PURE__*/jsxs(\"div\", {\n        style: {\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/jsxs(NetworkSelect, {\n          \"data-error\": supportedChains.length === 0,\n          required: true,\n          name: \"safeNetwork\",\n          id: \"safeNetwork\",\n          value: safeChainId,\n          disabled: disableNetworkSelection,\n          placeholder: \"Select Network your safe is deployed to\",\n          onChange: e => {\n            setSafeConnectError(false);\n            setSwitchError(false);\n            setSafeChainId(Number(e.target.value));\n          },\n          children: [!disableNetworkSelection && /*#__PURE__*/jsx(\"option\", {\n            value: \"\",\n            hidden: true,\n            children: \"Select network your safe is deployed on\"\n          }), useOptGroup ? /*#__PURE__*/jsxs(Fragment, {\n            children: [/*#__PURE__*/jsx(\"optgroup\", {\n              label: \"Mainnets\",\n              children: mainnets.map(chain => {\n                return /*#__PURE__*/jsx(\"option\", {\n                  value: chain.chainId,\n                  children: chain.name\n                }, chain.chainId);\n              })\n            }), /*#__PURE__*/jsx(\"optgroup\", {\n              label: \"Testnets\",\n              children: testnets.map(chain => {\n                return /*#__PURE__*/jsx(\"option\", {\n                  value: chain.chainId,\n                  children: chain.name\n                }, chain.chainId);\n              })\n            })]\n          }) : supportedChains.map(chain => {\n            return /*#__PURE__*/jsx(\"option\", {\n              value: chain.chainId,\n              children: chain.name\n            }, chain.chainId);\n          })]\n        }), !disableNetworkSelection && /*#__PURE__*/jsx(ChevronDownIcon, {\n          width: iconSize.sm,\n          height: iconSize.sm,\n          style: {\n            position: \"absolute\",\n            top: \"50%\",\n            right: spacing.sm,\n            transform: \"translateY(-50%)\",\n            pointerEvents: \"none\"\n          }\n        })]\n      }), supportedChains.length === 0 && /*#__PURE__*/jsxs(Fragment, {\n        children: [/*#__PURE__*/jsx(Spacer, {\n          y: \"sm\"\n        }), /*#__PURE__*/jsxs(ErrorMessage$1, {\n          children: [\" \", \"Can not use Safe: No Safe supported chains are configured in App\"]\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"sm\"\n      }), safeConnectError && /*#__PURE__*/jsxs(ErrorMessage$1, {\n        style: {\n          display: \"flex\",\n          gap: spacing.sm,\n          alignItems: \"center\",\n          fontSize: fontSize.sm\n        },\n        children: [/*#__PURE__*/jsx(ExclamationTriangleIcon, {\n          width: iconSize.sm,\n          height: iconSize.sm\n        }), /*#__PURE__*/jsxs(\"span\", {\n          children: [\"Could not connect to Safe. \", /*#__PURE__*/jsx(\"br\", {}), \"Make sure safe address and network are correct.\"]\n        })]\n      }), switchError && /*#__PURE__*/jsxs(ErrorMessage$1, {\n        style: {\n          display: \"flex\",\n          gap: spacing.sm,\n          alignItems: \"center\",\n          fontSize: fontSize.sm\n        },\n        children: [/*#__PURE__*/jsx(ExclamationTriangleIcon, {\n          width: iconSize.sm,\n          height: iconSize.sm\n        }), /*#__PURE__*/jsx(\"span\", {\n          children: \"Failed to switch network.\"\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"flex-end\"\n        },\n        children: mismatch ? /*#__PURE__*/jsxs(Button, {\n          type: \"button\",\n          variant: \"secondary\",\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: spacing.sm\n          },\n          onClick: async () => {\n            if (!activeWallet) {\n              throw new Error(\"No active wallet\");\n            }\n\n            setSafeConnectError(false);\n            setSwitchError(false);\n            setSwitchingNetwork(true);\n\n            try {\n              await activeWallet.switchChain(safeChainId);\n            } catch (e) {\n              setSwitchError(true);\n            } finally {\n              setSwitchingNetwork(false);\n            }\n          },\n          children: [\" \", switchingNetwork ? \"Switching\" : \"Switch Network\", switchingNetwork && /*#__PURE__*/jsx(Spinner, {\n            size: \"sm\",\n            color: \"primary\"\n          })]\n        }) : /*#__PURE__*/jsxs(Button, {\n          variant: \"inverted\",\n          type: \"submit\",\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: spacing.sm\n          },\n          children: [connectionStatus === \"connecting\" ? \"Connecting\" : \"Connect to Safe\", connectionStatus === \"connecting\" && /*#__PURE__*/jsx(Spinner, {\n            size: \"sm\",\n            color: \"inverted\"\n          })]\n        })\n      }), switchingNetwork && requiresConfirmation && /*#__PURE__*/jsx(ConfirmMessage, {\n        children: \" Confirm in your wallet \"\n      })]\n    })]\n  });\n};\n\nconst ConfirmMessage = styled.p`\n  font-size: ${fontSize.sm};\n  color: ${p => p.theme.link.primary};\n  text-align: right;\n`;\nconst NetworkSelect = styled.select`\n  width: 100%;\n  padding: ${spacing.sm};\n  box-sizing: border-box;\n  outline: none;\n  border: none;\n  border-radius: 6px;\n  color: ${p => p.theme.text.neutral};\n  background: transparent;\n  font-size: ${fontSize.md};\n  box-shadow: 0 0 0 1.5px ${p => p.theme.input.outline};\n  appearance: none;\n\n  &:focus {\n    box-shadow: 0 0 0 2px ${p => p.theme.input.focusRing};\n  }\n\n  &:invalid {\n    color: ${p => p.theme.text.secondary};\n  }\n  &[data-error=\"true\"] {\n    box-shadow: 0 0 0 1.5px ${p => p.theme.input.errorRing};\n  }\n\n  &[disabled] {\n    opacity: 1;\n    cursor: not-allowed;\n  }\n`;\nconst IconContainer = styled.div`\n  display: flex;\n  margin-top: ${spacing.lg};\n  ${media.mobile} {\n    justify-content: center;\n    margin-top: 0;\n  }\n`;\nconst Desc = styled(ModalDescription)`\n  ${media.mobile} {\n    padding: 0 ${spacing.lg};\n  }\n`;\nconst walletName = MetaMaskWallet.meta.name;\nconst walletIconURL = MetaMaskWallet.meta.iconURL;\nconst chromeExtensionLink = \"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\";\nconst googlePlayStoreLink = \"https://play.google.com/store/apps/details?id=io.metamask\";\nconst appleStoreLink = \"https://apps.apple.com/us/app/metamask-blockchain-wallet/id1438144202\";\n\nconst GetStartedWithWallets = props => {\n  const [showScreen, setShowScreen] = useState(\"base\");\n  const isScanScreen = showScreen === \"android-scan\" || showScreen === \"ios-scan\";\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [/*#__PURE__*/jsx(BackButton, {\n      style: isScanScreen ? {\n        position: \"absolute\",\n        top: spacing.lg,\n        left: spacing.lg\n      } : undefined,\n      onClick: () => {\n        if (showScreen === \"base\") {\n          props.onBack();\n        } else {\n          setShowScreen(\"base\");\n        }\n      }\n    }), showScreen === \"android-scan\" && /*#__PURE__*/jsx(ScanScreen, {\n      platformIcon: /*#__PURE__*/jsx(Img, {\n        src: GooglePlay,\n        width: iconSize.md,\n        height: iconSize.md\n      }),\n      url: googlePlayStoreLink,\n      platform: \"Android\",\n      walletName: walletName,\n      walletIconURL: walletIconURL\n    }), showScreen === \"ios-scan\" && /*#__PURE__*/jsx(ScanScreen, {\n      platformIcon: /*#__PURE__*/jsx(Img, {\n        src: Apple,\n        width: iconSize.md,\n        height: iconSize.md\n      }),\n      url: appleStoreLink,\n      platform: \"iOS\",\n      walletName: walletName,\n      walletIconURL: walletIconURL\n    }), showScreen === \"base\" && /*#__PURE__*/jsxs(Fragment, {\n      children: [/*#__PURE__*/jsx(Spacer, {\n        y: \"lg\"\n      }), /*#__PURE__*/jsx(ModalTitle, {\n        children: \" Get started with EVM wallets \"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"md\"\n      }), /*#__PURE__*/jsx(ModalDescription, {\n        children: \"An EVM Wallet is your gateway to interact with web3 apps on Ethereum and other custom blockchains.\"\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsxs(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: spacing.md,\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/jsx(SecondaryText, {\n          children: \"We recommend\"\n        }), /*#__PURE__*/jsxs(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: spacing.xs,\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/jsx(Img, {\n            src: walletIconURL,\n            width: iconSize.md,\n            height: iconSize.md\n          }), /*#__PURE__*/jsx(NeutralText, {\n            children: \"MetaMask\"\n          })]\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"md\"\n      }), /*#__PURE__*/jsxs(\"div\", {\n        children: [/*#__PURE__*/jsxs(ButtonLink, {\n          target: \"_blank\",\n          href: chromeExtensionLink,\n          children: [/*#__PURE__*/jsx(Img, {\n            src: Chrome,\n            width: iconSize.lg,\n            height: iconSize.lg\n          }), /*#__PURE__*/jsx(\"span\", {\n            children: \"Download Chrome Extension\"\n          })]\n        }), /*#__PURE__*/jsx(Spacer, {\n          y: \"xs\"\n        }), /*#__PURE__*/jsxs(ButtonLink, {\n          as: \"button\",\n          target: \"_blank\",\n          onClick: () => {\n            if (isMobile()) {\n              window.open(googlePlayStoreLink, \"_blank\");\n            } else {\n              setShowScreen(\"android-scan\");\n            }\n          },\n          children: [/*#__PURE__*/jsx(Img, {\n            src: GooglePlay,\n            width: iconSize.lg,\n            height: iconSize.lg\n          }), /*#__PURE__*/jsx(\"span\", {\n            children: \"Download on Google Play\"\n          })]\n        }), /*#__PURE__*/jsx(Spacer, {\n          y: \"xs\"\n        }), /*#__PURE__*/jsxs(ButtonLink, {\n          as: \"button\",\n          target: \"_blank\",\n          onClick: () => {\n            if (isMobile()) {\n              window.open(appleStoreLink, \"_blank\");\n            } else {\n              setShowScreen(\"ios-scan\");\n            }\n          },\n          children: [/*#__PURE__*/jsx(Img, {\n            src: Apple,\n            width: iconSize.lg,\n            height: iconSize.lg\n          }), /*#__PURE__*/jsx(\"span\", {\n            children: \"Download on App Store\"\n          })]\n        })]\n      }), /*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsx(HelperLink, {\n        target: \"_blank\",\n        href: \"https://ethereum.org/en/wallets/find-wallet/\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Learn more about wallets\"\n      })]\n    }), isScanScreen && /*#__PURE__*/jsxs(Fragment, {\n      children: [/*#__PURE__*/jsx(Spacer, {\n        y: \"xl\"\n      }), /*#__PURE__*/jsxs(HelperLink, {\n        as: \"button\",\n        onClick: props.onBack,\n        style: {\n          textAlign: \"center\",\n          display: \"block\",\n          width: \"100%\"\n        },\n        children: [\"I\", `'`, \"ve finished setting up my \", walletName, \" mobile wallet\"]\n      })]\n    })]\n  });\n};\n\nconst ScanScreen = props => {\n  return /*#__PURE__*/jsxs(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/jsx(QRCode, {\n      qrCodeUri: props.url,\n      QRIcon: /*#__PURE__*/jsx(Img, {\n        src: props.walletIconURL,\n        width: iconSize.lg,\n        height: iconSize.lg\n      })\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"xl\"\n    }), /*#__PURE__*/jsxs(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: spacing.sm,\n        alignItems: \"center\"\n      },\n      children: [props.platformIcon, /*#__PURE__*/jsxs(ModalTitle, {\n        style: {\n          fontSize: fontSize.xl\n        },\n        children: [\"Install \", props.walletName, \" for \", props.platform]\n      })]\n    }), /*#__PURE__*/jsx(Spacer, {\n      y: \"lg\"\n    }), /*#__PURE__*/jsxs(ModalDescription, {\n      children: [\"Scan QR with your phone to download \", /*#__PURE__*/jsx(\"br\", {}), \" \", props.walletName, \" for\", \" \", props.platform]\n    })]\n  });\n};\n\nconst SecondaryText = styled.p`\n  font-size: ${fontSize.md};\n  color: ${p => p.theme.text.secondary};\n  margin: 0;\n`;\nconst NeutralText = styled.p`\n  font-size: ${fontSize.md};\n  color: ${p => p.theme.text.neutral};\n  margin: 0;\n`;\n/**\n * if the `options.for` promise takes longer than the `options.moreThan` time, `options.do` callback function will be called\n *\n * this is useful to prevent showing the loading animation for a super short time that looks like flickering\n * @param options\n */\n\nasync function ifWaiting(options) {\n  const id = setTimeout(options.do, options.moreThan);\n  await options.for;\n  clearTimeout(id);\n}\n\nconst ConnectModal = () => {\n  const modalTheme = useModalTheme();\n  const isConnectingToSafe = useIsConnectingToSafe();\n  const showScreen = useScreen();\n  const setShowScreen = useSetScreen();\n  const setIsConnectingToSafe = useSetIsConnectingToSafe();\n  const isWalletModalOpen = useIsWalletModalOpen();\n  const setIsWalletModalOpen = useSetIsWalletModalOpen();\n  const connectionStatus = useConnectionStatus();\n  const disconnect = useDisconnect();\n  const connect = useConnect();\n  const wallets = useWallets();\n  const installedWallets = useInstalledWallets(); // to hide the modal temporarily when showing the third party Modal to avoid z-index issues\n\n  const [hideModal, setHideModal] = useState(false);\n  const closeModalAndReset = useCallback(() => {\n    setShowScreen(\"walletList\");\n    setIsConnectingToSafe(false);\n    setIsWalletModalOpen(false);\n  }, [setIsConnectingToSafe, setIsWalletModalOpen, setShowScreen]);\n  const onConnect = useCallback(() => {\n    if (isConnectingToSafe) {\n      setShowScreen(\"safe/form\");\n    } else {\n      closeModalAndReset();\n    }\n  }, [closeModalAndReset, isConnectingToSafe, setShowScreen]);\n  const onConnectError = useCallback(() => {\n    if (isConnectingToSafe) {\n      setShowScreen(\"safe/select-wallet\");\n    } else {\n      setShowScreen(\"walletList\");\n    }\n  }, [isConnectingToSafe, setShowScreen]);\n  const handleBack = useCallback(() => {\n    if (isConnectingToSafe) {\n      setShowScreen(\"safe/select-wallet\");\n    } else {\n      setShowScreen(\"walletList\");\n    }\n  }, [isConnectingToSafe, setShowScreen]);\n  const walletsMeta = wallets.map(wallet => ({\n    id: wallet.id,\n    name: wallet.meta.name,\n    iconURL: wallet.meta.iconURL,\n    installed: wallet.id in installedWallets && installedWallets[wallet.id],\n    onClick: async () => {\n      // Metamask\n      if (wallet.id === \"metamask\") {\n        if (installedWallets.metamask) {\n          try {\n            await ifWaiting({\n              for: connect(wallet, {}),\n              moreThan: 100,\n              do: () => {\n                setShowScreen(\"metamask/connecting\");\n              }\n            });\n            onConnect();\n          } catch (e) {\n            onConnectError();\n          }\n        } // if metamask is not injected\n        else {\n          // on mobile, open metamask app link\n          if (isMobile()) {\n            window.open(`https://metamask.app.link/dapp/${window.location.toString()}`);\n          } else {\n            // on desktop, show the metamask scan qr code\n            setShowScreen(\"metamask/scan\");\n          }\n        }\n      } // Coinbase Wallet\n      else if (wallet.id === \"coinbaseWallet\") {\n        if (installedWallets.coinbaseWallet) {\n          try {\n            await ifWaiting({\n              for: connect(wallet, {}),\n              moreThan: 100,\n              do: () => {\n                setShowScreen(\"coinbase/connecting\");\n              }\n            });\n            onConnect();\n          } catch (e) {\n            onConnectError();\n          }\n        } else {\n          if (isMobile()) {\n            // coinbase will redirect to download page for coinbase wallet apps\n            connect(wallet, {});\n          } else {\n            setShowScreen(\"coinbase/scan\");\n          }\n        }\n      } // Safe\n      else if (wallet.id === \"Safe\") {\n        setIsConnectingToSafe(true);\n        setShowScreen(\"safe/select-wallet\");\n      } // others ( they handle their own connection flow)\n      else {\n        try {\n          setHideModal(true);\n          await connect(wallet, {});\n          onConnect();\n          setHideModal(false);\n        } catch (e) {\n          onConnectError();\n          setHideModal(false);\n          console.error(e);\n        }\n      }\n    }\n  }));\n  return /*#__PURE__*/jsx(ThemeProvider, {\n    theme: typeof modalTheme === \"object\" ? modalTheme : modalTheme === \"light\" ? lightTheme : darkTheme,\n    children: /*#__PURE__*/jsxs(Modal, {\n      style: {\n        maxWidth: \"480px\"\n      },\n      open: hideModal ? false : isWalletModalOpen,\n      setOpen: value => {\n        setIsWalletModalOpen(value);\n\n        if (!value) {\n          closeModalAndReset();\n          console.log({\n            connectionStatus\n          });\n\n          if (connectionStatus === \"connecting\") {\n            disconnect();\n          }\n        }\n      },\n      children: [showScreen === \"walletList\" && /*#__PURE__*/jsx(WalletSelector, {\n        walletsMeta: walletsMeta,\n        onGetStarted: () => {\n          setShowScreen(\"wallets/get-started\");\n        }\n      }), showScreen === \"metamask/get-started\" && /*#__PURE__*/jsx(MetamaskGetStarted, {\n        onBack: () => {\n          setShowScreen(\"metamask/scan\");\n        }\n      }), showScreen === \"coinbase/get-started\" && /*#__PURE__*/jsx(CoinbaseGetStarted, {\n        onBack: () => {\n          setShowScreen(\"coinbase/scan\");\n        }\n      }), showScreen === \"metamask/connecting\" && /*#__PURE__*/jsx(MetamaskConnecting, {\n        onBack: handleBack\n      }), showScreen === \"metamask/scan\" && /*#__PURE__*/jsx(ScanMetamask, {\n        onBack: handleBack,\n        onConnected: onConnect,\n        onGetStarted: () => {\n          setShowScreen(\"metamask/get-started\");\n        }\n      }), showScreen === \"coinbase/scan\" && /*#__PURE__*/jsx(ScanCoinbase, {\n        onBack: handleBack,\n        onConnected: onConnect,\n        onGetStarted: () => {\n          setShowScreen(\"coinbase/get-started\");\n        }\n      }), showScreen === \"coinbase/connecting\" && /*#__PURE__*/jsx(CoinbaseWalletSetup, {\n        onBack: handleBack\n      }), showScreen === \"safe/select-wallet\" && /*#__PURE__*/jsx(SelectpersonalWallet, {\n        onBack: () => {\n          setIsConnectingToSafe(false);\n          setShowScreen(\"walletList\");\n        },\n        walletsMeta: walletsMeta\n      }), showScreen === \"safe/form\" && /*#__PURE__*/jsx(SafeForm, {\n        onBack: handleBack,\n        onConnect: () => {\n          closeModalAndReset();\n        }\n      }), showScreen === \"wallets/get-started\" && /*#__PURE__*/jsx(GetStartedWithWallets, {\n        onBack: handleBack\n      })]\n    })\n  });\n};\n/**\n *\n * The `<ThirdwebProvider />` component lets you control what networks you want users to connect to,\n * what types of wallets can connect to your app, and the settings for the [Thirdweb SDK](https://docs.thirdweb.com/typescript).\n *\n * @example\n * You can wrap your application with the provider as follows:\n *\n * ```jsx title=\"App.jsx\"\n * import { ThirdwebProvider } from \"@thirdweb-dev/react\";\n *\n * const App = () => {\n *   return (\n *     <ThirdwebProvider>\n *       <YourApp />\n *     </ThirdwebProvider>\n *   );\n * };\n * ```\n *\n */\n\n\nconst ThirdwebProvider = _ref => {\n  let {\n    thirdwebApiKey = DEFAULT_API_KEY,\n    supportedWallets,\n    theme,\n    children,\n    ...restProps\n  } = _ref;\n  return /*#__PURE__*/jsx(WalletUIStatesProvider, {\n    theme: theme,\n    children: /*#__PURE__*/jsx(ThemeProvider, {\n      theme: theme === \"dark\" ? darkTheme : lightTheme,\n      children: /*#__PURE__*/jsxs(ThirdwebProviderCore, {\n        theme: theme,\n        thirdwebApiKey: thirdwebApiKey,\n        supportedWallets: supportedWallets || [metamaskWallet(), coinbaseWallet(), walletConnectV1()],\n        ...restProps,\n        children: [children, /*#__PURE__*/jsx(ConnectModal, {})]\n      })\n    })\n  });\n};\n\nfunction useMetamask() {\n  const connect = useConnect();\n  return useCallback(async connectOptions => {\n    const {\n      metamaskWallet\n    } = await Promise.resolve().then(function () {\n      return metamaskWallet$1;\n    });\n    connect(metamaskWallet(), connectOptions);\n  }, [connect]);\n}\n\nfunction useCoinbaseWallet() {\n  const connect = useConnect();\n  return useCallback(async connectOptions => {\n    const {\n      coinbaseWallet\n    } = await Promise.resolve().then(function () {\n      return coinbaseWallet$1;\n    });\n    connect(coinbaseWallet(), connectOptions);\n  }, [connect]);\n}\n\nfunction usePaperWallet() {\n  const connect = useConnect();\n  return useCallback(async options => {\n    const {\n      paperWallet\n    } = await import('./paperWallet-a013b3fb.browser.esm.js');\n    connect(paperWallet({\n      clientId: options.clientId\n    }), options);\n  }, [connect]);\n}\n\nfunction usePaperWalletUserEmail() {\n  const wallet = useWallet();\n  const queryClient = useQueryClient();\n  const emailQuery = useQuery([wallet?.walletId, \"paper-email\"], () => {\n    if (!wallet || wallet.walletId !== \"PaperWallet\") {\n      throw \"Not connected to Paper Wallet\";\n    }\n\n    return wallet.getEmail();\n  }, {\n    retry: false\n  }); // Invalidate the query when the wallet changes\n\n  useEffect(() => {\n    queryClient.invalidateQueries([wallet?.walletId, \"paper-email\"]);\n  }, [wallet, queryClient]);\n  return emailQuery;\n}\n\nfunction useWalletConnectV1() {\n  const connect = useConnect();\n  return useCallback(async options => {\n    const {\n      walletConnectV1\n    } = await Promise.resolve().then(function () {\n      return walletConnectV1$1;\n    });\n    connect(walletConnectV1(), options);\n  }, [connect]);\n}\n\nfunction useWalletConnect() {\n  const connect = useConnect();\n  return useCallback(async options => {\n    const {\n      walletConnect\n    } = await import('./walletConnect-3e2cac57.browser.esm.js');\n    connect(walletConnect(), options || {});\n  }, [connect]);\n}\n\nexport { ConnectWallet as C, MediaRenderer as M, ThirdwebProvider as T, Web3Button as W, useMetamask as a, useCoinbaseWallet as b, coinbaseWallet as c, usePaperWalletUserEmail as d, usePaperWallet as e, useWalletConnect as f, useWalletConnectV1 as g, useResolvedMediaType as h, ThirdwebNftMedia as i, metamaskWallet as m, useInstalledWallets as u, walletConnectV1 as w };","map":null,"metadata":{},"sourceType":"module"}