{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateEip3770Address = exports.validateEthereumAddress = exports.validateEip3770NetworkPrefix = exports.isValidEip3770NetworkPrefix = exports.getEip3770NetworkPrefixFromChainId = exports.parseEip3770Address = void 0;\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst config_1 = require(\"./config\");\n\nfunction parseEip3770Address(fullAddress) {\n  const parts = fullAddress.split(':');\n  const address = parts.length > 1 ? parts[1] : parts[0];\n  const prefix = parts.length > 1 ? parts[0] : '';\n  return {\n    prefix,\n    address\n  };\n}\n\nexports.parseEip3770Address = parseEip3770Address;\n\nfunction getEip3770NetworkPrefixFromChainId(chainId) {\n  const network = config_1.networks.find(network => chainId === network.chainId);\n\n  if (!network) {\n    throw new Error('No network prefix supported for the current chainId');\n  }\n\n  return network.shortName;\n}\n\nexports.getEip3770NetworkPrefixFromChainId = getEip3770NetworkPrefixFromChainId;\n\nfunction isValidEip3770NetworkPrefix(prefix) {\n  return config_1.networks.some(_ref => {\n    let {\n      shortName\n    } = _ref;\n    return shortName === prefix;\n  });\n}\n\nexports.isValidEip3770NetworkPrefix = isValidEip3770NetworkPrefix;\n\nfunction validateEip3770NetworkPrefix(prefix, currentChainId) {\n  const isCurrentNetworkPrefix = prefix === getEip3770NetworkPrefixFromChainId(currentChainId);\n\n  if (!isValidEip3770NetworkPrefix(prefix) || !isCurrentNetworkPrefix) {\n    throw new Error('The network prefix must match the current network');\n  }\n}\n\nexports.validateEip3770NetworkPrefix = validateEip3770NetworkPrefix;\n\nfunction validateEthereumAddress(address) {\n  const isValidAddress = (0, web3_utils_1.isHexStrict)(address) && (0, web3_utils_1.isAddress)(address);\n\n  if (!isValidAddress) {\n    throw new Error(`Invalid Ethereum address ${address}`);\n  }\n}\n\nexports.validateEthereumAddress = validateEthereumAddress;\n\nfunction validateEip3770Address(fullAddress, currentChainId) {\n  const {\n    address,\n    prefix\n  } = parseEip3770Address(fullAddress);\n  validateEthereumAddress(address);\n\n  if (prefix) {\n    validateEip3770NetworkPrefix(prefix, currentChainId);\n  }\n\n  return {\n    address,\n    prefix\n  };\n}\n\nexports.validateEip3770Address = validateEip3770Address; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script"}