{"ast":null,"code":"import { _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { bW as fetchCurrencyValue } from './watchTransactions-8ceed2d4.browser.esm.js';\nimport { constants, BigNumber } from 'ethers';\n/**\n * Manages history for Token contracts\n * @public\n */\n\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    _defineProperty(this, \"events\", void 0);\n\n    _defineProperty(this, \"contractWrapper\", void 0);\n\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n\n\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n\n        balances[from] = balances[from].sub(amount);\n      }\n\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return Promise.all(Object.keys(balances).map(async addr => ({\n      holder: addr,\n      balance: await fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.readContract.address, balances[addr])\n    })));\n  }\n\n}\n\nexport { TokenERC20History as T };","map":null,"metadata":{},"sourceType":"module"}