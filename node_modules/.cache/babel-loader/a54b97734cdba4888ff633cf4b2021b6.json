{"ast":null,"code":"import { A as AmountSchema, N as NFTInputOrUriSchema, _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { aa as AddressOrEnsSchema, a7 as BigNumberishSchema, ab as RawDateSchema, c_ as ContractWrapper, da as FEATURE_PACK_VRF, cS as buildTransactionFunction, aT as Transaction, aO as ContractEvents, bV as fetchCurrencyMetadata, cT as resolveAddress, ch as LINK_TOKEN_ADDRESS, ao as Erc20, bM as assertEnabled, e as AbiSchema, ah as ContractMetadata, db as PackContractSchema, aV as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ag as ContractEncoder, aN as GasCostEstimator, aP as ContractInterceptor, aS as ContractOwner, bp as getRoleHash, bU as normalizePriceValue, bZ as hasERC20Allowance, cW as isTokenApprovedForTransfer, bN as detectContractFeature, d6 as uploadOrExtractURI } from './watchTransactions-e6bbb343.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-747c04e5.browser.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/ERC20.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { BigNumber, ethers } from 'ethers';\nimport { z } from 'zod';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport 'cross-fetch';\nimport 'tiny-invariant';\nimport 'ethers/lib/utils.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/generated-abis';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\n/**\n * @internal\n */\n\nconst CommonWrappableSchema = z.object({\n  contractAddress: AddressOrEnsSchema\n});\n/**\n * @internal\n */\n\nconst ERC20WrappableSchema = CommonWrappableSchema.extend({\n  quantity: AmountSchema\n});\n/**\n * @internal\n */\n\nconst ERC721WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n});\n/**\n * @internal\n */\n\nconst ERC1155WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n});\n/**\n * @internal\n */\n\nconst ERC20RewardSchema = ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n});\n/**\n * @internal\n */\n\nconst ERC721RewardSchema = ERC721WrappableSchema;\n/**\n * @internal\n */\n\nconst ERC1155RewardSchema = ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n});\n/**\n * @internal\n */\n\nconst ERC20RewardContentsSchema = ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n/**\n * @internal\n */\n\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n/**\n * @internal\n */\n\nconst ERC1155RewardContentsSchema = ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n/**\n * @internal\n */\n\nz.object({\n  erc20Rewards: z.array(ERC20RewardSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardSchema).default([])\n});\n/**\n * @internal\n */\n\nconst PackRewardsOutputSchema = z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n});\n/**\n * @internal\n */\n\nconst PackMetadataInputSchema = PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n});\n/**\n * @public\n */\n\nclass PackVRF {\n  constructor(network, address, storage, options, chainId) {\n    var _this = this;\n\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options);\n\n    _defineProperty(this, \"featureName\", FEATURE_PACK_VRF.name);\n\n    _defineProperty(this, \"contractWrapper\", void 0);\n\n    _defineProperty(this, \"storage\", void 0);\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"events\", void 0);\n    /**\n     * Open pack\n     *\n     * @example\n     * ```javascript\n     * const tokenId = 0;\n     * const amount = 1;\n     * const receipt = await contract.pack.open(tokenId, amount);\n     * ```\n     *\n     * @remarks Open a pack using Chainlink VRFs random number generation\n     * @remarks This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n     * @remarks To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n     * @remarks You can use the canClaimRewards method to check if the VRF request has been fulfilled\n     * @param tokenId\n     * @param amount\n     * @returns\n     * @twfeature PackVRF\n     */\n\n\n    _defineProperty(this, \"open\", buildTransactionFunction(async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: receipt => {\n          let id = BigNumber.from(0);\n\n          try {\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n\n            id = event[0].args.requestId;\n          } catch (e) {}\n\n          return {\n            receipt,\n            id\n          };\n        }\n      });\n    }));\n    /**\n     * Claim the rewards from an opened pack\n     *\n     * @example\n     * ```javascript\n     * const rewards = await contract.pack.claimRewards();\n     * ```\n     *\n     * @remarks This will return the contents of the pack\n     * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n     * @returns the random rewards from opening a pack\n     * @twfeature PackVRF\n     */\n\n\n    _defineProperty(this, \"claimRewards\", buildTransactionFunction(async function () {\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"claimRewards\",\n        args: [],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n\n          const rewards = event[0].args.rewardUnitsDistributed;\n          return await _this.parseRewards(rewards);\n        }\n      });\n    }));\n\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * @param callback the listener to call when a pack is opened\n   * @returns a unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n\n\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n\n\n  async canClaimRewards(claimerAddress) {\n    const address = await resolveAddress(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.readContract.canClaimRewards(address);\n  }\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId The id of the pack to open\n   * @param amount Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n\n\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n\n    return {\n      receipt,\n      id\n    };\n  }\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns the balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n\n\n  async getLinkBalance() {\n    return this.getLinkContract().balanceOf(this.contractWrapper.readContract.address);\n  }\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n\n\n  async transferLink(amount) {\n    await this.getLinkContract().transfer(this.contractWrapper.readContract.address, amount);\n  }\n\n  getLinkContract() {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n\n}\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\n\n\nclass Pack extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n\n  constructor(network, address, storage) {\n    var _this;\n\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? { ...options,\n      gasless: {\n        openzeppelin: { ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options);\n    super(contractWrapper, storage, chainId);\n    _this = this;\n\n    _defineProperty(this, \"abi\", void 0);\n\n    _defineProperty(this, \"metadata\", void 0);\n\n    _defineProperty(this, \"app\", void 0);\n\n    _defineProperty(this, \"roles\", void 0);\n\n    _defineProperty(this, \"encoder\", void 0);\n\n    _defineProperty(this, \"events\", void 0);\n\n    _defineProperty(this, \"estimator\", void 0);\n\n    _defineProperty(this, \"royalties\", void 0);\n\n    _defineProperty(this, \"interceptor\", void 0);\n\n    _defineProperty(this, \"owner\", void 0);\n\n    _defineProperty(this, \"_vrf\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n\n    /**\n     * Create Pack\n     * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.\n     * @remarks See {@link Pack.createTo}\n     *\n     * @param metadataWithRewards - the metadata and rewards to include in the pack\n     * @example\n     * ```javascript\n     * const pack = {\n     *   // The metadata for the pack NFT itself\n     *   packMetadata: {\n     *     name: \"My Pack\",\n     *     description: \"This is a new pack\",\n     *     image: \"ipfs://...\",\n     *   },\n     *   // ERC20 rewards to be included in the pack\n     *   erc20Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       quantityPerReward: 5,\n     *       quantity: 100,\n     *       totalRewards: 20,\n     *     }\n     *   ],\n     *   // ERC721 rewards to be included in the pack\n     *   erc721Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       tokenId: 0,\n     *     }\n     *   ],\n     *   // ERC1155 rewards to be included in the pack\n     *   erc1155Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       tokenId: 0,\n     *       quantityPerReward: 1,\n     *       totalRewards: 100,\n     *     }\n     *   ],\n     *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n     *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n     * }\n     *\n     * const tx = await contract.create(pack);\n     * ```\n     */\n\n\n    _defineProperty(this, \"create\", buildTransactionFunction(async metadataWithRewards => {\n      const signerAddress = await this.contractWrapper.getSignerAddress();\n      return this.createTo.prepare(signerAddress, metadataWithRewards);\n    }));\n    /**\n     * Add Pack Contents\n     * @remarks Add contents to an existing pack.\n     * @remarks See {@link Pack.addPackContents}\n     *\n     * @param packId - token Id of the pack to add contents to\n     * @param packContents - the rewards to include in the pack\n     * @example\n     * ```javascript\n     * const packContents = {\n     *   // ERC20 rewards to be included in the pack\n     *   erc20Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       quantityPerReward: 5,\n     *       quantity: 100,\n     *       totalRewards: 20,\n     *     }\n     *   ],\n     *   // ERC721 rewards to be included in the pack\n     *   erc721Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       tokenId: 0,\n     *     }\n     *   ],\n     *   // ERC1155 rewards to be included in the pack\n     *   erc1155Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       tokenId: 0,\n     *       quantityPerReward: 1,\n     *       totalRewards: 100,\n     *     }\n     *   ],\n     * }\n     *\n     * const tx = await contract.addPackContents(packId, packContents);\n     * ```\n     */\n\n\n    _defineProperty(this, \"addPackContents\", buildTransactionFunction(async (packId, packContents) => {\n      const signerAddress = await this.contractWrapper.getSignerAddress();\n      const parsedContents = await PackRewardsOutputSchema.parseAsync(packContents);\n      const {\n        contents,\n        numOfRewardUnits\n      } = await this.toPackContentArgs(parsedContents);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"addPackContents\",\n        args: [packId, contents, numOfRewardUnits, signerAddress],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n\n          if (event.length === 0) {\n            throw new Error(\"PackUpdated event not found\");\n          }\n\n          const id = event[0].args.packId;\n          return {\n            id: id,\n            receipt,\n            data: () => this.erc1155.get(id)\n          };\n        }\n      });\n    }));\n    /**\n     * Create Pack To Wallet\n     * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n     *\n     * @param to - the address to mint the pack to\n     * @param metadataWithRewards - the metadata and rewards to include in the pack\n     *\n     * @example\n     * ```javascript\n     * const pack = {\n     *   // The metadata for the pack NFT itself\n     *   packMetadata: {\n     *     name: \"My Pack\",\n     *     description: \"This is a new pack\",\n     *     image: \"ipfs://...\",\n     *   },\n     *   // ERC20 rewards to be included in the pack\n     *   erc20Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       quantityPerReward: 5,\n     *       quantity: 100,\n     *       totalRewards: 20,\n     *     }\n     *   ],\n     *   // ERC721 rewards to be included in the pack\n     *   erc721Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       tokenId: 0,\n     *     }\n     *   ],\n     *   // ERC1155 rewards to be included in the pack\n     *   erc1155Rewards: [\n     *     {\n     *       assetContract: \"0x...\",\n     *       tokenId: 0,\n     *       quantityPerReward: 1,\n     *       totalRewards: 100,\n     *     }\n     *   ],\n     *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n     *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n     * }\n     *\n     * const tx = await contract.createTo(\"0x...\", pack);\n     * ```\n     */\n\n\n    _defineProperty(this, \"createTo\", buildTransactionFunction(async (to, metadataWithRewards) => {\n      const uri = await uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage);\n      const parsedMetadata = await PackMetadataInputSchema.parseAsync(metadataWithRewards);\n      const {\n        erc20Rewards,\n        erc721Rewards,\n        erc1155Rewards\n      } = parsedMetadata;\n      const rewardsData = {\n        erc20Rewards,\n        erc721Rewards,\n        erc1155Rewards\n      };\n      const {\n        contents,\n        numOfRewardUnits\n      } = await this.toPackContentArgs(rewardsData);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createPack\",\n        args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, await resolveAddress(to)],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n\n          if (event.length === 0) {\n            throw new Error(\"PackCreated event not found\");\n          }\n\n          const packId = event[0].args.packId;\n          return {\n            id: packId,\n            receipt,\n            data: () => this.erc1155.get(packId)\n          };\n        }\n      });\n    }));\n    /**\n     * Open Pack\n     *\n     * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n     * the contained assets will be transferred to the opening users wallet.\n     *\n     * @param tokenId - the token ID of the pack you want to open\n     * @param amount - the amount of packs you want to open\n     *\n     * @example\n     * ```javascript\n     * const tokenId = 0\n     * const amount = 1\n     * const tx = await contract.open(tokenId, amount);\n     * ```\n     */\n\n\n    _defineProperty(this, \"open\", buildTransactionFunction(async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n\n      if (_this._vrf) {\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n      }\n\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n\n          const rewards = event[0].args.rewardUnitsDistributed;\n          const erc20Rewards = [];\n          const erc721Rewards = [];\n          const erc1155Rewards = [];\n\n          for (const reward of rewards) {\n            switch (reward.tokenType) {\n              case 0:\n                {\n                  const tokenMetadata = await fetchCurrencyMetadata(_this.contractWrapper.getProvider(), reward.assetContract);\n                  erc20Rewards.push({\n                    contractAddress: reward.assetContract,\n                    quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                  });\n                  break;\n                }\n\n              case 1:\n                {\n                  erc721Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString()\n                  });\n                  break;\n                }\n\n              case 2:\n                {\n                  erc1155Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString(),\n                    quantityPerReward: reward.totalAmount.toString()\n                  });\n                  break;\n                }\n            }\n          }\n\n          return {\n            erc20Rewards,\n            erc721Rewards,\n            erc1155Rewards\n          };\n        }\n      });\n    }));\n\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n  /**\n   * @internal\n   */\n\n\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n\n\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n\n\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n\n\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n\n\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n\n\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), ethers.constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n\n\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.readContract.getPackContents(packId);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = ethers.utils.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = ethers.utils.formatUnits(BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress); // Multiply the quantity of one reward by the number of rewards\n\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.readContract.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n\n    return undefined;\n  }\n\n}\n\n_defineProperty(Pack, \"contractRoles\", [\"admin\", \"minter\", \"asset\", \"transfer\"]);\n\nexport { Pack };","map":null,"metadata":{},"sourceType":"module"}