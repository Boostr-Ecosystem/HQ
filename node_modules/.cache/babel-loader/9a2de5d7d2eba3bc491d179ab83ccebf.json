{"ast":null,"code":"import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { a as AbstractBrowserWallet, c as createAsyncLocalStorage } from '../../../../dist/base-26952412.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-66ccef46.browser.esm.js';\nimport '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport 'eventemitter3';\nimport '@thirdweb-dev/chains';\n\nclass MetaMaskWallet extends AbstractBrowserWallet {\n  get walletName() {\n    return \"MetaMask\";\n  }\n\n  constructor(options) {\n    super(MetaMaskWallet.id, options);\n\n    _defineProperty(this, \"connector\", void 0);\n\n    _defineProperty(this, \"connectorStorage\", void 0);\n\n    _defineProperty(this, \"walletConnectConnector\", void 0);\n\n    _defineProperty(this, \"isInjected\", void 0);\n\n    this.connectorStorage = options.connectorStorage || createAsyncLocalStorage(\"connector\");\n\n    if (assertWindowEthereum(globalThis.window)) {\n      this.isInjected = !!globalThis.window.ethereum?.isMetaMask;\n    } else {\n      this.isInjected = false;\n    }\n  }\n\n  async getConnector() {\n    if (!this.connector) {\n      // if metamask is injected, use the injected connector\n      // otherwise, use the wallet connect connector for using the metamask app on mobile via QR code scan\n      if (this.isInjected) {\n        // import the connector dynamically\n        const {\n          MetaMaskConnector\n        } = await import('../../../connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js');\n        const metamaskConnector = new MetaMaskConnector({\n          chains: this.chains,\n          connectorStorage: this.connectorStorage,\n          options: {\n            shimDisconnect: true\n          }\n        });\n        this.connector = new WagmiAdapter(metamaskConnector);\n      } else {\n        const {\n          WalletConnectV1Connector\n        } = await import('../../../connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js');\n        const walletConnectConnector = new WalletConnectV1Connector({\n          chains: this.chains,\n          storage: this.connectorStorage,\n          options: {\n            clientMeta: {\n              name: this.dappMetadata.name,\n              description: this.dappMetadata.description || \"\",\n              url: this.dappMetadata.url,\n              icons: [this.dappMetadata.logoUrl || \"\"]\n            },\n            qrcode: this.options?.qrcode\n          }\n        }); // need to save this for getting the QR code URI\n\n        this.walletConnectConnector = walletConnectConnector;\n        this.connector = new WagmiAdapter(walletConnectConnector);\n      }\n    }\n\n    return this.connector;\n  }\n  /**\n   * connect to wallet with QR code\n   *\n   * @example\n   * ```typescript\n   * metamask.connectWithQrCode({\n   *  chainId: 1,\n   *  onQrCodeUri(qrCodeUri) {\n   *    // render the QR code with `qrCodeUri`\n   *  },\n   *  onConnected(accountAddress)  {\n   *    // update UI to show connected state\n   *  },\n   * })\n   * ```\n   */\n\n\n  async connectWithQrCode(options) {\n    await this.getConnector();\n    const wcConnector = this.walletConnectConnector;\n\n    if (!wcConnector) {\n      throw new Error(\"WalletConnect connector not found\");\n    }\n\n    const wcProvider = await wcConnector.getProvider(); // set a listener for display_uri event\n\n    wcProvider.connector.on(\"display_uri\", (error, payload) => {\n      options.onQrCodeUri(payload.params[0]);\n    }); // trigger the display_uri event to get the QR code\n\n    await wcProvider.enable(); // connected to app here\n    // trigger connect flow\n\n    this.connect({\n      chainId: options.chainId\n    }).then(options.onConnected);\n  }\n\n}\n\n_defineProperty(MetaMaskWallet, \"meta\", {\n  name: \"MetaMask\",\n  iconURL: \"ipfs://QmZZHcw7zcXursywnLDAyY6Hfxzqop5GKgwoq8NB9jjrkN/metamask.svg\"\n});\n\n_defineProperty(MetaMaskWallet, \"id\", \"metamask\");\n\nexport { MetaMaskWallet };","map":null,"metadata":{},"sourceType":"module"}