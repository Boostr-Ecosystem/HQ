{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nconst {\n  multihash\n} = multihashing;\nconst codec = multicodec.DAG_PB;\nconst defaultHashAlg = multihash.names['sha2-256'];\n/**\n * @typedef {object} GenCIDOptions - Options to create the CID\n * @property {CID.CIDVersion} [cidVersion=1] - CID version number\n * @property {multihashing.multihash.HashCode} [hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n */\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {GenCIDOptions} [userOptions] - Options to create the CID\n */\n\nconst cid = async function (binaryBlob) {\n  let userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const options = {\n    cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n    hashAlg: userOptions.hashAlg == null ? defaultHashAlg : userOptions.hashAlg\n  };\n  const hashName = multihash.codes[options.hashAlg];\n  const hash = await multihashing(binaryBlob, hashName);\n  const codecName = multicodec.getNameFromCode(codec);\n  const cid = new CID(options.cidVersion, codecName, hash);\n  return cid;\n};\n\nmodule.exports = {\n  codec,\n  defaultHashAlg,\n  cid\n};","map":null,"metadata":{},"sourceType":"script"}