{"ast":null,"code":"import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\nimport { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass Connector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"chains\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"ready\", void 0);\n\n    this.chains = chains;\n    this.options = options;\n  }\n\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n\n  updateChains(chains) {\n    this.chains = chains;\n  }\n\n}\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\n\n\nclass RpcError extends Error {\n  constructor(\n  /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n\n    super(message);\n\n    _defineProperty(this, \"cause\", void 0);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n\n}\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\n\n\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor(\n  /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n\n}\n\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", \"AddChainError\");\n\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n\n}\n\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n\n}\n\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n\n}\n\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n\n}\n\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n\n}\n\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n\n} // Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\n\nexport { AddChainError as A, Connector as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ChainNotConfiguredError as a, ConnectorNotFoundError as b };","map":null,"metadata":{},"sourceType":"module"}