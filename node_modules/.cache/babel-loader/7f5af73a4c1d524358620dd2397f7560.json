{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst uint8ArrayEquals = require('uint8arrays/equals');\n/**\n * @typedef {import('../dag-link/dagLink')} DAGLink\n */\n\n/**\n *\n * @param {import('./dagNode')} dagNode\n * @param {string | CID | Uint8Array | DAGLink} nameOrCid\n */\n\n\nconst rmLink = (dagNode, nameOrCid) => {\n  let predicate = null; // It's a name\n\n  if (typeof nameOrCid === 'string') {\n    predicate = (\n    /** @type {DAGLink} */\n    link) => link.Name === nameOrCid;\n  } else if (nameOrCid instanceof Uint8Array) {\n    predicate = (\n    /** @type {DAGLink} */\n    link) => uint8ArrayEquals(link.Hash.bytes, nameOrCid);\n  } else if (CID.isCID(nameOrCid)) {\n    predicate = (\n    /** @type {DAGLink} */\n    link) => uint8ArrayEquals(link.Hash.bytes, nameOrCid.bytes);\n  }\n\n  if (predicate) {\n    const links = dagNode.Links;\n    let index = 0;\n\n    while (index < links.length) {\n      const link = links[index];\n\n      if (predicate(link)) {\n        links.splice(index, 1);\n      } else {\n        index++;\n      }\n    }\n  } else {\n    throw new Error('second arg needs to be a name or CID');\n  }\n};\n\nmodule.exports = rmLink;","map":null,"metadata":{},"sourceType":"script"}