{"ast":null,"code":"'use strict';\n\nconst {\n  PBNode\n} = require('./dag');\n\nconst DAGLink = require('./dag-link/dagLink');\n\nconst DAGNode = require('./dag-node/dagNode');\n\nconst {\n  serializeDAGNode,\n  serializeDAGNodeLike\n} = require('./serialize');\n\nconst genCid = require('./genCid');\n/**\n * @typedef {import('./types').DAGLinkLike} DAGLinkLike\n */\n\n/**\n * Calculate the CID of the binary blob\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {import('./genCid').GenCIDOptions} [userOptions] - Options to create the CID\n */\n\n\nconst cid = (binaryBlob, userOptions) => {\n  return genCid.cid(binaryBlob, userOptions);\n};\n/**\n * Serialize internal representation into a binary PB block\n *\n * @param {DAGNode | { Data?: Uint8Array, Links?: (DAGLink | DAGLinkLike)[]}} node\n */\n\n\nconst serialize = node => {\n  if (node instanceof DAGNode) {\n    return serializeDAGNode(node);\n  } else {\n    return serializeDAGNodeLike(node.Data, node.Links);\n  }\n};\n/**\n * Deserialize PB block into the internal representation.\n *\n * @param {Uint8Array} buffer - Binary representation of a PB block\n */\n\n\nconst deserialize = buffer => {\n  const message = PBNode.decode(buffer);\n  const pbn = PBNode.toObject(message, {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  });\n  /** @type {DAGLink[]} */\n\n  const links = pbn.Links.map((\n  /** @type {DAGLinkLike} */\n  link) => {\n    // @ts-ignore\n    return new DAGLink(link.Name, link.Tsize, link.Hash);\n  });\n  const data = pbn.Data == null ? new Uint8Array(0) : pbn.Data;\n  return new DAGNode(data, links, buffer.byteLength);\n};\n\nmodule.exports = {\n  codec: genCid.codec,\n  defaultHashAlg: genCid.defaultHashAlg,\n  serialize,\n  deserialize,\n  cid\n};","map":null,"metadata":{},"sourceType":"script"}