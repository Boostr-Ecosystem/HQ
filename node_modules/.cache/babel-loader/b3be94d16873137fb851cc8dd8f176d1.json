{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _OwnerManager_ethAdapter, _OwnerManager_safeContract;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"../utils\");\n\nconst constants_1 = require(\"../utils/constants\");\n\nclass OwnerManager {\n  constructor(ethAdapter, safeContract) {\n    _OwnerManager_ethAdapter.set(this, void 0);\n\n    _OwnerManager_safeContract.set(this, void 0);\n\n    __classPrivateFieldSet(this, _OwnerManager_ethAdapter, ethAdapter, \"f\");\n\n    __classPrivateFieldSet(this, _OwnerManager_safeContract, safeContract, \"f\");\n  }\n\n  validateOwnerAddress(ownerAddress, errorMessage) {\n    const isValidAddress = __classPrivateFieldGet(this, _OwnerManager_ethAdapter, \"f\").isAddress(ownerAddress);\n\n    if (!isValidAddress || (0, utils_1.isRestrictedAddress)(ownerAddress)) {\n      throw new Error(errorMessage || 'Invalid owner address provided');\n    }\n  }\n\n  validateThreshold(threshold, numOwners) {\n    if (threshold <= 0) {\n      throw new Error('Threshold needs to be greater than 0');\n    }\n\n    if (threshold > numOwners) {\n      throw new Error('Threshold cannot exceed owner count');\n    }\n  }\n\n  validateAddressIsNotOwner(ownerAddress, owners, errorMessage) {\n    const ownerIndex = owners.findIndex(owner => (0, utils_1.sameString)(owner, ownerAddress));\n    const isOwner = ownerIndex >= 0;\n\n    if (isOwner) {\n      throw new Error(errorMessage || 'Address provided is already an owner');\n    }\n  }\n\n  validateAddressIsOwner(ownerAddress, owners, errorMessage) {\n    const ownerIndex = owners.findIndex(owner => (0, utils_1.sameString)(owner, ownerAddress));\n    const isOwner = ownerIndex >= 0;\n\n    if (!isOwner) {\n      throw new Error(errorMessage || 'Address provided is not an owner');\n    }\n\n    return ownerIndex;\n  }\n\n  async getOwners() {\n    const owners = await __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").getOwners();\n    return [...owners];\n  }\n\n  async getThreshold() {\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").getThreshold();\n  }\n\n  async isOwner(ownerAddress) {\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").isOwner(ownerAddress);\n  }\n\n  async encodeAddOwnerWithThresholdData(ownerAddress, threshold) {\n    this.validateOwnerAddress(ownerAddress);\n    const owners = await this.getOwners();\n    this.validateAddressIsNotOwner(ownerAddress, owners);\n    const newThreshold = threshold !== null && threshold !== void 0 ? threshold : await this.getThreshold();\n    this.validateThreshold(newThreshold, owners.length + 1);\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('addOwnerWithThreshold', [ownerAddress, newThreshold]);\n  }\n\n  async encodeRemoveOwnerData(ownerAddress, threshold) {\n    this.validateOwnerAddress(ownerAddress);\n    const owners = await this.getOwners();\n    const ownerIndex = this.validateAddressIsOwner(ownerAddress, owners);\n    const newThreshold = threshold !== null && threshold !== void 0 ? threshold : (await this.getThreshold()) - 1;\n    this.validateThreshold(newThreshold, owners.length - 1);\n    const prevOwnerAddress = ownerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[ownerIndex - 1];\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('removeOwner', [prevOwnerAddress, ownerAddress, newThreshold]);\n  }\n\n  async encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress) {\n    this.validateOwnerAddress(newOwnerAddress, 'Invalid new owner address provided');\n    this.validateOwnerAddress(oldOwnerAddress, 'Invalid old owner address provided');\n    const owners = await this.getOwners();\n    this.validateAddressIsNotOwner(newOwnerAddress, owners, 'New address provided is already an owner');\n    const oldOwnerIndex = this.validateAddressIsOwner(oldOwnerAddress, owners, 'Old address provided is not an owner');\n    const prevOwnerAddress = oldOwnerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[oldOwnerIndex - 1];\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('swapOwner', [prevOwnerAddress, oldOwnerAddress, newOwnerAddress]);\n  }\n\n  async encodeChangeThresholdData(threshold) {\n    const owners = await this.getOwners();\n    this.validateThreshold(threshold, owners.length);\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('changeThreshold', [threshold]);\n  }\n\n}\n\n_OwnerManager_ethAdapter = new WeakMap(), _OwnerManager_safeContract = new WeakMap();\nexports.default = OwnerManager; //# sourceMappingURL=ownerManager.js.map","map":null,"metadata":{},"sourceType":"script"}