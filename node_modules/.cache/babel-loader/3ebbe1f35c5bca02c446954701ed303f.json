{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('./types').BlockAPI} BlockAPI\n * @typedef {import('cids')} CID\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\n\nclass Dir {\n  /**\n   *\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor(props, options) {\n    this.options = options || {};\n    this.root = props.root;\n    this.dir = props.dir;\n    this.path = props.path;\n    this.dirty = props.dirty;\n    this.flat = props.flat;\n    this.parent = props.parent;\n    this.parentKey = props.parentKey;\n    this.unixfs = props.unixfs;\n    this.mode = props.mode;\n    this.mtime = props.mtime;\n    /** @type {CID | undefined} */\n\n    this.cid = undefined;\n    /** @type {number | undefined} */\n\n    this.size = undefined;\n  }\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n\n\n  async put(name, value) {}\n  /**\n   * @param {string} name\n   * @returns {Promise<InProgressImportResult | Dir | undefined>}\n   */\n\n\n  get(name) {\n    return Promise.resolve(this);\n  }\n  /**\n   * @returns {AsyncIterable<{ key: string, child: InProgressImportResult | Dir}>}\n   */\n\n\n  async *eachChildSeries() {}\n  /**\n   * @param {BlockAPI} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n\n\n  async *flush(block) {}\n\n}\n\nmodule.exports = Dir;","map":null,"metadata":{},"sourceType":"script"}