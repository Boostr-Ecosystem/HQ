{"ast":null,"code":"var _jsxFileName = \"/Users/meister/mwproj23/DAO-Projects/daoHome/website/src/views/IndexSections/BdaoVote.js\",\n    _s = $RefreshSig$();\n\nimport { useAddress, useNetwork, ConnectWallet, Web3Button, useContract, useNFTBalance } from '@thirdweb-dev/react';\nimport { ChainId } from '@thirdweb-dev/sdk';\nimport { useState, useEffect, useMemo } from 'react';\nimport { AddressZero } from \"@ethersproject/constants\"; //import  bDAO_logo from '../src/media/images/str_boostr.png'\n//import { BackgroundVideo } from '../src/media/video/bg-video'\n//import { BackgroundVideo2 } from '../src/media/video/bg-video-member';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BoostrDao() {\n  _s();\n\n  // Use the hooks thirdweb give us.\n  const address = useAddress();\n  console.log(\"ðŸ‘‹ Address:\", address);\n  const network = useNetwork(); // Initialize our Edition Drop contract\n\n  const editionDropAddress = \"0xB500BCd2A135b2b2b24da84E09AAFB05f0749631\";\n  const {\n    contract: editionDrop\n  } = useContract(editionDropAddress, \"edition-drop\"); // Initialize our token contract\n\n  const {\n    contract: token\n  } = useContract('0x170E71c034791b1F9Fb19C1ae8cD5c2A66fb6dF4', 'token'); //web app needs access to vote token\n\n  const {\n    contract: vote\n  } = useContract(\"0x5c035F0E633961b6F53fF2B7EfC7423229ecAAb8\", \"vote\"); // Hook to check if the user has our NFT\n\n  const {\n    data: nftBalance\n  } = useNFTBalance(editionDrop, address, \"0\");\n  const hasClaimedNFT = useMemo(() => {\n    return nftBalance && nftBalance.gt(0);\n  }, [nftBalance]); // Holds the amount of token each member has in state.\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState([]); // The array holding all of our members addresses.\n\n  const [memberAddresses, setMemberAddresses] = useState([]); // A fancy function to shorten someones wallet address, no need to show the whole thing.\n\n  const shortenAddress = str => {\n    return str.substring(0, 6) + '...' + str.substring(str.length - 4);\n  };\n\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false); // Retrieve all our existing proposals from the contract.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // A simple call to vote.getAll() to grab the proposals.\n\n\n    const getAllProposals = async () => {\n      try {\n        const proposals = await vote.getAll(0);\n        setProposals(proposals);\n        console.log(\"ðŸŒˆ Proposals:\", proposals);\n      } catch (error) {\n        console.log(\"failed to get proposals\", error);\n      }\n    };\n\n    getAllProposals();\n  }, [hasClaimedNFT, vote]); // We also need to check if the user already voted.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n\n\n    if (!proposals.length) {\n      return;\n    }\n\n    const checkIfUserHasVoted = async () => {\n      try {\n        const hasVoted = await vote.hasVoted(proposals[0].proposalId, address);\n        setHasVoted(hasVoted);\n\n        if (hasVoted) {\n          console.log(\"ðŸ¥µ User has already voted\");\n        } else {\n          console.log(\"ðŸ™‚ User has not voted yet\");\n        }\n      } catch (error) {\n        console.error(\"Failed to check if wallet has voted\", error);\n      }\n    };\n\n    checkIfUserHasVoted();\n  }, [hasClaimedNFT, proposals, address, vote]); // This useEffect grabs all the addresses of our members holding our NFT.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n\n\n    const getAllAddresses = async () => {\n      try {\n        const memberAddresses = await (editionDrop === null || editionDrop === void 0 ? void 0 : editionDrop.history.getAllClaimerAddresses(0));\n        setMemberAddresses(memberAddresses);\n        console.log('ðŸš€ Members addresses', memberAddresses);\n      } catch (error) {\n        console.error('failed to get member list', error);\n      }\n    };\n\n    getAllAddresses();\n  }, [hasClaimedNFT, editionDrop === null || editionDrop === void 0 ? void 0 : editionDrop.history]); // This useEffect grabs the # of token each member holds.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    const getAllBalances = async () => {\n      try {\n        const amounts = await (token === null || token === void 0 ? void 0 : token.history.getAllHolderBalances());\n        setMemberTokenAmounts(amounts);\n        console.log('ðŸ‘œ Amounts', amounts);\n      } catch (error) {\n        console.error('failed to get member balances', error);\n      }\n    };\n\n    getAllBalances();\n  }, [hasClaimedNFT, token === null || token === void 0 ? void 0 : token.history]); // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n\n  const memberList = useMemo(() => {\n    if (address && (network === null || network === void 0 ? void 0 : network[0].data.chain.id) !== ChainId.Goerli) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unsupported-network\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Please connect to Goerli\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This dapp only works on the Goerli network, please switch networks in your connected wallet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }, this);\n    }\n\n    return memberAddresses.map(address => {\n      // We're checking if we are finding the address in the memberTokenAmounts array.\n      // If we are, we'll return the amount of token the user has.\n      // Otherwise, return 0.\n      const member = memberTokenAmounts === null || memberTokenAmounts === void 0 ? void 0 : memberTokenAmounts.find(_ref => {\n        let {\n          holder\n        } = _ref;\n        return holder === address;\n      });\n      return {\n        address,\n        tokenAmount: (member === null || member === void 0 ? void 0 : member.balance.displayValue) || '0'\n      };\n    });\n  }, [address, memberAddresses, memberTokenAmounts, network]); // This is the case where the user hasn't connected their wallet\n  // to your web app. Let them call connectWallet.\n\n  if (address && (network === null || network === void 0 ? void 0 : network[0].data.chain.id) !== ChainId.Goerli) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Welcome to Boostr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-hero\",\n        children: [/*#__PURE__*/_jsxDEV(ConnectWallet, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"goerli\",\n          children: \"Switch to Goerli Network\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this);\n  } // If the user has already claimed their NFT we want to display the internal DAO page to them\n  // only DAO members will see this. Render all the members + token amounts + voting panel.\n\n\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rows\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panels\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"h20\",\n            children: \"DAO Members\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                id: \"wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  id: \"one\",\n                  className: \"cthw\",\n                  children: \" Wallet Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  id: \"two\",\n                  className: \"cthw\",\n                  children: \" Voting Power\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rlskroll\",\n              children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: memberList.map(member => {\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"up\",\n                      children: shortenAddress(member.address)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 210,\n                      columnNumber: 17\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"up\",\n                      children: member.tokenAmount\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 17\n                    }, this)]\n                  }, member.address, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 15\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panels\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"h20\",\n            children: \"Proposals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: async e => {\n              e.preventDefault();\n              e.stopPropagation(); //before we do async things, we want to disable the button to prevent double clicks\n\n              setIsVoting(true); // lets get the votes from the form for the values\n\n              const votes = proposals.map(proposal => {\n                const voteResult = {\n                  proposalId: proposal.proposalId //abstain by default\n                  //vote: 2,\n\n                };\n                proposal.votes.forEach(vote => {\n                  const elem = document.getElementById(proposal.proposalId + '-' + vote.type);\n\n                  if (elem.checked) {\n                    voteResult.vote = vote.type;\n                    return;\n                  }\n                });\n                return voteResult;\n              }); // first we need to make sure the user delegates their token to vote\n\n              try {\n                //we'll check if the wallet still needs to delegate their tokens before they can vote\n                const delegation = await token.getDelegationOf(address); // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n\n                if (delegation === AddressZero) {\n                  //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                  await token.delegateTo(address);\n                } // then we need to vote on the proposals\n\n\n                try {\n                  await Promise.all(votes.map(async _ref2 => {\n                    let {\n                      proposalId,\n                      vote: _vote\n                    } = _ref2;\n                    // before voting we first need to check whether the proposal is open for voting\n                    // we first need to get the latest state of the proposal\n                    const proposal = await vote.get(proposalId); // then we check if the proposal is open for voting (state === 1 means it is open)\n\n                    if (proposal.state === 1) {\n                      // if it is open for voting, we'll vote on it\n                      return vote.vote(proposalId, _vote);\n                    } // if the proposal is not open for voting we just return nothing, letting us continue\n\n\n                    return;\n                  }));\n\n                  try {\n                    // if any of the propsals are ready to be executed we'll need to execute them\n                    // a proposal is ready to be executed if it is in state 4\n                    await Promise.all(votes.map(async _ref3 => {\n                      let {\n                        proposalId\n                      } = _ref3;\n                      // we'll first get the latest state of the proposal again, since we may have just voted before\n                      const proposal = await vote.get(proposalId); //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n\n                      if (proposal.state === 4) {\n                        return vote.execute(proposalId);\n                      }\n                    })); // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n\n                    setHasVoted(true); // and log out a success message\n\n                    console.log('successfully voted');\n                  } catch (err) {\n                    console.error('failed to execute votes', err);\n                  }\n                } catch (err) {\n                  console.error('failed to vote', err);\n                }\n              } catch (err) {\n                console.error('failed to delegate tokens');\n              } finally {\n                // in *either* case we need to set the isVoting state to false to enable the button again\n                setIsVoting(false);\n              }\n            },\n            children: [proposals.map(proposal => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: proposal.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"vote-box\",\n                children: proposal.votes.map(_ref4 => {\n                  let {\n                    type,\n                    label\n                  } = _ref4;\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"vote-icon\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"radio\",\n                      id: proposal.proposalId + '-' + type,\n                      name: proposal.proposalId,\n                      value: type //default the \"abstain\" vote to checked\n                      //defaultChecked={type === 2}\n\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 315,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      htmlFor: proposal.proposalId + '-' + type,\n                      children: label\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 19\n                    }, this)]\n                  }, type, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 17\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 13\n              }, this)]\n            }, proposal.proposalId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 11\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: isVoting || hasVoted,\n              type: \"submit\",\n              children: isVoting ? 'Voting...' : hasVoted ? 'You Already Voted' : 'Submit Votes'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 9\n            }, this), !hasVoted && /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"This will trigger multiple transactions that you will need to sign.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 3\n    }, this);\n  } // Render mint nft screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-hero\",\n      children: /*#__PURE__*/_jsxDEV(Web3Button, {\n        contractAddress: editionDropAddress,\n        action: contract => {\n          contract.erc1155.claim(0, 1);\n        },\n        onSuccess: () => {\n          console.log(`ðŸŒŠ Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${editionDrop.getAddress()}/0`);\n        },\n        onError: error => {\n          console.error(\"Failed to mint NFT\", error);\n        },\n        children: \"IT's (FREE) to join!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 3\n  }, this);\n}\n\n_s(BoostrDao, \"uYf7W1j1J9NiLtVK4jGcRzZ/SP0=\", false, function () {\n  return [useAddress, useNetwork, useContract, useContract, useContract, useNFTBalance];\n});\n\n_c = BoostrDao;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoostrDao\");","map":{"version":3,"names":["useAddress","useNetwork","ConnectWallet","Web3Button","useContract","useNFTBalance","ChainId","useState","useEffect","useMemo","AddressZero","BoostrDao","address","console","log","network","editionDropAddress","contract","editionDrop","token","vote","data","nftBalance","hasClaimedNFT","gt","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","shortenAddress","str","substring","length","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","getAllProposals","getAll","error","checkIfUserHasVoted","proposalId","getAllAddresses","history","getAllClaimerAddresses","getAllBalances","amounts","getAllHolderBalances","memberList","chain","id","Goerli","map","member","find","holder","tokenAmount","balance","displayValue","e","preventDefault","stopPropagation","votes","proposal","voteResult","forEach","elem","document","getElementById","type","checked","delegation","getDelegationOf","delegateTo","Promise","all","_vote","get","state","execute","err","description","label","erc1155","claim","getAddress"],"sources":["/Users/meister/mwproj23/DAO-Projects/daoHome/website/src/views/IndexSections/BdaoVote.js"],"sourcesContent":["import { \n  useAddress, \n  useNetwork,\n  ConnectWallet, \n  Web3Button, \n  useContract, \n  useNFTBalance } from '@thirdweb-dev/react';\nimport { ChainId } from '@thirdweb-dev/sdk';\nimport { useState, useEffect, useMemo } from 'react';\nimport { AddressZero } from \"@ethersproject/constants\";\n//import  bDAO_logo from '../src/media/images/str_boostr.png'\n//import { BackgroundVideo } from '../src/media/video/bg-video'\n//import { BackgroundVideo2 } from '../src/media/video/bg-video-member';\n\n\n\nexport default function BoostrDao() {\n\n// Use the hooks thirdweb give us.\nconst address = useAddress();\nconsole.log(\"ðŸ‘‹ Address:\", address);\nconst network = useNetwork();\n\n// Initialize our Edition Drop contract\nconst editionDropAddress = \"0xB500BCd2A135b2b2b24da84E09AAFB05f0749631\";\nconst { contract: editionDrop } = useContract(editionDropAddress, \"edition-drop\");\n// Initialize our token contract\nconst { contract: token } = useContract('0x170E71c034791b1F9Fb19C1ae8cD5c2A66fb6dF4', 'token');\n//web app needs access to vote token\nconst { contract: vote } = useContract(\"0x5c035F0E633961b6F53fF2B7EfC7423229ecAAb8\", \"vote\");\n// Hook to check if the user has our NFT\nconst { data: nftBalance } = useNFTBalance(editionDrop, address, \"0\")\n\nconst hasClaimedNFT = useMemo(() => {\n  return nftBalance && nftBalance.gt(0)\n}, [nftBalance])\n\n// Holds the amount of token each member has in state.\nconst [memberTokenAmounts, setMemberTokenAmounts] = useState([]);\n// The array holding all of our members addresses.\nconst [memberAddresses, setMemberAddresses] = useState([]);\n\n// A fancy function to shorten someones wallet address, no need to show the whole thing.\nconst shortenAddress = (str) => {\nreturn str.substring(0, 6) + '...' + str.substring(str.length - 4);\n};\n\nconst [proposals, setProposals] = useState([]);\nconst [isVoting, setIsVoting] = useState(false);\nconst [hasVoted, setHasVoted] = useState(false);\n\n// Retrieve all our existing proposals from the contract.\nuseEffect(() => {\nif (!hasClaimedNFT) {\n  return;\n\n  \n}\n\n// A simple call to vote.getAll() to grab the proposals.\nconst getAllProposals = async () => {\n  try {\n    const proposals = await vote.getAll(0);\n    setProposals(proposals);\n    console.log(\"ðŸŒˆ Proposals:\", proposals);\n  } catch (error) {\n    console.log(\"failed to get proposals\", error);\n  }\n};\ngetAllProposals();\n}, [hasClaimedNFT, vote]);\n\n// We also need to check if the user already voted.\nuseEffect(() => {\nif (!hasClaimedNFT) {\n  return;\n}\n\n// If we haven't finished retrieving the proposals from the useEffect above\n// then we can't check if the user voted yet!\nif (!proposals.length) {\n  return;\n}\n\nconst checkIfUserHasVoted = async () => {\n  try {\n    const hasVoted = await vote.hasVoted(proposals[0].proposalId, address);\n    setHasVoted(hasVoted);\n    if (hasVoted) {\n      console.log(\"ðŸ¥µ User has already voted\");\n    } else {\n      console.log(\"ðŸ™‚ User has not voted yet\");\n    }\n  } catch (error) {\n    console.error(\"Failed to check if wallet has voted\", error);\n  }\n};\ncheckIfUserHasVoted();\n\n}, [hasClaimedNFT, proposals, address, vote]);\n\n// This useEffect grabs all the addresses of our members holding our NFT.\nuseEffect(() => {\nif (!hasClaimedNFT) {\n  return;\n}\n\n// Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n// with tokenId 0.\nconst getAllAddresses = async () => {\n  try {\n    const memberAddresses = await editionDrop?.history.getAllClaimerAddresses(\n      0,\n    );\n    setMemberAddresses(memberAddresses);\n    console.log('ðŸš€ Members addresses', memberAddresses);\n  } catch (error) {\n    console.error('failed to get member list', error);\n  }\n};\ngetAllAddresses();\n}, [hasClaimedNFT, editionDrop?.history]);\n\n// This useEffect grabs the # of token each member holds.\nuseEffect(() => {\nif (!hasClaimedNFT) {return;\n}\n\nconst getAllBalances = async () => {\n  try {\n    const amounts = await token?.history.getAllHolderBalances();\n    setMemberTokenAmounts(amounts);\n    console.log('ðŸ‘œ Amounts', amounts);\n  } catch (error) {\n    console.error('failed to get member balances', error);\n  }\n};\ngetAllBalances();\n}, [hasClaimedNFT, token?.history]);\n\n// Now, we combine the memberAddresses and memberTokenAmounts into a single array\nconst memberList = useMemo(() => {\n\nif (address && (network?.[0].data.chain.id !== ChainId.Goerli))\n          {\n  return (\n    <div className=\"unsupported-network\">\n      <h2>Please connect to Goerli</h2>\n      <p>\n        This dapp only works on the Goerli network, please switch networks\n        in your connected wallet.\n      </p>\n    </div>\n  );\n}\nreturn memberAddresses.map((address) => {\n  // We're checking if we are finding the address in the memberTokenAmounts array.\n  // If we are, we'll return the amount of token the user has.\n  // Otherwise, return 0.\n  const member = memberTokenAmounts?.find(({ holder }) => holder === address);\n\n  return {\n    address,\n    tokenAmount: member?.balance.displayValue || '0',\n  };\n});\n}, [address, memberAddresses, memberTokenAmounts, network]);\n\n// This is the case where the user hasn't connected their wallet\n// to your web app. Let them call connectWallet.\nif (address && (network?.[0].data.chain.id !== ChainId.Goerli)) {\n  return (\n\n    <div className=\"landing\">\n    <h2>Welcome to Boostr</h2>\n      <div className=\"btn-hero\">\n        <ConnectWallet />\n        <h3 id='goerli'>Switch to Goerli Network</h3>\n      </div>\n      <div>\n\n      </div>\n    </div>\n  )\n}\n\n\n// If the user has already claimed their NFT we want to display the internal DAO page to them\n// only DAO members will see this. Render all the members + token amounts + voting panel.\nif (hasClaimedNFT) {\nreturn (\n  <div className=\"member-page\">\n  <div className='container'>\n  </div>\n  <div className='rows'>\n    <div className='panels'>\n      <h2 className='h20'>DAO Members</h2>\n      <table className=\"card\">\n          <thead>\n            <tr id=\"wrapper\">\n              <th id=\"one\" className='cthw'> Wallet Address</th>\n              <th id=\"two\" className='cthw'> Voting Power</th>\n            </tr>\n          </thead>\n      <div className='rlskroll'>  \n        <tbody>\n          {memberList.map((member) => {\n            return (\n              <tr key={member.address}>\n                <td className='up'>{shortenAddress(member.address)}</td>\n                <td className='up'>{member.tokenAmount}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n       </div> \n      </table>\n    </div>\n    \n    <div className='panels'>\n      <h2 className='h20'>Proposals</h2>\n\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n\n          //before we do async things, we want to disable the button to prevent double clicks\n          setIsVoting(true);\n\n          // lets get the votes from the form for the values\n          const votes = proposals.map((proposal) => {\n            const voteResult = {\n              proposalId: proposal.proposalId,\n              //abstain by default\n              //vote: 2,\n            };\n            proposal.votes.forEach((vote) => {\n              const elem = document.getElementById(\n                proposal.proposalId + '-' + vote.type,\n              );\n\n              if (elem.checked) {\n                voteResult.vote = vote.type;\n                return;\n              }\n            });\n            return voteResult;\n          });\n\n          // first we need to make sure the user delegates their token to vote\n          try {\n            //we'll check if the wallet still needs to delegate their tokens before they can vote\n            const delegation = await token.getDelegationOf(address);\n            // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n            if (delegation === AddressZero) {\n              //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n              await token.delegateTo(address);\n            }\n            // then we need to vote on the proposals\n            try {\n              await Promise.all(\n                votes.map(async ({ proposalId, vote: _vote }) => {\n                  // before voting we first need to check whether the proposal is open for voting\n                  // we first need to get the latest state of the proposal\n                  const proposal = await vote.get(proposalId);\n                  // then we check if the proposal is open for voting (state === 1 means it is open)\n                  if (proposal.state === 1) {\n                    // if it is open for voting, we'll vote on it\n                    return vote.vote(proposalId, _vote);\n                  }\n                  // if the proposal is not open for voting we just return nothing, letting us continue\n                  return;\n                }),\n              );\n              try {\n                // if any of the propsals are ready to be executed we'll need to execute them\n                // a proposal is ready to be executed if it is in state 4\n                await Promise.all(\n                  votes.map(async ({ proposalId }) => {\n                    // we'll first get the latest state of the proposal again, since we may have just voted before\n                    const proposal = await vote.get(proposalId);\n\n                    //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                    if (proposal.state === 4) {\n                      return vote.execute(proposalId);\n                    }\n                  }),\n                );\n                // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                setHasVoted(true);\n                // and log out a success message\n                console.log('successfully voted');\n              } catch (err) {\n                console.error('failed to execute votes', err);\n              }\n            } catch (err) {\n              console.error('failed to vote', err);\n            }\n          } catch (err) {\n            console.error('failed to delegate tokens');\n          } finally {\n            // in *either* case we need to set the isVoting state to false to enable the button again\n            setIsVoting(false);\n          }\n        }}\n      >\n        \n        {proposals.map((proposal) => (\n          <div key={proposal.proposalId} className=\"card\">\n            <h2>{proposal.description}</h2>\n            <div className=\"vote-box\">\n              {proposal.votes.map(({ type, label }) => (\n                <div className=\"vote-icon\" key={type}>\n                  <input\n                    type=\"radio\"\n                    id={proposal.proposalId + '-' + type}\n                    name={proposal.proposalId}\n                    value={type}\n                    //default the \"abstain\" vote to checked\n                    //defaultChecked={type === 2}\n                  />\n                  <label htmlFor={proposal.proposalId + '-' + type}>\n                    {label}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n        <button disabled={isVoting || hasVoted} type=\"submit\">\n          {isVoting\n            ? 'Voting...'\n            : hasVoted\n            ? 'You Already Voted'\n            : 'Submit Votes'}\n        </button>\n        {!hasVoted && (\n          <small>\n            This will trigger multiple transactions that you will need to\n            sign.\n          </small>\n        )}\n      \n      </form>\n    </div>\n  </div>\n \n  \n</div>\n);\n}\n\n// Render mint nft screen.\nreturn (\n  <div className=\"mint-nft\">\n    <h2>Create Membership NFT</h2>\n    <div className=\"btn-hero\">\n      <Web3Button \n        contractAddress={editionDropAddress}\n        action={contract => {\n          contract.erc1155.claim(0, 1)\n        }}\n        onSuccess={() => {\n          console.log(`ðŸŒŠ Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${editionDrop.getAddress()}/0`);\n        }}\n        onError={error => {\n          console.error(\"Failed to mint NFT\", error);\n        }}\n      >\n      IT's (FREE) to join!\n      </Web3Button>\n    </div>\n  </div>\n  \n  \n);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}