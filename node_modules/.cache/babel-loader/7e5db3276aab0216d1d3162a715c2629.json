{"ast":null,"code":"'use strict';\n\nconst {\n  DAGLink,\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst Dir = require('./dir');\n\nconst persist = require('./utils/persist');\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('./types').BlockAPI} BlockAPI\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('cids')} CID\n */\n\n\nclass DirFlat extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor(props, options) {\n    super(props, options);\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n\n    this._children = {};\n  }\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n\n\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n  /**\n   * @param {string} name\n   */\n\n\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n\n  directChildrenCount() {\n    return this.childCount();\n  }\n\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n  /**\n   * @param {BlockAPI} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n\n\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push(new DAGLink(children[i], child.size, child.cid));\n      }\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    const node = new DAGNode(unixfs.marshal(), links);\n    const buffer = node.serialize();\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce(\n    /**\n     * @param {number} acc\n     * @param {DAGLink} curr\n     */\n    (acc, curr) => acc + curr.Tsize, 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n\n}\n\nmodule.exports = DirFlat;","map":null,"metadata":{},"sourceType":"script"}