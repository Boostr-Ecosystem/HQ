{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _FallbackHandlerManager_ethAdapter, _FallbackHandlerManager_safeContract, _FallbackHandlerManager_slot;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst safe_core_sdk_utils_1 = require(\"@safe-global/safe-core-sdk-utils\");\n\nconst utils_1 = require(\"../utils\");\n\nconst constants_1 = require(\"../utils/constants\");\n\nclass FallbackHandlerManager {\n  constructor(ethAdapter, safeContract) {\n    _FallbackHandlerManager_ethAdapter.set(this, void 0);\n\n    _FallbackHandlerManager_safeContract.set(this, void 0); // keccak256(\"fallback_manager.handler.address\")\n\n\n    _FallbackHandlerManager_slot.set(this, '0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5');\n\n    __classPrivateFieldSet(this, _FallbackHandlerManager_ethAdapter, ethAdapter, \"f\");\n\n    __classPrivateFieldSet(this, _FallbackHandlerManager_safeContract, safeContract, \"f\");\n  }\n\n  validateFallbackHandlerAddress(fallbackHandlerAddress) {\n    const isValidAddress = __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, \"f\").isAddress(fallbackHandlerAddress);\n\n    if (!isValidAddress || (0, utils_1.isZeroAddress)(fallbackHandlerAddress)) {\n      throw new Error('Invalid fallback handler address provided');\n    }\n  }\n\n  validateFallbackHandlerIsNotEnabled(currentFallbackHandler, newFallbackHandlerAddress) {\n    if ((0, utils_1.sameString)(currentFallbackHandler, newFallbackHandlerAddress)) {\n      throw new Error('Fallback handler provided is already enabled');\n    }\n  }\n\n  validateFallbackHandlerIsEnabled(fallbackHandlerAddress) {\n    if ((0, utils_1.isZeroAddress)(fallbackHandlerAddress)) {\n      throw new Error('There is no fallback handler enabled yet');\n    }\n  }\n\n  async getFallbackHandler() {\n    const safeVersion = await __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, \"f\").getVersion();\n\n    if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_FALLBACK_HANDLER, safeVersion)) {\n      return __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, \"f\").getStorageAt(__classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, \"f\").getAddress(), __classPrivateFieldGet(this, _FallbackHandlerManager_slot, \"f\"));\n    } else {\n      throw new Error('Current version of the Safe does not support the fallback handler functionality');\n    }\n  }\n\n  async encodeEnableFallbackHandlerData(fallbackHandlerAddress) {\n    this.validateFallbackHandlerAddress(fallbackHandlerAddress);\n    const currentFallbackHandler = await this.getFallbackHandler();\n    this.validateFallbackHandlerIsNotEnabled(currentFallbackHandler, fallbackHandlerAddress);\n    return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, \"f\").encode('setFallbackHandler', [fallbackHandlerAddress]);\n  }\n\n  async encodeDisableFallbackHandlerData() {\n    const currentFallbackHandler = await this.getFallbackHandler();\n    this.validateFallbackHandlerIsEnabled(currentFallbackHandler);\n    return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, \"f\").encode('setFallbackHandler', [constants_1.ZERO_ADDRESS]);\n  }\n\n}\n\n_FallbackHandlerManager_ethAdapter = new WeakMap(), _FallbackHandlerManager_safeContract = new WeakMap(), _FallbackHandlerManager_slot = new WeakMap();\nexports.default = FallbackHandlerManager; //# sourceMappingURL=fallbackHandlerManager.js.map","map":null,"metadata":{},"sourceType":"script"}