{"ast":null,"code":"import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-eea39a9a.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { T as TWConnector } from '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport { providers } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport 'eventemitter3';\n\nvar _wallet = /*#__PURE__*/new WeakMap();\n\nvar _provider = /*#__PURE__*/new WeakMap();\n\nvar _signer = /*#__PURE__*/new WeakMap();\n\nclass DeviceWalletConnector extends TWConnector {\n  constructor(options) {\n    super();\n\n    _defineProperty(this, \"id\", \"device_wallet\");\n\n    _defineProperty(this, \"name\", \"Device Wallet\");\n\n    _defineProperty(this, \"options\", void 0);\n\n    _classPrivateFieldInitSpec(this, _wallet, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n\n    _defineProperty(this, \"shimDisconnectKey\", \"deviceWallet.shimDisconnect\");\n\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = !this.options.chains.find(c => c.chainId === id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n\n    this.options = options;\n\n    _classPrivateFieldSet(this, _wallet, options.wallet);\n  }\n\n  async connect(args) {\n    await this.initializeDeviceWallet(args.password);\n\n    if (args.chainId) {\n      this.switchChain(args.chainId);\n    }\n\n    const signer = await this.getSigner();\n    const address = await signer.getAddress();\n    return address;\n  }\n\n  async initializeDeviceWallet(password) {\n    const savedAddr = await _classPrivateFieldGet(this, _wallet).getSavedWalletAddress();\n\n    if (!savedAddr) {\n      await _classPrivateFieldGet(this, _wallet).generateNewWallet();\n      await _classPrivateFieldGet(this, _wallet).save(password);\n    } else {\n      await _classPrivateFieldGet(this, _wallet).loadSavedWallet(password);\n    }\n  }\n\n  async disconnect() {\n    _classPrivateFieldSet(this, _provider, undefined);\n\n    _classPrivateFieldSet(this, _signer, undefined);\n  }\n\n  async getAddress() {\n    const signer = await this.getSigner();\n\n    if (!signer) {\n      throw new Error(\"No signer found\");\n    }\n\n    return await signer.getAddress();\n  }\n\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch {\n      return false;\n    }\n  }\n\n  async getProvider() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      _classPrivateFieldSet(this, _provider, new providers.JsonRpcBatchProvider(this.options.chain.rpc[0]));\n    }\n\n    return _classPrivateFieldGet(this, _provider);\n  }\n\n  async getSigner() {\n    if (!_classPrivateFieldGet(this, _wallet)) {\n      throw new Error(\"No wallet found\");\n    }\n\n    if (!_classPrivateFieldGet(this, _signer)) {\n      const provider = await this.getProvider();\n\n      _classPrivateFieldSet(this, _signer, await _classPrivateFieldGet(this, _wallet).getSigner(provider));\n    }\n\n    return _classPrivateFieldGet(this, _signer);\n  }\n\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n\n    if (!chain) {\n      throw new Error(\"Chain not found\");\n    }\n\n    _classPrivateFieldSet(this, _provider, new providers.JsonRpcBatchProvider(chain.rpc[0]));\n\n    _classPrivateFieldSet(this, _signer, await _classPrivateFieldGet(this, _wallet).getSigner(_classPrivateFieldGet(this, _provider)));\n\n    this.onChainChanged(chainId);\n  }\n\n  async setupListeners() {}\n\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n\n}\n\nexport { DeviceWalletConnector };","map":null,"metadata":{},"sourceType":"module"}