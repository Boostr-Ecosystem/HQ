{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"../../utils\");\n\nclass CreateCallEthersContract {\n  constructor(contract) {\n    this.contract = contract;\n\n    this.encode = (methodName, params) => {\n      return this.contract.interface.encodeFunctionData(methodName, params);\n    };\n  }\n\n  getAddress() {\n    return this.contract.address;\n  }\n\n  async performCreate2(value, deploymentData, salt, options) {\n    if (options && !options.gasLimit) {\n      options.gasLimit = await this.estimateGas('performCreate2', [value, deploymentData, salt], { ...options\n      });\n    }\n\n    const txResponse = await this.contract.performCreate2(value, deploymentData, salt, options);\n    return (0, utils_1.toTxResult)(txResponse, options);\n  }\n\n  async performCreate(value, deploymentData, options) {\n    if (options && !options.gasLimit) {\n      options.gasLimit = await this.estimateGas('performCreate', [value, deploymentData], { ...options\n      });\n    }\n\n    const txResponse = await this.contract.performCreate(value, deploymentData, options);\n    return (0, utils_1.toTxResult)(txResponse, options);\n  }\n\n  async estimateGas(methodName, params, options) {\n    return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n  }\n\n}\n\nexports.default = CreateCallEthersContract; //# sourceMappingURL=CreateCallEthersContract.js.map","map":null,"metadata":{},"sourceType":"script"}