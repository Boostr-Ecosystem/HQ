{"ast":null,"code":"'use strict';\n\nconst mh = require('multihashing-async');\n\nconst CID = require('cids');\n/**\n * @param {Uint8Array} buffer\n * @param {import('../types').BlockAPI} block\n * @param {import('../types').PersistOptions} options\n */\n\n\nconst persist = async (buffer, block, options) => {\n  if (!options.codec) {\n    options.codec = 'dag-pb';\n  }\n\n  if (!options.cidVersion) {\n    options.cidVersion = 0;\n  }\n\n  if (!options.hashAlg) {\n    options.hashAlg = 'sha2-256';\n  }\n\n  if (options.hashAlg !== 'sha2-256') {\n    options.cidVersion = 1;\n  }\n\n  const multihash = await mh(buffer, options.hashAlg);\n  const cid = new CID(options.cidVersion, options.codec, multihash);\n\n  if (!options.onlyHash) {\n    // @ts-ignore block api takes uint8arrays or blocks but is missing from typedefs\n    await block.put(buffer, {\n      // @ts-ignore pin option is missing from block api typedefs\n      pin: options.pin,\n      preload: options.preload,\n      timeout: options.timeout,\n      cid\n    });\n  }\n\n  return cid;\n};\n\nmodule.exports = persist;","map":null,"metadata":{},"sourceType":"script"}