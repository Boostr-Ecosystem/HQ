{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\n\nclass GnosisSafeProxyFactoryEthersContract {\n  constructor(contract) {\n    this.contract = contract;\n  }\n\n  getAddress() {\n    return this.contract.address;\n  }\n\n  async proxyCreationCode() {\n    return this.contract.proxyCreationCode();\n  }\n\n  async createProxy(_ref) {\n    let {\n      safeMasterCopyAddress,\n      initializer,\n      saltNonce,\n      options,\n      callback\n    } = _ref;\n    if (bignumber_1.BigNumber.from(saltNonce).lt(0)) throw new Error('saltNonce must be greater than or equal to 0');\n\n    if (options && !options.gasLimit) {\n      options.gasLimit = await this.estimateGas('createProxyWithNonce', [safeMasterCopyAddress, initializer, saltNonce], { ...options\n      });\n    }\n\n    const proxyAddress = this.contract.createProxyWithNonce(safeMasterCopyAddress, initializer, saltNonce, options).then(async txResponse => {\n      var _a;\n\n      if (callback) {\n        callback(txResponse.hash);\n      }\n\n      const txReceipt = await txResponse.wait();\n      const proxyCreationEvent = (_a = txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.events) === null || _a === void 0 ? void 0 : _a.find(_ref2 => {\n        let {\n          event\n        } = _ref2;\n        return event === 'ProxyCreation';\n      });\n\n      if (!proxyCreationEvent || !proxyCreationEvent.args) {\n        throw new Error('SafeProxy was not deployed correctly');\n      }\n\n      const proxyAddress = proxyCreationEvent.args[0];\n      return proxyAddress;\n    });\n    return proxyAddress;\n  }\n\n  encode(methodName, params) {\n    return this.contract.interface.encodeFunctionData(methodName, params);\n  }\n\n  async estimateGas(methodName, params, options) {\n    return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n  }\n\n}\n\nexports.default = GnosisSafeProxyFactoryEthersContract; //# sourceMappingURL=GnosisSafeProxyFactoryEthersContract.js.map","map":null,"metadata":{},"sourceType":"script"}