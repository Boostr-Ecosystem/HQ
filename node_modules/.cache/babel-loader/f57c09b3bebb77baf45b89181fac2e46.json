{"ast":null,"code":"'use strict';\n\nconst protobuf = require('protobufjs/minimal');\n\nconst {\n  PBLink\n} = require('./dag');\n\nconst {\n  createDagLinkFromB58EncodedHash\n} = require('./dag-link/util');\n/**\n * @typedef {import('./dag-link/dagLink')} DAGLink\n * @typedef {import('./types').DAGLinkLike} DAGLinkLike\n * @typedef {import('./types').SerializableDAGNode} SerializableDAGNode\n * @typedef {import('cids')} CID\n */\n\n/**\n * @param { { Data?: Uint8Array, Links: (DAGLink | DAGLinkLike)[] }} node\n * @returns {SerializableDAGNode}\n */\n\n\nconst toProtoBuf = node => {\n  const pbn = {};\n\n  if (node.Data && node.Data.byteLength > 0) {\n    pbn.Data = node.Data;\n  } else {\n    // NOTE: this has to be null in order to match go-ipfs serialization\n    // `null !== new Uint8Array(0)`\n    pbn.Data = null;\n  }\n\n  if (node.Links && node.Links.length > 0) {\n    pbn.Links = node.Links.map(link => ({\n      Hash: link.Hash.bytes,\n      Name: link.Name,\n      Tsize: link.Tsize\n    }));\n  } else {\n    pbn.Links = null;\n  }\n\n  return pbn;\n};\n/**\n * Serialize internal representation into a binary PB block.\n *\n * @param {import('./dag-node/dagNode')} node - Internal representation of a PB block\n */\n\n\nconst serializeDAGNode = node => {\n  return encode(toProtoBuf(node));\n};\n/**\n * Serialize an object where the `Links` might not be a `DAGLink` instance yet\n *\n * @param {Uint8Array} [data]\n * @param {(DAGLink | string | DAGLinkLike)[]} [links]\n */\n\n\nconst serializeDAGNodeLike = function (data) {\n  let links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const node = {\n    Data: data,\n    Links: links.map(link => {\n      return createDagLinkFromB58EncodedHash(link);\n    })\n  };\n  return encode(toProtoBuf(node));\n};\n\nmodule.exports = {\n  serializeDAGNode,\n  serializeDAGNodeLike\n};\n/**\n * The fields in PBNode are the wrong way round - `id: 2` comes before\n * `id: 1`. protobufjs writes them out in id order but go-IPFS does not so\n * we have to use the protobuf.Writer interface directly to get the same\n * serialized form as go-IPFS\n *\n * @param {SerializableDAGNode} pbf\n */\n\nfunction encode(pbf) {\n  const writer = protobuf.Writer.create();\n\n  if (pbf.Links != null) {\n    for (let i = 0; i < pbf.Links.length; i++) {\n      PBLink.encode(pbf.Links[i], writer.uint32(18).fork()).ldelim();\n    }\n  }\n\n  if (pbf.Data != null) {\n    writer.uint32(10).bytes(pbf.Data);\n  }\n\n  return writer.finish();\n}","map":null,"metadata":{},"sourceType":"script"}