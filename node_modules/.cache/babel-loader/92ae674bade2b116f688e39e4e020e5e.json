{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _GuardManager_ethAdapter, _GuardManager_safeContract, _GuardManager_slot;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst safe_core_sdk_utils_1 = require(\"@safe-global/safe-core-sdk-utils\");\n\nconst utils_1 = require(\"../utils\");\n\nconst constants_1 = require(\"../utils/constants\");\n\nclass GuardManager {\n  constructor(ethAdapter, safeContract) {\n    _GuardManager_ethAdapter.set(this, void 0);\n\n    _GuardManager_safeContract.set(this, void 0); // keccak256(\"guard_manager.guard.address\")\n\n\n    _GuardManager_slot.set(this, '0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8');\n\n    __classPrivateFieldSet(this, _GuardManager_ethAdapter, ethAdapter, \"f\");\n\n    __classPrivateFieldSet(this, _GuardManager_safeContract, safeContract, \"f\");\n  }\n\n  validateGuardAddress(guardAddress) {\n    const isValidAddress = __classPrivateFieldGet(this, _GuardManager_ethAdapter, \"f\").isAddress(guardAddress);\n\n    if (!isValidAddress || (0, utils_1.isZeroAddress)(guardAddress)) {\n      throw new Error('Invalid guard address provided');\n    }\n  }\n\n  validateGuardIsNotEnabled(currentGuard, newGuardAddress) {\n    if ((0, utils_1.sameString)(currentGuard, newGuardAddress)) {\n      throw new Error('Guard provided is already enabled');\n    }\n  }\n\n  validateGuardIsEnabled(guardAddress) {\n    if ((0, utils_1.isZeroAddress)(guardAddress)) {\n      throw new Error('There is no guard enabled yet');\n    }\n  }\n\n  async getGuard() {\n    const safeVersion = await __classPrivateFieldGet(this, _GuardManager_safeContract, \"f\").getVersion();\n\n    if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_TX_GUARDS, safeVersion)) {\n      return __classPrivateFieldGet(this, _GuardManager_ethAdapter, \"f\").getStorageAt(__classPrivateFieldGet(this, _GuardManager_safeContract, \"f\").getAddress(), __classPrivateFieldGet(this, _GuardManager_slot, \"f\"));\n    } else {\n      throw new Error('Current version of the Safe does not support Safe transaction guards functionality');\n    }\n  }\n\n  async encodeEnableGuardData(guardAddress) {\n    this.validateGuardAddress(guardAddress);\n    const currentGuard = await this.getGuard();\n    this.validateGuardIsNotEnabled(currentGuard, guardAddress);\n    return __classPrivateFieldGet(this, _GuardManager_safeContract, \"f\").encode('setGuard', [guardAddress]);\n  }\n\n  async encodeDisableGuardData() {\n    const currentGuard = await this.getGuard();\n    this.validateGuardIsEnabled(currentGuard);\n    return __classPrivateFieldGet(this, _GuardManager_safeContract, \"f\").encode('setGuard', [constants_1.ZERO_ADDRESS]);\n  }\n\n}\n\n_GuardManager_ethAdapter = new WeakMap(), _GuardManager_safeContract = new WeakMap(), _GuardManager_slot = new WeakMap();\nexports.default = GuardManager; //# sourceMappingURL=guardManager.js.map","map":null,"metadata":{},"sourceType":"script"}