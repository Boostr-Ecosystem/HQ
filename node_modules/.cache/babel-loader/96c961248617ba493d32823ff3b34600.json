{"ast":null,"code":"'use strict';\n\nconst sortLinks = require('./sortLinks');\n\nconst DAGLink = require('../dag-link/dagLink');\n\nconst {\n  createDagLinkFromB58EncodedHash\n} = require('../dag-link/util');\n\nconst {\n  serializeDAGNode\n} = require('../serialize');\n\nconst toDAGLink = require('./toDagLink');\n\nconst addLink = require('./addLink');\n\nconst rmLink = require('./rmLink');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../types').DAGLinkLike} DAGLinkLike\n */\n\n\nclass DAGNode {\n  /**\n   *@param {Uint8Array | string} [data]\n   * @param {(DAGLink | DAGLinkLike)[]} links\n   * @param {number | null} [serializedSize]\n   */\n  constructor(data) {\n    let links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let serializedSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (!data) {\n      data = new Uint8Array(0);\n    }\n\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data);\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!');\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n\n    const sortedLinks = links.map(link => {\n      return link instanceof DAGLink ? link : createDagLinkFromB58EncodedHash(link);\n    });\n    sortLinks(sortedLinks);\n    this.Data = data;\n    this.Links = sortedLinks;\n    Object.defineProperties(this, {\n      _serializedSize: {\n        value: serializedSize,\n        writable: true,\n        enumerable: false\n      },\n      _size: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`;\n  }\n\n  _invalidateCached() {\n    this._serializedSize = null;\n    this._size = null;\n  }\n  /**\n   * @param {DAGLink | import('../types').DAGLinkLike} link\n   */\n\n\n  addLink(link) {\n    this._invalidateCached();\n\n    return addLink(this, link);\n  }\n  /**\n   * @param {DAGLink | string | CID} link\n   */\n\n\n  rmLink(link) {\n    this._invalidateCached();\n\n    return rmLink(this, link);\n  }\n  /**\n   * @param {import('./toDagLink').ToDagLinkOptions} [options]\n   */\n\n\n  toDAGLink(options) {\n    return toDAGLink(this, options);\n  }\n\n  serialize() {\n    const buf = serializeDAGNode(this);\n    this._serializedSize = buf.length;\n    return buf;\n  }\n\n  get size() {\n    if (this._size == null) {\n      let serializedSize;\n\n      if (serializedSize == null) {\n        this._serializedSize = this.serialize().length;\n        serializedSize = this._serializedSize;\n      }\n\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n}\n\nmodule.exports = DAGNode;","map":null,"metadata":{},"sourceType":"script"}